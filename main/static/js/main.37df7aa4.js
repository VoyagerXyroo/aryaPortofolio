/*! For license information please see main.37df7aa4.js.LICENSE.txt */
(() => {
  "use strict";
  var e = {
    730: (e, t, n) => {
      var i = n(43),
        r = n(853);
      function a(e) {
        for (
          var t =
            "https://reactjs.org/docs/error-decoder.html?invariant=" + e,
          n = 1;
          n < arguments.length;
          n++
        )
          t += "&args[]=" + encodeURIComponent(arguments[n]);
        return (
          "Minified React error #" +
          e +
          "; visit " +
          t +
          " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
        );
      }
      var o = new Set(),
        s = {};
      function l(e, t) {
        c(e, t), c(e + "Capture", t);
      }
      function c(e, t) {
        for (s[e] = t, e = 0; e < t.length; e++) o.add(t[e]);
      }
      var u = !(
        "undefined" === typeof window ||
        "undefined" === typeof window.document ||
        "undefined" === typeof window.document.createElement
      ),
        d = Object.prototype.hasOwnProperty,
        h =
          /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
        p = {},
        f = {};
      function m(e, t, n, i, r, a, o) {
        (this.acceptsBooleans = 2 === t || 3 === t || 4 === t),
          (this.attributeName = i),
          (this.attributeNamespace = r),
          (this.mustUseProperty = n),
          (this.propertyName = e),
          (this.type = t),
          (this.sanitizeURL = a),
          (this.removeEmptyString = o);
      }
      var g = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style"
        .split(" ")
        .forEach(function (e) {
          g[e] = new m(e, 0, !1, e, null, !1, !1);
        }),
        [
          ["acceptCharset", "accept-charset"],
          ["className", "class"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
        ].forEach(function (e) {
          var t = e[0];
          g[t] = new m(t, 1, !1, e[1], null, !1, !1);
        }),
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(
          function (e) {
            g[e] = new m(e, 2, !1, e.toLowerCase(), null, !1, !1);
          }
        ),
        [
          "autoReverse",
          "externalResourcesRequired",
          "focusable",
          "preserveAlpha",
        ].forEach(function (e) {
          g[e] = new m(e, 2, !1, e, null, !1, !1);
        }),
        "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope"
          .split(" ")
          .forEach(function (e) {
            g[e] = new m(e, 3, !1, e.toLowerCase(), null, !1, !1);
          }),
        ["checked", "multiple", "muted", "selected"].forEach(function (e) {
          g[e] = new m(e, 3, !0, e, null, !1, !1);
        }),
        ["capture", "download"].forEach(function (e) {
          g[e] = new m(e, 4, !1, e, null, !1, !1);
        }),
        ["cols", "rows", "size", "span"].forEach(function (e) {
          g[e] = new m(e, 6, !1, e, null, !1, !1);
        }),
        ["rowSpan", "start"].forEach(function (e) {
          g[e] = new m(e, 5, !1, e.toLowerCase(), null, !1, !1);
        });
      var v = /[\-:]([a-z])/g;
      function _(e) {
        return e[1].toUpperCase();
      }
      function y(e, t, n, i) {
        var r = g.hasOwnProperty(t) ? g[t] : null;
        (null !== r
          ? 0 !== r.type
          : i ||
          !(2 < t.length) ||
          ("o" !== t[0] && "O" !== t[0]) ||
          ("n" !== t[1] && "N" !== t[1])) &&
          ((function (e, t, n, i) {
            if (
              null === t ||
              "undefined" === typeof t ||
              (function (e, t, n, i) {
                if (null !== n && 0 === n.type) return !1;
                switch (typeof t) {
                  case "function":
                  case "symbol":
                    return !0;
                  case "boolean":
                    return (
                      !i &&
                      (null !== n
                        ? !n.acceptsBooleans
                        : "data-" !== (e = e.toLowerCase().slice(0, 5)) &&
                        "aria-" !== e)
                    );
                  default:
                    return !1;
                }
              })(e, t, n, i)
            )
              return !0;
            if (i) return !1;
            if (null !== n)
              switch (n.type) {
                case 3:
                  return !t;
                case 4:
                  return !1 === t;
                case 5:
                  return isNaN(t);
                case 6:
                  return isNaN(t) || 1 > t;
              }
            return !1;
          })(t, n, r, i) && (n = null),
            i || null === r
              ? (function (e) {
                return (
                  !!d.call(f, e) ||
                  (!d.call(p, e) &&
                    (h.test(e) ? (f[e] = !0) : ((p[e] = !0), !1)))
                );
              })(t) &&
              (null === n ? e.removeAttribute(t) : e.setAttribute(t, "" + n))
              : r.mustUseProperty
                ? (e[r.propertyName] = null === n ? 3 !== r.type && "" : n)
                : ((t = r.attributeName),
                  (i = r.attributeNamespace),
                  null === n
                    ? e.removeAttribute(t)
                    : ((n =
                      3 === (r = r.type) || (4 === r && !0 === n)
                        ? ""
                        : "" + n),
                      i ? e.setAttributeNS(i, t, n) : e.setAttribute(t, n))));
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height"
        .split(" ")
        .forEach(function (e) {
          var t = e.replace(v, _);
          g[t] = new m(t, 1, !1, e, null, !1, !1);
        }),
        "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type"
          .split(" ")
          .forEach(function (e) {
            var t = e.replace(v, _);
            g[t] = new m(t, 1, !1, e, "http://www.w3.org/1999/xlink", !1, !1);
          }),
        ["xml:base", "xml:lang", "xml:space"].forEach(function (e) {
          var t = e.replace(v, _);
          g[t] = new m(
            t,
            1,
            !1,
            e,
            "http://www.w3.org/XML/1998/namespace",
            !1,
            !1
          );
        }),
        ["tabIndex", "crossOrigin"].forEach(function (e) {
          g[e] = new m(e, 1, !1, e.toLowerCase(), null, !1, !1);
        }),
        (g.xlinkHref = new m(
          "xlinkHref",
          1,
          !1,
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          !0,
          !1
        )),
        ["src", "href", "action", "formAction"].forEach(function (e) {
          g[e] = new m(e, 1, !1, e.toLowerCase(), null, !0, !0);
        });
      var x = i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
        b = Symbol.for("react.element"),
        S = Symbol.for("react.portal"),
        E = Symbol.for("react.fragment"),
        M = Symbol.for("react.strict_mode"),
        T = Symbol.for("react.profiler"),
        w = Symbol.for("react.provider"),
        A = Symbol.for("react.context"),
        R = Symbol.for("react.forward_ref"),
        C = Symbol.for("react.suspense"),
        P = Symbol.for("react.suspense_list"),
        L = Symbol.for("react.memo"),
        N = Symbol.for("react.lazy");
      Symbol.for("react.scope"), Symbol.for("react.debug_trace_mode");
      var D = Symbol.for("react.offscreen");
      Symbol.for("react.legacy_hidden"),
        Symbol.for("react.cache"),
        Symbol.for("react.tracing_marker");
      var U = Symbol.iterator;
      function I(e) {
        return null === e || "object" !== typeof e
          ? null
          : "function" === typeof (e = (U && e[U]) || e["@@iterator"])
            ? e
            : null;
      }
      var O,
        k = Object.assign;
      function F(e) {
        if (void 0 === O)
          try {
            throw Error();
          } catch (n) {
            var t = n.stack.trim().match(/\n( *(at )?)/);
            O = (t && t[1]) || "";
          }
        return "\n" + O + e;
      }
      var z = !1;
      function B(e, t) {
        if (!e || z) return "";
        z = !0;
        var n = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (t)
            if (
              ((t = function () {
                throw Error();
              }),
                Object.defineProperty(t.prototype, "props", {
                  set: function () {
                    throw Error();
                  },
                }),
                "object" === typeof Reflect && Reflect.construct)
            ) {
              try {
                Reflect.construct(t, []);
              } catch (c) {
                var i = c;
              }
              Reflect.construct(e, [], t);
            } else {
              try {
                t.call();
              } catch (c) {
                i = c;
              }
              e.call(t.prototype);
            }
          else {
            try {
              throw Error();
            } catch (c) {
              i = c;
            }
            e();
          }
        } catch (c) {
          if (c && i && "string" === typeof c.stack) {
            for (
              var r = c.stack.split("\n"),
              a = i.stack.split("\n"),
              o = r.length - 1,
              s = a.length - 1;
              1 <= o && 0 <= s && r[o] !== a[s];

            )
              s--;
            for (; 1 <= o && 0 <= s; o--, s--)
              if (r[o] !== a[s]) {
                if (1 !== o || 1 !== s)
                  do {
                    if ((o--, 0 > --s || r[o] !== a[s])) {
                      var l = "\n" + r[o].replace(" at new ", " at ");
                      return (
                        e.displayName &&
                        l.includes("<anonymous>") &&
                        (l = l.replace("<anonymous>", e.displayName)),
                        l
                      );
                    }
                  } while (1 <= o && 0 <= s);
                break;
              }
          }
        } finally {
          (z = !1), (Error.prepareStackTrace = n);
        }
        return (e = e ? e.displayName || e.name : "") ? F(e) : "";
      }
      function V(e) {
        switch (e.tag) {
          case 5:
            return F(e.type);
          case 16:
            return F("Lazy");
          case 13:
            return F("Suspense");
          case 19:
            return F("SuspenseList");
          case 0:
          case 2:
          case 15:
            return (e = B(e.type, !1));
          case 11:
            return (e = B(e.type.render, !1));
          case 1:
            return (e = B(e.type, !0));
          default:
            return "";
        }
      }
      function H(e) {
        if (null == e) return null;
        if ("function" === typeof e) return e.displayName || e.name || null;
        if ("string" === typeof e) return e;
        switch (e) {
          case E:
            return "Fragment";
          case S:
            return "Portal";
          case T:
            return "Profiler";
          case M:
            return "StrictMode";
          case C:
            return "Suspense";
          case P:
            return "SuspenseList";
        }
        if ("object" === typeof e)
          switch (e.$$typeof) {
            case A:
              return (e.displayName || "Context") + ".Consumer";
            case w:
              return (e._context.displayName || "Context") + ".Provider";
            case R:
              var t = e.render;
              return (
                (e = e.displayName) ||
                (e =
                  "" !== (e = t.displayName || t.name || "")
                    ? "ForwardRef(" + e + ")"
                    : "ForwardRef"),
                e
              );
            case L:
              return null !== (t = e.displayName || null)
                ? t
                : H(e.type) || "Memo";
            case N:
              (t = e._payload), (e = e._init);
              try {
                return H(e(t));
              } catch (n) { }
          }
        return null;
      }
      function G(e) {
        var t = e.type;
        switch (e.tag) {
          case 24:
            return "Cache";
          case 9:
            return (t.displayName || "Context") + ".Consumer";
          case 10:
            return (t._context.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return (
              (e = (e = t.render).displayName || e.name || ""),
              t.displayName ||
              ("" !== e ? "ForwardRef(" + e + ")" : "ForwardRef")
            );
          case 7:
            return "Fragment";
          case 5:
            return t;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return H(t);
          case 8:
            return t === M ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 17:
          case 2:
          case 14:
          case 15:
            if ("function" === typeof t)
              return t.displayName || t.name || null;
            if ("string" === typeof t) return t;
        }
        return null;
      }
      function W(e) {
        switch (typeof e) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
          case "object":
            return e;
          default:
            return "";
        }
      }
      function j(e) {
        var t = e.type;
        return (
          (e = e.nodeName) &&
          "input" === e.toLowerCase() &&
          ("checkbox" === t || "radio" === t)
        );
      }
      function X(e) {
        e._valueTracker ||
          (e._valueTracker = (function (e) {
            var t = j(e) ? "checked" : "value",
              n = Object.getOwnPropertyDescriptor(e.constructor.prototype, t),
              i = "" + e[t];
            if (
              !e.hasOwnProperty(t) &&
              "undefined" !== typeof n &&
              "function" === typeof n.get &&
              "function" === typeof n.set
            ) {
              var r = n.get,
                a = n.set;
              return (
                Object.defineProperty(e, t, {
                  configurable: !0,
                  get: function () {
                    return r.call(this);
                  },
                  set: function (e) {
                    (i = "" + e), a.call(this, e);
                  },
                }),
                Object.defineProperty(e, t, { enumerable: n.enumerable }),
                {
                  getValue: function () {
                    return i;
                  },
                  setValue: function (e) {
                    i = "" + e;
                  },
                  stopTracking: function () {
                    (e._valueTracker = null), delete e[t];
                  },
                }
              );
            }
          })(e));
      }
      function Y(e) {
        if (!e) return !1;
        var t = e._valueTracker;
        if (!t) return !0;
        var n = t.getValue(),
          i = "";
        return (
          e && (i = j(e) ? (e.checked ? "true" : "false") : e.value),
          (e = i) !== n && (t.setValue(e), !0)
        );
      }
      function q(e) {
        if (
          "undefined" ===
          typeof (e =
            e || ("undefined" !== typeof document ? document : void 0))
        )
          return null;
        try {
          return e.activeElement || e.body;
        } catch (t) {
          return e.body;
        }
      }
      function K(e, t) {
        var n = t.checked;
        return k({}, t, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: void 0,
          checked: null != n ? n : e._wrapperState.initialChecked,
        });
      }
      function Z(e, t) {
        var n = null == t.defaultValue ? "" : t.defaultValue,
          i = null != t.checked ? t.checked : t.defaultChecked;
        (n = W(null != t.value ? t.value : n)),
          (e._wrapperState = {
            initialChecked: i,
            initialValue: n,
            controlled:
              "checkbox" === t.type || "radio" === t.type
                ? null != t.checked
                : null != t.value,
          });
      }
      function J(e, t) {
        null != (t = t.checked) && y(e, "checked", t, !1);
      }
      function Q(e, t) {
        J(e, t);
        var n = W(t.value),
          i = t.type;
        if (null != n)
          "number" === i
            ? ((0 === n && "" === e.value) || e.value != n) &&
            (e.value = "" + n)
            : e.value !== "" + n && (e.value = "" + n);
        else if ("submit" === i || "reset" === i)
          return void e.removeAttribute("value");
        t.hasOwnProperty("value")
          ? ee(e, t.type, n)
          : t.hasOwnProperty("defaultValue") &&
          ee(e, t.type, W(t.defaultValue)),
          null == t.checked &&
          null != t.defaultChecked &&
          (e.defaultChecked = !!t.defaultChecked);
      }
      function $(e, t, n) {
        if (t.hasOwnProperty("value") || t.hasOwnProperty("defaultValue")) {
          var i = t.type;
          if (
            !(
              ("submit" !== i && "reset" !== i) ||
              (void 0 !== t.value && null !== t.value)
            )
          )
            return;
          (t = "" + e._wrapperState.initialValue),
            n || t === e.value || (e.value = t),
            (e.defaultValue = t);
        }
        "" !== (n = e.name) && (e.name = ""),
          (e.defaultChecked = !!e._wrapperState.initialChecked),
          "" !== n && (e.name = n);
      }
      function ee(e, t, n) {
        ("number" === t && q(e.ownerDocument) === e) ||
          (null == n
            ? (e.defaultValue = "" + e._wrapperState.initialValue)
            : e.defaultValue !== "" + n && (e.defaultValue = "" + n));
      }
      var te = Array.isArray;
      function ne(e, t, n, i) {
        if (((e = e.options), t)) {
          t = {};
          for (var r = 0; r < n.length; r++) t["$" + n[r]] = !0;
          for (n = 0; n < e.length; n++)
            (r = t.hasOwnProperty("$" + e[n].value)),
              e[n].selected !== r && (e[n].selected = r),
              r && i && (e[n].defaultSelected = !0);
        } else {
          for (n = "" + W(n), t = null, r = 0; r < e.length; r++) {
            if (e[r].value === n)
              return (
                (e[r].selected = !0), void (i && (e[r].defaultSelected = !0))
              );
            null !== t || e[r].disabled || (t = e[r]);
          }
          null !== t && (t.selected = !0);
        }
      }
      function ie(e, t) {
        if (null != t.dangerouslySetInnerHTML) throw Error(a(91));
        return k({}, t, {
          value: void 0,
          defaultValue: void 0,
          children: "" + e._wrapperState.initialValue,
        });
      }
      function re(e, t) {
        var n = t.value;
        if (null == n) {
          if (((n = t.children), (t = t.defaultValue), null != n)) {
            if (null != t) throw Error(a(92));
            if (te(n)) {
              if (1 < n.length) throw Error(a(93));
              n = n[0];
            }
            t = n;
          }
          null == t && (t = ""), (n = t);
        }
        e._wrapperState = { initialValue: W(n) };
      }
      function ae(e, t) {
        var n = W(t.value),
          i = W(t.defaultValue);
        null != n &&
          ((n = "" + n) !== e.value && (e.value = n),
            null == t.defaultValue &&
            e.defaultValue !== n &&
            (e.defaultValue = n)),
          null != i && (e.defaultValue = "" + i);
      }
      function oe(e) {
        var t = e.textContent;
        t === e._wrapperState.initialValue &&
          "" !== t &&
          null !== t &&
          (e.value = t);
      }
      function se(e) {
        switch (e) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      function le(e, t) {
        return null == e || "http://www.w3.org/1999/xhtml" === e
          ? se(t)
          : "http://www.w3.org/2000/svg" === e && "foreignObject" === t
            ? "http://www.w3.org/1999/xhtml"
            : e;
      }
      var ce,
        ue,
        de =
          ((ue = function (e, t) {
            if (
              "http://www.w3.org/2000/svg" !== e.namespaceURI ||
              "innerHTML" in e
            )
              e.innerHTML = t;
            else {
              for (
                (ce = ce || document.createElement("div")).innerHTML =
                "<svg>" + t.valueOf().toString() + "</svg>",
                t = ce.firstChild;
                e.firstChild;

              )
                e.removeChild(e.firstChild);
              for (; t.firstChild;) e.appendChild(t.firstChild);
            }
          }),
            "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction
              ? function (e, t, n, i) {
                MSApp.execUnsafeLocalFunction(function () {
                  return ue(e, t);
                });
              }
              : ue);
      function he(e, t) {
        if (t) {
          var n = e.firstChild;
          if (n && n === e.lastChild && 3 === n.nodeType)
            return void (n.nodeValue = t);
        }
        e.textContent = t;
      }
      var pe = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0,
      },
        fe = ["Webkit", "ms", "Moz", "O"];
      function me(e, t, n) {
        return null == t || "boolean" === typeof t || "" === t
          ? ""
          : n ||
            "number" !== typeof t ||
            0 === t ||
            (pe.hasOwnProperty(e) && pe[e])
            ? ("" + t).trim()
            : t + "px";
      }
      function ge(e, t) {
        for (var n in ((e = e.style), t))
          if (t.hasOwnProperty(n)) {
            var i = 0 === n.indexOf("--"),
              r = me(n, t[n], i);
            "float" === n && (n = "cssFloat"),
              i ? e.setProperty(n, r) : (e[n] = r);
          }
      }
      Object.keys(pe).forEach(function (e) {
        fe.forEach(function (t) {
          (t = t + e.charAt(0).toUpperCase() + e.substring(1)),
            (pe[t] = pe[e]);
        });
      });
      var ve = k(
        { menuitem: !0 },
        {
          area: !0,
          base: !0,
          br: !0,
          col: !0,
          embed: !0,
          hr: !0,
          img: !0,
          input: !0,
          keygen: !0,
          link: !0,
          meta: !0,
          param: !0,
          source: !0,
          track: !0,
          wbr: !0,
        }
      );
      function _e(e, t) {
        if (t) {
          if (
            ve[e] &&
            (null != t.children || null != t.dangerouslySetInnerHTML)
          )
            throw Error(a(137, e));
          if (null != t.dangerouslySetInnerHTML) {
            if (null != t.children) throw Error(a(60));
            if (
              "object" !== typeof t.dangerouslySetInnerHTML ||
              !("__html" in t.dangerouslySetInnerHTML)
            )
              throw Error(a(61));
          }
          if (null != t.style && "object" !== typeof t.style)
            throw Error(a(62));
        }
      }
      function ye(e, t) {
        if (-1 === e.indexOf("-")) return "string" === typeof t.is;
        switch (e) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var xe = null;
      function be(e) {
        return (
          (e = e.target || e.srcElement || window).correspondingUseElement &&
          (e = e.correspondingUseElement),
          3 === e.nodeType ? e.parentNode : e
        );
      }
      var Se = null,
        Ee = null,
        Me = null;
      function Te(e) {
        if ((e = yr(e))) {
          if ("function" !== typeof Se) throw Error(a(280));
          var t = e.stateNode;
          t && ((t = br(t)), Se(e.stateNode, e.type, t));
        }
      }
      function we(e) {
        Ee ? (Me ? Me.push(e) : (Me = [e])) : (Ee = e);
      }
      function Ae() {
        if (Ee) {
          var e = Ee,
            t = Me;
          if (((Me = Ee = null), Te(e), t))
            for (e = 0; e < t.length; e++) Te(t[e]);
        }
      }
      function Re(e, t) {
        return e(t);
      }
      function Ce() { }
      var Pe = !1;
      function Le(e, t, n) {
        if (Pe) return e(t, n);
        Pe = !0;
        try {
          return Re(e, t, n);
        } finally {
          (Pe = !1), (null !== Ee || null !== Me) && (Ce(), Ae());
        }
      }
      function Ne(e, t) {
        var n = e.stateNode;
        if (null === n) return null;
        var i = br(n);
        if (null === i) return null;
        n = i[t];
        e: switch (t) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (i = !i.disabled) ||
              (i = !(
                "button" === (e = e.type) ||
                "input" === e ||
                "select" === e ||
                "textarea" === e
              )),
              (e = !i);
            break e;
          default:
            e = !1;
        }
        if (e) return null;
        if (n && "function" !== typeof n) throw Error(a(231, t, typeof n));
        return n;
      }
      var De = !1;
      if (u)
        try {
          var Ue = {};
          Object.defineProperty(Ue, "passive", {
            get: function () {
              De = !0;
            },
          }),
            window.addEventListener("test", Ue, Ue),
            window.removeEventListener("test", Ue, Ue);
        } catch (ue) {
          De = !1;
        }
      function Ie(e, t, n, i, r, a, o, s, l) {
        var c = Array.prototype.slice.call(arguments, 3);
        try {
          t.apply(n, c);
        } catch (u) {
          this.onError(u);
        }
      }
      var Oe = !1,
        ke = null,
        Fe = !1,
        ze = null,
        Be = {
          onError: function (e) {
            (Oe = !0), (ke = e);
          },
        };
      function Ve(e, t, n, i, r, a, o, s, l) {
        (Oe = !1), (ke = null), Ie.apply(Be, arguments);
      }
      function He(e) {
        var t = e,
          n = e;
        if (e.alternate) for (; t.return;) t = t.return;
        else {
          e = t;
          do {
            0 !== (4098 & (t = e).flags) && (n = t.return), (e = t.return);
          } while (e);
        }
        return 3 === t.tag ? n : null;
      }
      function Ge(e) {
        if (13 === e.tag) {
          var t = e.memoizedState;
          if (
            (null === t &&
              null !== (e = e.alternate) &&
              (t = e.memoizedState),
              null !== t)
          )
            return t.dehydrated;
        }
        return null;
      }
      function We(e) {
        if (He(e) !== e) throw Error(a(188));
      }
      function je(e) {
        return null !==
          (e = (function (e) {
            var t = e.alternate;
            if (!t) {
              if (null === (t = He(e))) throw Error(a(188));
              return t !== e ? null : e;
            }
            for (var n = e, i = t; ;) {
              var r = n.return;
              if (null === r) break;
              var o = r.alternate;
              if (null === o) {
                if (null !== (i = r.return)) {
                  n = i;
                  continue;
                }
                break;
              }
              if (r.child === o.child) {
                for (o = r.child; o;) {
                  if (o === n) return We(r), e;
                  if (o === i) return We(r), t;
                  o = o.sibling;
                }
                throw Error(a(188));
              }
              if (n.return !== i.return) (n = r), (i = o);
              else {
                for (var s = !1, l = r.child; l;) {
                  if (l === n) {
                    (s = !0), (n = r), (i = o);
                    break;
                  }
                  if (l === i) {
                    (s = !0), (i = r), (n = o);
                    break;
                  }
                  l = l.sibling;
                }
                if (!s) {
                  for (l = o.child; l;) {
                    if (l === n) {
                      (s = !0), (n = o), (i = r);
                      break;
                    }
                    if (l === i) {
                      (s = !0), (i = o), (n = r);
                      break;
                    }
                    l = l.sibling;
                  }
                  if (!s) throw Error(a(189));
                }
              }
              if (n.alternate !== i) throw Error(a(190));
            }
            if (3 !== n.tag) throw Error(a(188));
            return n.stateNode.current === n ? e : t;
          })(e))
          ? Xe(e)
          : null;
      }
      function Xe(e) {
        if (5 === e.tag || 6 === e.tag) return e;
        for (e = e.child; null !== e;) {
          var t = Xe(e);
          if (null !== t) return t;
          e = e.sibling;
        }
        return null;
      }
      var Ye = r.unstable_scheduleCallback,
        qe = r.unstable_cancelCallback,
        Ke = r.unstable_shouldYield,
        Ze = r.unstable_requestPaint,
        Je = r.unstable_now,
        Qe = r.unstable_getCurrentPriorityLevel,
        $e = r.unstable_ImmediatePriority,
        et = r.unstable_UserBlockingPriority,
        tt = r.unstable_NormalPriority,
        nt = r.unstable_LowPriority,
        it = r.unstable_IdlePriority,
        rt = null,
        at = null;
      var ot = Math.clz32
        ? Math.clz32
        : function (e) {
          return (e >>>= 0), 0 === e ? 32 : (31 - ((st(e) / lt) | 0)) | 0;
        },
        st = Math.log,
        lt = Math.LN2;
      var ct = 64,
        ut = 4194304;
      function dt(e) {
        switch (e & -e) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return 4194240 & e;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return 130023424 & e;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 1073741824;
          default:
            return e;
        }
      }
      function ht(e, t) {
        var n = e.pendingLanes;
        if (0 === n) return 0;
        var i = 0,
          r = e.suspendedLanes,
          a = e.pingedLanes,
          o = 268435455 & n;
        if (0 !== o) {
          var s = o & ~r;
          0 !== s ? (i = dt(s)) : 0 !== (a &= o) && (i = dt(a));
        } else 0 !== (o = n & ~r) ? (i = dt(o)) : 0 !== a && (i = dt(a));
        if (0 === i) return 0;
        if (
          0 !== t &&
          t !== i &&
          0 === (t & r) &&
          ((r = i & -i) >= (a = t & -t) || (16 === r && 0 !== (4194240 & a)))
        )
          return t;
        if ((0 !== (4 & i) && (i |= 16 & n), 0 !== (t = e.entangledLanes)))
          for (e = e.entanglements, t &= i; 0 < t;)
            (r = 1 << (n = 31 - ot(t))), (i |= e[n]), (t &= ~r);
        return i;
      }
      function pt(e, t) {
        switch (e) {
          case 1:
          case 2:
          case 4:
            return t + 250;
          case 8:
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return t + 5e3;
          default:
            return -1;
        }
      }
      function ft(e) {
        return 0 !== (e = -1073741825 & e.pendingLanes)
          ? e
          : 1073741824 & e
            ? 1073741824
            : 0;
      }
      function mt() {
        var e = ct;
        return 0 === (4194240 & (ct <<= 1)) && (ct = 64), e;
      }
      function gt(e) {
        for (var t = [], n = 0; 31 > n; n++) t.push(e);
        return t;
      }
      function vt(e, t, n) {
        (e.pendingLanes |= t),
          536870912 !== t && ((e.suspendedLanes = 0), (e.pingedLanes = 0)),
          ((e = e.eventTimes)[(t = 31 - ot(t))] = n);
      }
      function _t(e, t) {
        var n = (e.entangledLanes |= t);
        for (e = e.entanglements; n;) {
          var i = 31 - ot(n),
            r = 1 << i;
          (r & t) | (e[i] & t) && (e[i] |= t), (n &= ~r);
        }
      }
      var yt = 0;
      function xt(e) {
        return 1 < (e &= -e)
          ? 4 < e
            ? 0 !== (268435455 & e)
              ? 16
              : 536870912
            : 4
          : 1;
      }
      var bt,
        St,
        Et,
        Mt,
        Tt,
        wt = !1,
        At = [],
        Rt = null,
        Ct = null,
        Pt = null,
        Lt = new Map(),
        Nt = new Map(),
        Dt = [],
        Ut =
          "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(
            " "
          );
      function It(e, t) {
        switch (e) {
          case "focusin":
          case "focusout":
            Rt = null;
            break;
          case "dragenter":
          case "dragleave":
            Ct = null;
            break;
          case "mouseover":
          case "mouseout":
            Pt = null;
            break;
          case "pointerover":
          case "pointerout":
            Lt.delete(t.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            Nt.delete(t.pointerId);
        }
      }
      function Ot(e, t, n, i, r, a) {
        return null === e || e.nativeEvent !== a
          ? ((e = {
            blockedOn: t,
            domEventName: n,
            eventSystemFlags: i,
            nativeEvent: a,
            targetContainers: [r],
          }),
            null !== t && null !== (t = yr(t)) && St(t),
            e)
          : ((e.eventSystemFlags |= i),
            (t = e.targetContainers),
            null !== r && -1 === t.indexOf(r) && t.push(r),
            e);
      }
      function kt(e) {
        var t = _r(e.target);
        if (null !== t) {
          var n = He(t);
          if (null !== n)
            if (13 === (t = n.tag)) {
              if (null !== (t = Ge(n)))
                return (
                  (e.blockedOn = t),
                  void Tt(e.priority, function () {
                    Et(n);
                  })
                );
            } else if (
              3 === t &&
              n.stateNode.current.memoizedState.isDehydrated
            )
              return void (e.blockedOn =
                3 === n.tag ? n.stateNode.containerInfo : null);
        }
        e.blockedOn = null;
      }
      function Ft(e) {
        if (null !== e.blockedOn) return !1;
        for (var t = e.targetContainers; 0 < t.length;) {
          var n = Kt(e.domEventName, e.eventSystemFlags, t[0], e.nativeEvent);
          if (null !== n)
            return null !== (t = yr(n)) && St(t), (e.blockedOn = n), !1;
          var i = new (n = e.nativeEvent).constructor(n.type, n);
          (xe = i), n.target.dispatchEvent(i), (xe = null), t.shift();
        }
        return !0;
      }
      function zt(e, t, n) {
        Ft(e) && n.delete(t);
      }
      function Bt() {
        (wt = !1),
          null !== Rt && Ft(Rt) && (Rt = null),
          null !== Ct && Ft(Ct) && (Ct = null),
          null !== Pt && Ft(Pt) && (Pt = null),
          Lt.forEach(zt),
          Nt.forEach(zt);
      }
      function Vt(e, t) {
        e.blockedOn === t &&
          ((e.blockedOn = null),
            wt ||
            ((wt = !0),
              r.unstable_scheduleCallback(r.unstable_NormalPriority, Bt)));
      }
      function Ht(e) {
        function t(t) {
          return Vt(t, e);
        }
        if (0 < At.length) {
          Vt(At[0], e);
          for (var n = 1; n < At.length; n++) {
            var i = At[n];
            i.blockedOn === e && (i.blockedOn = null);
          }
        }
        for (
          null !== Rt && Vt(Rt, e),
          null !== Ct && Vt(Ct, e),
          null !== Pt && Vt(Pt, e),
          Lt.forEach(t),
          Nt.forEach(t),
          n = 0;
          n < Dt.length;
          n++
        )
          (i = Dt[n]).blockedOn === e && (i.blockedOn = null);
        for (; 0 < Dt.length && null === (n = Dt[0]).blockedOn;)
          kt(n), null === n.blockedOn && Dt.shift();
      }
      var Gt = x.ReactCurrentBatchConfig,
        Wt = !0;
      function jt(e, t, n, i) {
        var r = yt,
          a = Gt.transition;
        Gt.transition = null;
        try {
          (yt = 1), Yt(e, t, n, i);
        } finally {
          (yt = r), (Gt.transition = a);
        }
      }
      function Xt(e, t, n, i) {
        var r = yt,
          a = Gt.transition;
        Gt.transition = null;
        try {
          (yt = 4), Yt(e, t, n, i);
        } finally {
          (yt = r), (Gt.transition = a);
        }
      }
      function Yt(e, t, n, i) {
        if (Wt) {
          var r = Kt(e, t, n, i);
          if (null === r) Wi(e, t, i, qt, n), It(e, i);
          else if (
            (function (e, t, n, i, r) {
              switch (t) {
                case "focusin":
                  return (Rt = Ot(Rt, e, t, n, i, r)), !0;
                case "dragenter":
                  return (Ct = Ot(Ct, e, t, n, i, r)), !0;
                case "mouseover":
                  return (Pt = Ot(Pt, e, t, n, i, r)), !0;
                case "pointerover":
                  var a = r.pointerId;
                  return Lt.set(a, Ot(Lt.get(a) || null, e, t, n, i, r)), !0;
                case "gotpointercapture":
                  return (
                    (a = r.pointerId),
                    Nt.set(a, Ot(Nt.get(a) || null, e, t, n, i, r)),
                    !0
                  );
              }
              return !1;
            })(r, e, t, n, i)
          )
            i.stopPropagation();
          else if ((It(e, i), 4 & t && -1 < Ut.indexOf(e))) {
            for (; null !== r;) {
              var a = yr(r);
              if (
                (null !== a && bt(a),
                  null === (a = Kt(e, t, n, i)) && Wi(e, t, i, qt, n),
                  a === r)
              )
                break;
              r = a;
            }
            null !== r && i.stopPropagation();
          } else Wi(e, t, i, null, n);
        }
      }
      var qt = null;
      function Kt(e, t, n, i) {
        if (((qt = null), null !== (e = _r((e = be(i))))))
          if (null === (t = He(e))) e = null;
          else if (13 === (n = t.tag)) {
            if (null !== (e = Ge(t))) return e;
            e = null;
          } else if (3 === n) {
            if (t.stateNode.current.memoizedState.isDehydrated)
              return 3 === t.tag ? t.stateNode.containerInfo : null;
            e = null;
          } else t !== e && (e = null);
        return (qt = e), null;
      }
      function Zt(e) {
        switch (e) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return 1;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return 4;
          case "message":
            switch (Qe()) {
              case $e:
                return 1;
              case et:
                return 4;
              case tt:
              case nt:
                return 16;
              case it:
                return 536870912;
              default:
                return 16;
            }
          default:
            return 16;
        }
      }
      var Jt = null,
        Qt = null,
        $t = null;
      function en() {
        if ($t) return $t;
        var e,
          t,
          n = Qt,
          i = n.length,
          r = "value" in Jt ? Jt.value : Jt.textContent,
          a = r.length;
        for (e = 0; e < i && n[e] === r[e]; e++);
        var o = i - e;
        for (t = 1; t <= o && n[i - t] === r[a - t]; t++);
        return ($t = r.slice(e, 1 < t ? 1 - t : void 0));
      }
      function tn(e) {
        var t = e.keyCode;
        return (
          "charCode" in e
            ? 0 === (e = e.charCode) && 13 === t && (e = 13)
            : (e = t),
          10 === e && (e = 13),
          32 <= e || 13 === e ? e : 0
        );
      }
      function nn() {
        return !0;
      }
      function rn() {
        return !1;
      }
      function an(e) {
        function t(t, n, i, r, a) {
          for (var o in ((this._reactName = t),
            (this._targetInst = i),
            (this.type = n),
            (this.nativeEvent = r),
            (this.target = a),
            (this.currentTarget = null),
            e))
            e.hasOwnProperty(o) && ((t = e[o]), (this[o] = t ? t(r) : r[o]));
          return (
            (this.isDefaultPrevented = (
              null != r.defaultPrevented
                ? r.defaultPrevented
                : !1 === r.returnValue
            )
              ? nn
              : rn),
            (this.isPropagationStopped = rn),
            this
          );
        }
        return (
          k(t.prototype, {
            preventDefault: function () {
              this.defaultPrevented = !0;
              var e = this.nativeEvent;
              e &&
                (e.preventDefault
                  ? e.preventDefault()
                  : "unknown" !== typeof e.returnValue &&
                  (e.returnValue = !1),
                  (this.isDefaultPrevented = nn));
            },
            stopPropagation: function () {
              var e = this.nativeEvent;
              e &&
                (e.stopPropagation
                  ? e.stopPropagation()
                  : "unknown" !== typeof e.cancelBubble &&
                  (e.cancelBubble = !0),
                  (this.isPropagationStopped = nn));
            },
            persist: function () { },
            isPersistent: nn,
          }),
          t
        );
      }
      var on,
        sn,
        ln,
        cn = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function (e) {
            return e.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0,
        },
        un = an(cn),
        dn = k({}, cn, { view: 0, detail: 0 }),
        hn = an(dn),
        pn = k({}, dn, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: Tn,
          button: 0,
          buttons: 0,
          relatedTarget: function (e) {
            return void 0 === e.relatedTarget
              ? e.fromElement === e.srcElement
                ? e.toElement
                : e.fromElement
              : e.relatedTarget;
          },
          movementX: function (e) {
            return "movementX" in e
              ? e.movementX
              : (e !== ln &&
                (ln && "mousemove" === e.type
                  ? ((on = e.screenX - ln.screenX),
                    (sn = e.screenY - ln.screenY))
                  : (sn = on = 0),
                  (ln = e)),
                on);
          },
          movementY: function (e) {
            return "movementY" in e ? e.movementY : sn;
          },
        }),
        fn = an(pn),
        mn = an(k({}, pn, { dataTransfer: 0 })),
        gn = an(k({}, dn, { relatedTarget: 0 })),
        vn = an(
          k({}, cn, { animationName: 0, elapsedTime: 0, pseudoElement: 0 })
        ),
        _n = k({}, cn, {
          clipboardData: function (e) {
            return "clipboardData" in e
              ? e.clipboardData
              : window.clipboardData;
          },
        }),
        yn = an(_n),
        xn = an(k({}, cn, { data: 0 })),
        bn = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified",
        },
        Sn = {
          8: "Backspace",
          9: "Tab",
          12: "Clear",
          13: "Enter",
          16: "Shift",
          17: "Control",
          18: "Alt",
          19: "Pause",
          20: "CapsLock",
          27: "Escape",
          32: " ",
          33: "PageUp",
          34: "PageDown",
          35: "End",
          36: "Home",
          37: "ArrowLeft",
          38: "ArrowUp",
          39: "ArrowRight",
          40: "ArrowDown",
          45: "Insert",
          46: "Delete",
          112: "F1",
          113: "F2",
          114: "F3",
          115: "F4",
          116: "F5",
          117: "F6",
          118: "F7",
          119: "F8",
          120: "F9",
          121: "F10",
          122: "F11",
          123: "F12",
          144: "NumLock",
          145: "ScrollLock",
          224: "Meta",
        },
        En = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey",
        };
      function Mn(e) {
        var t = this.nativeEvent;
        return t.getModifierState
          ? t.getModifierState(e)
          : !!(e = En[e]) && !!t[e];
      }
      function Tn() {
        return Mn;
      }
      var wn = k({}, dn, {
        key: function (e) {
          if (e.key) {
            var t = bn[e.key] || e.key;
            if ("Unidentified" !== t) return t;
          }
          return "keypress" === e.type
            ? 13 === (e = tn(e))
              ? "Enter"
              : String.fromCharCode(e)
            : "keydown" === e.type || "keyup" === e.type
              ? Sn[e.keyCode] || "Unidentified"
              : "";
        },
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: Tn,
        charCode: function (e) {
          return "keypress" === e.type ? tn(e) : 0;
        },
        keyCode: function (e) {
          return "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
        },
        which: function (e) {
          return "keypress" === e.type
            ? tn(e)
            : "keydown" === e.type || "keyup" === e.type
              ? e.keyCode
              : 0;
        },
      }),
        An = an(wn),
        Rn = an(
          k({}, pn, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0,
          })
        ),
        Cn = an(
          k({}, dn, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: Tn,
          })
        ),
        Pn = an(
          k({}, cn, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 })
        ),
        Ln = k({}, pn, {
          deltaX: function (e) {
            return "deltaX" in e
              ? e.deltaX
              : "wheelDeltaX" in e
                ? -e.wheelDeltaX
                : 0;
          },
          deltaY: function (e) {
            return "deltaY" in e
              ? e.deltaY
              : "wheelDeltaY" in e
                ? -e.wheelDeltaY
                : "wheelDelta" in e
                  ? -e.wheelDelta
                  : 0;
          },
          deltaZ: 0,
          deltaMode: 0,
        }),
        Nn = an(Ln),
        Dn = [9, 13, 27, 32],
        Un = u && "CompositionEvent" in window,
        In = null;
      u && "documentMode" in document && (In = document.documentMode);
      var On = u && "TextEvent" in window && !In,
        kn = u && (!Un || (In && 8 < In && 11 >= In)),
        Fn = String.fromCharCode(32),
        zn = !1;
      function Bn(e, t) {
        switch (e) {
          case "keyup":
            return -1 !== Dn.indexOf(t.keyCode);
          case "keydown":
            return 229 !== t.keyCode;
          case "keypress":
          case "mousedown":
          case "focusout":
            return !0;
          default:
            return !1;
        }
      }
      function Vn(e) {
        return "object" === typeof (e = e.detail) && "data" in e
          ? e.data
          : null;
      }
      var Hn = !1;
      var Gn = {
        color: !0,
        date: !0,
        datetime: !0,
        "datetime-local": !0,
        email: !0,
        month: !0,
        number: !0,
        password: !0,
        range: !0,
        search: !0,
        tel: !0,
        text: !0,
        time: !0,
        url: !0,
        week: !0,
      };
      function Wn(e) {
        var t = e && e.nodeName && e.nodeName.toLowerCase();
        return "input" === t ? !!Gn[e.type] : "textarea" === t;
      }
      function jn(e, t, n, i) {
        we(i),
          0 < (t = Xi(t, "onChange")).length &&
          ((n = new un("onChange", "change", null, n, i)),
            e.push({ event: n, listeners: t }));
      }
      var Xn = null,
        Yn = null;
      function qn(e) {
        Fi(e, 0);
      }
      function Kn(e) {
        if (Y(xr(e))) return e;
      }
      function Zn(e, t) {
        if ("change" === e) return t;
      }
      var Jn = !1;
      if (u) {
        var Qn;
        if (u) {
          var $n = "oninput" in document;
          if (!$n) {
            var ei = document.createElement("div");
            ei.setAttribute("oninput", "return;"),
              ($n = "function" === typeof ei.oninput);
          }
          Qn = $n;
        } else Qn = !1;
        Jn = Qn && (!document.documentMode || 9 < document.documentMode);
      }
      function ti() {
        Xn && (Xn.detachEvent("onpropertychange", ni), (Yn = Xn = null));
      }
      function ni(e) {
        if ("value" === e.propertyName && Kn(Yn)) {
          var t = [];
          jn(t, Yn, e, be(e)), Le(qn, t);
        }
      }
      function ii(e, t, n) {
        "focusin" === e
          ? (ti(), (Yn = n), (Xn = t).attachEvent("onpropertychange", ni))
          : "focusout" === e && ti();
      }
      function ri(e) {
        if ("selectionchange" === e || "keyup" === e || "keydown" === e)
          return Kn(Yn);
      }
      function ai(e, t) {
        if ("click" === e) return Kn(t);
      }
      function oi(e, t) {
        if ("input" === e || "change" === e) return Kn(t);
      }
      var si =
        "function" === typeof Object.is
          ? Object.is
          : function (e, t) {
            return (
              (e === t && (0 !== e || 1 / e === 1 / t)) ||
              (e !== e && t !== t)
            );
          };
      function li(e, t) {
        if (si(e, t)) return !0;
        if (
          "object" !== typeof e ||
          null === e ||
          "object" !== typeof t ||
          null === t
        )
          return !1;
        var n = Object.keys(e),
          i = Object.keys(t);
        if (n.length !== i.length) return !1;
        for (i = 0; i < n.length; i++) {
          var r = n[i];
          if (!d.call(t, r) || !si(e[r], t[r])) return !1;
        }
        return !0;
      }
      function ci(e) {
        for (; e && e.firstChild;) e = e.firstChild;
        return e;
      }
      function ui(e, t) {
        var n,
          i = ci(e);
        for (e = 0; i;) {
          if (3 === i.nodeType) {
            if (((n = e + i.textContent.length), e <= t && n >= t))
              return { node: i, offset: t - e };
            e = n;
          }
          e: {
            for (; i;) {
              if (i.nextSibling) {
                i = i.nextSibling;
                break e;
              }
              i = i.parentNode;
            }
            i = void 0;
          }
          i = ci(i);
        }
      }
      function di(e, t) {
        return (
          !(!e || !t) &&
          (e === t ||
            ((!e || 3 !== e.nodeType) &&
              (t && 3 === t.nodeType
                ? di(e, t.parentNode)
                : "contains" in e
                  ? e.contains(t)
                  : !!e.compareDocumentPosition &&
                  !!(16 & e.compareDocumentPosition(t)))))
        );
      }
      function hi() {
        for (var e = window, t = q(); t instanceof e.HTMLIFrameElement;) {
          try {
            var n = "string" === typeof t.contentWindow.location.href;
          } catch (i) {
            n = !1;
          }
          if (!n) break;
          t = q((e = t.contentWindow).document);
        }
        return t;
      }
      function pi(e) {
        var t = e && e.nodeName && e.nodeName.toLowerCase();
        return (
          t &&
          (("input" === t &&
            ("text" === e.type ||
              "search" === e.type ||
              "tel" === e.type ||
              "url" === e.type ||
              "password" === e.type)) ||
            "textarea" === t ||
            "true" === e.contentEditable)
        );
      }
      function fi(e) {
        var t = hi(),
          n = e.focusedElem,
          i = e.selectionRange;
        if (
          t !== n &&
          n &&
          n.ownerDocument &&
          di(n.ownerDocument.documentElement, n)
        ) {
          if (null !== i && pi(n))
            if (
              ((t = i.start),
                void 0 === (e = i.end) && (e = t),
                "selectionStart" in n)
            )
              (n.selectionStart = t),
                (n.selectionEnd = Math.min(e, n.value.length));
            else if (
              (e =
                ((t = n.ownerDocument || document) && t.defaultView) ||
                window).getSelection
            ) {
              e = e.getSelection();
              var r = n.textContent.length,
                a = Math.min(i.start, r);
              (i = void 0 === i.end ? a : Math.min(i.end, r)),
                !e.extend && a > i && ((r = i), (i = a), (a = r)),
                (r = ui(n, a));
              var o = ui(n, i);
              r &&
                o &&
                (1 !== e.rangeCount ||
                  e.anchorNode !== r.node ||
                  e.anchorOffset !== r.offset ||
                  e.focusNode !== o.node ||
                  e.focusOffset !== o.offset) &&
                ((t = t.createRange()).setStart(r.node, r.offset),
                  e.removeAllRanges(),
                  a > i
                    ? (e.addRange(t), e.extend(o.node, o.offset))
                    : (t.setEnd(o.node, o.offset), e.addRange(t)));
            }
          for (t = [], e = n; (e = e.parentNode);)
            1 === e.nodeType &&
              t.push({ element: e, left: e.scrollLeft, top: e.scrollTop });
          for (
            "function" === typeof n.focus && n.focus(), n = 0;
            n < t.length;
            n++
          )
            ((e = t[n]).element.scrollLeft = e.left),
              (e.element.scrollTop = e.top);
        }
      }
      var mi = u && "documentMode" in document && 11 >= document.documentMode,
        gi = null,
        vi = null,
        _i = null,
        yi = !1;
      function xi(e, t, n) {
        var i =
          n.window === n
            ? n.document
            : 9 === n.nodeType
              ? n
              : n.ownerDocument;
        yi ||
          null == gi ||
          gi !== q(i) ||
          ("selectionStart" in (i = gi) && pi(i)
            ? (i = { start: i.selectionStart, end: i.selectionEnd })
            : (i = {
              anchorNode: (i = (
                (i.ownerDocument && i.ownerDocument.defaultView) ||
                window
              ).getSelection()).anchorNode,
              anchorOffset: i.anchorOffset,
              focusNode: i.focusNode,
              focusOffset: i.focusOffset,
            }),
            (_i && li(_i, i)) ||
            ((_i = i),
              0 < (i = Xi(vi, "onSelect")).length &&
              ((t = new un("onSelect", "select", null, t, n)),
                e.push({ event: t, listeners: i }),
                (t.target = gi))));
      }
      function bi(e, t) {
        var n = {};
        return (
          (n[e.toLowerCase()] = t.toLowerCase()),
          (n["Webkit" + e] = "webkit" + t),
          (n["Moz" + e] = "moz" + t),
          n
        );
      }
      var Si = {
        animationend: bi("Animation", "AnimationEnd"),
        animationiteration: bi("Animation", "AnimationIteration"),
        animationstart: bi("Animation", "AnimationStart"),
        transitionend: bi("Transition", "TransitionEnd"),
      },
        Ei = {},
        Mi = {};
      function Ti(e) {
        if (Ei[e]) return Ei[e];
        if (!Si[e]) return e;
        var t,
          n = Si[e];
        for (t in n)
          if (n.hasOwnProperty(t) && t in Mi) return (Ei[e] = n[t]);
        return e;
      }
      u &&
        ((Mi = document.createElement("div").style),
          "AnimationEvent" in window ||
          (delete Si.animationend.animation,
            delete Si.animationiteration.animation,
            delete Si.animationstart.animation),
          "TransitionEvent" in window || delete Si.transitionend.transition);
      var wi = Ti("animationend"),
        Ai = Ti("animationiteration"),
        Ri = Ti("animationstart"),
        Ci = Ti("transitionend"),
        Pi = new Map(),
        Li =
          "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
            " "
          );
      function Ni(e, t) {
        Pi.set(e, t), l(t, [e]);
      }
      for (var Di = 0; Di < Li.length; Di++) {
        var Ui = Li[Di];
        Ni(Ui.toLowerCase(), "on" + (Ui[0].toUpperCase() + Ui.slice(1)));
      }
      Ni(wi, "onAnimationEnd"),
        Ni(Ai, "onAnimationIteration"),
        Ni(Ri, "onAnimationStart"),
        Ni("dblclick", "onDoubleClick"),
        Ni("focusin", "onFocus"),
        Ni("focusout", "onBlur"),
        Ni(Ci, "onTransitionEnd"),
        c("onMouseEnter", ["mouseout", "mouseover"]),
        c("onMouseLeave", ["mouseout", "mouseover"]),
        c("onPointerEnter", ["pointerout", "pointerover"]),
        c("onPointerLeave", ["pointerout", "pointerover"]),
        l(
          "onChange",
          "change click focusin focusout input keydown keyup selectionchange".split(
            " "
          )
        ),
        l(
          "onSelect",
          "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
            " "
          )
        ),
        l("onBeforeInput", [
          "compositionend",
          "keypress",
          "textInput",
          "paste",
        ]),
        l(
          "onCompositionEnd",
          "compositionend focusout keydown keypress keyup mousedown".split(
            " "
          )
        ),
        l(
          "onCompositionStart",
          "compositionstart focusout keydown keypress keyup mousedown".split(
            " "
          )
        ),
        l(
          "onCompositionUpdate",
          "compositionupdate focusout keydown keypress keyup mousedown".split(
            " "
          )
        );
      var Ii =
        "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
          " "
        ),
        Oi = new Set(
          "cancel close invalid load scroll toggle".split(" ").concat(Ii)
        );
      function ki(e, t, n) {
        var i = e.type || "unknown-event";
        (e.currentTarget = n),
          (function (e, t, n, i, r, o, s, l, c) {
            if ((Ve.apply(this, arguments), Oe)) {
              if (!Oe) throw Error(a(198));
              var u = ke;
              (Oe = !1), (ke = null), Fe || ((Fe = !0), (ze = u));
            }
          })(i, t, void 0, e),
          (e.currentTarget = null);
      }
      function Fi(e, t) {
        t = 0 !== (4 & t);
        for (var n = 0; n < e.length; n++) {
          var i = e[n],
            r = i.event;
          i = i.listeners;
          e: {
            var a = void 0;
            if (t)
              for (var o = i.length - 1; 0 <= o; o--) {
                var s = i[o],
                  l = s.instance,
                  c = s.currentTarget;
                if (((s = s.listener), l !== a && r.isPropagationStopped()))
                  break e;
                ki(r, s, c), (a = l);
              }
            else
              for (o = 0; o < i.length; o++) {
                if (
                  ((l = (s = i[o]).instance),
                    (c = s.currentTarget),
                    (s = s.listener),
                    l !== a && r.isPropagationStopped())
                )
                  break e;
                ki(r, s, c), (a = l);
              }
          }
        }
        if (Fe) throw ((e = ze), (Fe = !1), (ze = null), e);
      }
      function zi(e, t) {
        var n = t[mr];
        void 0 === n && (n = t[mr] = new Set());
        var i = e + "__bubble";
        n.has(i) || (Gi(t, e, 2, !1), n.add(i));
      }
      function Bi(e, t, n) {
        var i = 0;
        t && (i |= 4), Gi(n, e, i, t);
      }
      var Vi = "_reactListening" + Math.random().toString(36).slice(2);
      function Hi(e) {
        if (!e[Vi]) {
          (e[Vi] = !0),
            o.forEach(function (t) {
              "selectionchange" !== t &&
                (Oi.has(t) || Bi(t, !1, e), Bi(t, !0, e));
            });
          var t = 9 === e.nodeType ? e : e.ownerDocument;
          null === t || t[Vi] || ((t[Vi] = !0), Bi("selectionchange", !1, t));
        }
      }
      function Gi(e, t, n, i) {
        switch (Zt(t)) {
          case 1:
            var r = jt;
            break;
          case 4:
            r = Xt;
            break;
          default:
            r = Yt;
        }
        (n = r.bind(null, t, n, e)),
          (r = void 0),
          !De ||
          ("touchstart" !== t && "touchmove" !== t && "wheel" !== t) ||
          (r = !0),
          i
            ? void 0 !== r
              ? e.addEventListener(t, n, { capture: !0, passive: r })
              : e.addEventListener(t, n, !0)
            : void 0 !== r
              ? e.addEventListener(t, n, { passive: r })
              : e.addEventListener(t, n, !1);
      }
      function Wi(e, t, n, i, r) {
        var a = i;
        if (0 === (1 & t) && 0 === (2 & t) && null !== i)
          e: for (; ;) {
            if (null === i) return;
            var o = i.tag;
            if (3 === o || 4 === o) {
              var s = i.stateNode.containerInfo;
              if (s === r || (8 === s.nodeType && s.parentNode === r)) break;
              if (4 === o)
                for (o = i.return; null !== o;) {
                  var l = o.tag;
                  if (
                    (3 === l || 4 === l) &&
                    ((l = o.stateNode.containerInfo) === r ||
                      (8 === l.nodeType && l.parentNode === r))
                  )
                    return;
                  o = o.return;
                }
              for (; null !== s;) {
                if (null === (o = _r(s))) return;
                if (5 === (l = o.tag) || 6 === l) {
                  i = a = o;
                  continue e;
                }
                s = s.parentNode;
              }
            }
            i = i.return;
          }
        Le(function () {
          var i = a,
            r = be(n),
            o = [];
          e: {
            var s = Pi.get(e);
            if (void 0 !== s) {
              var l = un,
                c = e;
              switch (e) {
                case "keypress":
                  if (0 === tn(n)) break e;
                case "keydown":
                case "keyup":
                  l = An;
                  break;
                case "focusin":
                  (c = "focus"), (l = gn);
                  break;
                case "focusout":
                  (c = "blur"), (l = gn);
                  break;
                case "beforeblur":
                case "afterblur":
                  l = gn;
                  break;
                case "click":
                  if (2 === n.button) break e;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  l = fn;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  l = mn;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  l = Cn;
                  break;
                case wi:
                case Ai:
                case Ri:
                  l = vn;
                  break;
                case Ci:
                  l = Pn;
                  break;
                case "scroll":
                  l = hn;
                  break;
                case "wheel":
                  l = Nn;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  l = yn;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  l = Rn;
              }
              var u = 0 !== (4 & t),
                d = !u && "scroll" === e,
                h = u ? (null !== s ? s + "Capture" : null) : s;
              u = [];
              for (var p, f = i; null !== f;) {
                var m = (p = f).stateNode;
                if (
                  (5 === p.tag &&
                    null !== m &&
                    ((p = m),
                      null !== h &&
                      null != (m = Ne(f, h)) &&
                      u.push(ji(f, m, p))),
                    d)
                )
                  break;
                f = f.return;
              }
              0 < u.length &&
                ((s = new l(s, c, null, n, r)),
                  o.push({ event: s, listeners: u }));
            }
          }
          if (0 === (7 & t)) {
            if (
              ((l = "mouseout" === e || "pointerout" === e),
                (!(s = "mouseover" === e || "pointerover" === e) ||
                  n === xe ||
                  !(c = n.relatedTarget || n.fromElement) ||
                  (!_r(c) && !c[fr])) &&
                (l || s) &&
                ((s =
                  r.window === r
                    ? r
                    : (s = r.ownerDocument)
                      ? s.defaultView || s.parentWindow
                      : window),
                  l
                    ? ((l = i),
                      null !==
                      (c = (c = n.relatedTarget || n.toElement)
                        ? _r(c)
                        : null) &&
                      (c !== (d = He(c)) || (5 !== c.tag && 6 !== c.tag)) &&
                      (c = null))
                    : ((l = null), (c = i)),
                  l !== c))
            ) {
              if (
                ((u = fn),
                  (m = "onMouseLeave"),
                  (h = "onMouseEnter"),
                  (f = "mouse"),
                  ("pointerout" !== e && "pointerover" !== e) ||
                  ((u = Rn),
                    (m = "onPointerLeave"),
                    (h = "onPointerEnter"),
                    (f = "pointer")),
                  (d = null == l ? s : xr(l)),
                  (p = null == c ? s : xr(c)),
                  ((s = new u(m, f + "leave", l, n, r)).target = d),
                  (s.relatedTarget = p),
                  (m = null),
                  _r(r) === i &&
                  (((u = new u(h, f + "enter", c, n, r)).target = p),
                    (u.relatedTarget = d),
                    (m = u)),
                  (d = m),
                  l && c)
              )
                e: {
                  for (h = c, f = 0, p = u = l; p; p = Yi(p)) f++;
                  for (p = 0, m = h; m; m = Yi(m)) p++;
                  for (; 0 < f - p;) (u = Yi(u)), f--;
                  for (; 0 < p - f;) (h = Yi(h)), p--;
                  for (; f--;) {
                    if (u === h || (null !== h && u === h.alternate)) break e;
                    (u = Yi(u)), (h = Yi(h));
                  }
                  u = null;
                }
              else u = null;
              null !== l && qi(o, s, l, u, !1),
                null !== c && null !== d && qi(o, d, c, u, !0);
            }
            if (
              "select" ===
              (l =
                (s = i ? xr(i) : window).nodeName &&
                s.nodeName.toLowerCase()) ||
              ("input" === l && "file" === s.type)
            )
              var g = Zn;
            else if (Wn(s))
              if (Jn) g = oi;
              else {
                g = ri;
                var v = ii;
              }
            else
              (l = s.nodeName) &&
                "input" === l.toLowerCase() &&
                ("checkbox" === s.type || "radio" === s.type) &&
                (g = ai);
            switch (
            (g && (g = g(e, i))
              ? jn(o, g, n, r)
              : (v && v(e, s, i),
                "focusout" === e &&
                (v = s._wrapperState) &&
                v.controlled &&
                "number" === s.type &&
                ee(s, "number", s.value)),
              (v = i ? xr(i) : window),
              e)
            ) {
              case "focusin":
                (Wn(v) || "true" === v.contentEditable) &&
                  ((gi = v), (vi = i), (_i = null));
                break;
              case "focusout":
                _i = vi = gi = null;
                break;
              case "mousedown":
                yi = !0;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                (yi = !1), xi(o, n, r);
                break;
              case "selectionchange":
                if (mi) break;
              case "keydown":
              case "keyup":
                xi(o, n, r);
            }
            var _;
            if (Un)
              e: {
                switch (e) {
                  case "compositionstart":
                    var y = "onCompositionStart";
                    break e;
                  case "compositionend":
                    y = "onCompositionEnd";
                    break e;
                  case "compositionupdate":
                    y = "onCompositionUpdate";
                    break e;
                }
                y = void 0;
              }
            else
              Hn
                ? Bn(e, n) && (y = "onCompositionEnd")
                : "keydown" === e &&
                229 === n.keyCode &&
                (y = "onCompositionStart");
            y &&
              (kn &&
                "ko" !== n.locale &&
                (Hn || "onCompositionStart" !== y
                  ? "onCompositionEnd" === y && Hn && (_ = en())
                  : ((Qt = "value" in (Jt = r) ? Jt.value : Jt.textContent),
                    (Hn = !0))),
                0 < (v = Xi(i, y)).length &&
                ((y = new xn(y, e, null, n, r)),
                  o.push({ event: y, listeners: v }),
                  _ ? (y.data = _) : null !== (_ = Vn(n)) && (y.data = _))),
              (_ = On
                ? (function (e, t) {
                  switch (e) {
                    case "compositionend":
                      return Vn(t);
                    case "keypress":
                      return 32 !== t.which ? null : ((zn = !0), Fn);
                    case "textInput":
                      return (e = t.data) === Fn && zn ? null : e;
                    default:
                      return null;
                  }
                })(e, n)
                : (function (e, t) {
                  if (Hn)
                    return "compositionend" === e || (!Un && Bn(e, t))
                      ? ((e = en()), ($t = Qt = Jt = null), (Hn = !1), e)
                      : null;
                  switch (e) {
                    case "paste":
                    default:
                      return null;
                    case "keypress":
                      if (
                        !(t.ctrlKey || t.altKey || t.metaKey) ||
                        (t.ctrlKey && t.altKey)
                      ) {
                        if (t.char && 1 < t.char.length) return t.char;
                        if (t.which) return String.fromCharCode(t.which);
                      }
                      return null;
                    case "compositionend":
                      return kn && "ko" !== t.locale ? null : t.data;
                  }
                })(e, n)) &&
              0 < (i = Xi(i, "onBeforeInput")).length &&
              ((r = new xn("onBeforeInput", "beforeinput", null, n, r)),
                o.push({ event: r, listeners: i }),
                (r.data = _));
          }
          Fi(o, t);
        });
      }
      function ji(e, t, n) {
        return { instance: e, listener: t, currentTarget: n };
      }
      function Xi(e, t) {
        for (var n = t + "Capture", i = []; null !== e;) {
          var r = e,
            a = r.stateNode;
          5 === r.tag &&
            null !== a &&
            ((r = a),
              null != (a = Ne(e, n)) && i.unshift(ji(e, a, r)),
              null != (a = Ne(e, t)) && i.push(ji(e, a, r))),
            (e = e.return);
        }
        return i;
      }
      function Yi(e) {
        if (null === e) return null;
        do {
          e = e.return;
        } while (e && 5 !== e.tag);
        return e || null;
      }
      function qi(e, t, n, i, r) {
        for (var a = t._reactName, o = []; null !== n && n !== i;) {
          var s = n,
            l = s.alternate,
            c = s.stateNode;
          if (null !== l && l === i) break;
          5 === s.tag &&
            null !== c &&
            ((s = c),
              r
                ? null != (l = Ne(n, a)) && o.unshift(ji(n, l, s))
                : r || (null != (l = Ne(n, a)) && o.push(ji(n, l, s)))),
            (n = n.return);
        }
        0 !== o.length && e.push({ event: t, listeners: o });
      }
      var Ki = /\r\n?/g,
        Zi = /\u0000|\uFFFD/g;
      function Ji(e) {
        return ("string" === typeof e ? e : "" + e)
          .replace(Ki, "\n")
          .replace(Zi, "");
      }
      function Qi(e, t, n) {
        if (((t = Ji(t)), Ji(e) !== t && n)) throw Error(a(425));
      }
      function $i() { }
      var er = null,
        tr = null;
      function nr(e, t) {
        return (
          "textarea" === e ||
          "noscript" === e ||
          "string" === typeof t.children ||
          "number" === typeof t.children ||
          ("object" === typeof t.dangerouslySetInnerHTML &&
            null !== t.dangerouslySetInnerHTML &&
            null != t.dangerouslySetInnerHTML.__html)
        );
      }
      var ir = "function" === typeof setTimeout ? setTimeout : void 0,
        rr = "function" === typeof clearTimeout ? clearTimeout : void 0,
        ar = "function" === typeof Promise ? Promise : void 0,
        or =
          "function" === typeof queueMicrotask
            ? queueMicrotask
            : "undefined" !== typeof ar
              ? function (e) {
                return ar.resolve(null).then(e).catch(sr);
              }
              : ir;
      function sr(e) {
        setTimeout(function () {
          throw e;
        });
      }
      function lr(e, t) {
        var n = t,
          i = 0;
        do {
          var r = n.nextSibling;
          if ((e.removeChild(n), r && 8 === r.nodeType))
            if ("/$" === (n = r.data)) {
              if (0 === i) return e.removeChild(r), void Ht(t);
              i--;
            } else ("$" !== n && "$?" !== n && "$!" !== n) || i++;
          n = r;
        } while (n);
        Ht(t);
      }
      function cr(e) {
        for (; null != e; e = e.nextSibling) {
          var t = e.nodeType;
          if (1 === t || 3 === t) break;
          if (8 === t) {
            if ("$" === (t = e.data) || "$!" === t || "$?" === t) break;
            if ("/$" === t) return null;
          }
        }
        return e;
      }
      function ur(e) {
        e = e.previousSibling;
        for (var t = 0; e;) {
          if (8 === e.nodeType) {
            var n = e.data;
            if ("$" === n || "$!" === n || "$?" === n) {
              if (0 === t) return e;
              t--;
            } else "/$" === n && t++;
          }
          e = e.previousSibling;
        }
        return null;
      }
      var dr = Math.random().toString(36).slice(2),
        hr = "__reactFiber$" + dr,
        pr = "__reactProps$" + dr,
        fr = "__reactContainer$" + dr,
        mr = "__reactEvents$" + dr,
        gr = "__reactListeners$" + dr,
        vr = "__reactHandles$" + dr;
      function _r(e) {
        var t = e[hr];
        if (t) return t;
        for (var n = e.parentNode; n;) {
          if ((t = n[fr] || n[hr])) {
            if (
              ((n = t.alternate),
                null !== t.child || (null !== n && null !== n.child))
            )
              for (e = ur(e); null !== e;) {
                if ((n = e[hr])) return n;
                e = ur(e);
              }
            return t;
          }
          n = (e = n).parentNode;
        }
        return null;
      }
      function yr(e) {
        return !(e = e[hr] || e[fr]) ||
          (5 !== e.tag && 6 !== e.tag && 13 !== e.tag && 3 !== e.tag)
          ? null
          : e;
      }
      function xr(e) {
        if (5 === e.tag || 6 === e.tag) return e.stateNode;
        throw Error(a(33));
      }
      function br(e) {
        return e[pr] || null;
      }
      var Sr = [],
        Er = -1;
      function Mr(e) {
        return { current: e };
      }
      function Tr(e) {
        0 > Er || ((e.current = Sr[Er]), (Sr[Er] = null), Er--);
      }
      function wr(e, t) {
        Er++, (Sr[Er] = e.current), (e.current = t);
      }
      var Ar = {},
        Rr = Mr(Ar),
        Cr = Mr(!1),
        Pr = Ar;
      function Lr(e, t) {
        var n = e.type.contextTypes;
        if (!n) return Ar;
        var i = e.stateNode;
        if (i && i.__reactInternalMemoizedUnmaskedChildContext === t)
          return i.__reactInternalMemoizedMaskedChildContext;
        var r,
          a = {};
        for (r in n) a[r] = t[r];
        return (
          i &&
          (((e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext =
            t),
            (e.__reactInternalMemoizedMaskedChildContext = a)),
          a
        );
      }
      function Nr(e) {
        return null !== (e = e.childContextTypes) && void 0 !== e;
      }
      function Dr() {
        Tr(Cr), Tr(Rr);
      }
      function Ur(e, t, n) {
        if (Rr.current !== Ar) throw Error(a(168));
        wr(Rr, t), wr(Cr, n);
      }
      function Ir(e, t, n) {
        var i = e.stateNode;
        if (
          ((t = t.childContextTypes), "function" !== typeof i.getChildContext)
        )
          return n;
        for (var r in (i = i.getChildContext()))
          if (!(r in t)) throw Error(a(108, G(e) || "Unknown", r));
        return k({}, n, i);
      }
      function Or(e) {
        return (
          (e =
            ((e = e.stateNode) &&
              e.__reactInternalMemoizedMergedChildContext) ||
            Ar),
          (Pr = Rr.current),
          wr(Rr, e),
          wr(Cr, Cr.current),
          !0
        );
      }
      function kr(e, t, n) {
        var i = e.stateNode;
        if (!i) throw Error(a(169));
        n
          ? ((e = Ir(e, t, Pr)),
            (i.__reactInternalMemoizedMergedChildContext = e),
            Tr(Cr),
            Tr(Rr),
            wr(Rr, e))
          : Tr(Cr),
          wr(Cr, n);
      }
      var Fr = null,
        zr = !1,
        Br = !1;
      function Vr(e) {
        null === Fr ? (Fr = [e]) : Fr.push(e);
      }
      function Hr() {
        if (!Br && null !== Fr) {
          Br = !0;
          var e = 0,
            t = yt;
          try {
            var n = Fr;
            for (yt = 1; e < n.length; e++) {
              var i = n[e];
              do {
                i = i(!0);
              } while (null !== i);
            }
            (Fr = null), (zr = !1);
          } catch (r) {
            throw (null !== Fr && (Fr = Fr.slice(e + 1)), Ye($e, Hr), r);
          } finally {
            (yt = t), (Br = !1);
          }
        }
        return null;
      }
      var Gr = [],
        Wr = 0,
        jr = null,
        Xr = 0,
        Yr = [],
        qr = 0,
        Kr = null,
        Zr = 1,
        Jr = "";
      function Qr(e, t) {
        (Gr[Wr++] = Xr), (Gr[Wr++] = jr), (jr = e), (Xr = t);
      }
      function $r(e, t, n) {
        (Yr[qr++] = Zr), (Yr[qr++] = Jr), (Yr[qr++] = Kr), (Kr = e);
        var i = Zr;
        e = Jr;
        var r = 32 - ot(i) - 1;
        (i &= ~(1 << r)), (n += 1);
        var a = 32 - ot(t) + r;
        if (30 < a) {
          var o = r - (r % 5);
          (a = (i & ((1 << o) - 1)).toString(32)),
            (i >>= o),
            (r -= o),
            (Zr = (1 << (32 - ot(t) + r)) | (n << r) | i),
            (Jr = a + e);
        } else (Zr = (1 << a) | (n << r) | i), (Jr = e);
      }
      function ea(e) {
        null !== e.return && (Qr(e, 1), $r(e, 1, 0));
      }
      function ta(e) {
        for (; e === jr;)
          (jr = Gr[--Wr]), (Gr[Wr] = null), (Xr = Gr[--Wr]), (Gr[Wr] = null);
        for (; e === Kr;)
          (Kr = Yr[--qr]),
            (Yr[qr] = null),
            (Jr = Yr[--qr]),
            (Yr[qr] = null),
            (Zr = Yr[--qr]),
            (Yr[qr] = null);
      }
      var na = null,
        ia = null,
        ra = !1,
        aa = null;
      function oa(e, t) {
        var n = Nc(5, null, null, 0);
        (n.elementType = "DELETED"),
          (n.stateNode = t),
          (n.return = e),
          null === (t = e.deletions)
            ? ((e.deletions = [n]), (e.flags |= 16))
            : t.push(n);
      }
      function sa(e, t) {
        switch (e.tag) {
          case 5:
            var n = e.type;
            return (
              null !==
              (t =
                1 !== t.nodeType ||
                  n.toLowerCase() !== t.nodeName.toLowerCase()
                  ? null
                  : t) &&
              ((e.stateNode = t), (na = e), (ia = cr(t.firstChild)), !0)
            );
          case 6:
            return (
              null !==
              (t = "" === e.pendingProps || 3 !== t.nodeType ? null : t) &&
              ((e.stateNode = t), (na = e), (ia = null), !0)
            );
          case 13:
            return (
              null !== (t = 8 !== t.nodeType ? null : t) &&
              ((n = null !== Kr ? { id: Zr, overflow: Jr } : null),
                (e.memoizedState = {
                  dehydrated: t,
                  treeContext: n,
                  retryLane: 1073741824,
                }),
                ((n = Nc(18, null, null, 0)).stateNode = t),
                (n.return = e),
                (e.child = n),
                (na = e),
                (ia = null),
                !0)
            );
          default:
            return !1;
        }
      }
      function la(e) {
        return 0 !== (1 & e.mode) && 0 === (128 & e.flags);
      }
      function ca(e) {
        if (ra) {
          var t = ia;
          if (t) {
            var n = t;
            if (!sa(e, t)) {
              if (la(e)) throw Error(a(418));
              t = cr(n.nextSibling);
              var i = na;
              t && sa(e, t)
                ? oa(i, n)
                : ((e.flags = (-4097 & e.flags) | 2), (ra = !1), (na = e));
            }
          } else {
            if (la(e)) throw Error(a(418));
            (e.flags = (-4097 & e.flags) | 2), (ra = !1), (na = e);
          }
        }
      }
      function ua(e) {
        for (
          e = e.return;
          null !== e && 5 !== e.tag && 3 !== e.tag && 13 !== e.tag;

        )
          e = e.return;
        na = e;
      }
      function da(e) {
        if (e !== na) return !1;
        if (!ra) return ua(e), (ra = !0), !1;
        var t;
        if (
          ((t = 3 !== e.tag) &&
            !(t = 5 !== e.tag) &&
            (t =
              "head" !== (t = e.type) &&
              "body" !== t &&
              !nr(e.type, e.memoizedProps)),
            t && (t = ia))
        ) {
          if (la(e)) throw (ha(), Error(a(418)));
          for (; t;) oa(e, t), (t = cr(t.nextSibling));
        }
        if ((ua(e), 13 === e.tag)) {
          if (!(e = null !== (e = e.memoizedState) ? e.dehydrated : null))
            throw Error(a(317));
          e: {
            for (e = e.nextSibling, t = 0; e;) {
              if (8 === e.nodeType) {
                var n = e.data;
                if ("/$" === n) {
                  if (0 === t) {
                    ia = cr(e.nextSibling);
                    break e;
                  }
                  t--;
                } else ("$" !== n && "$!" !== n && "$?" !== n) || t++;
              }
              e = e.nextSibling;
            }
            ia = null;
          }
        } else ia = na ? cr(e.stateNode.nextSibling) : null;
        return !0;
      }
      function ha() {
        for (var e = ia; e;) e = cr(e.nextSibling);
      }
      function pa() {
        (ia = na = null), (ra = !1);
      }
      function fa(e) {
        null === aa ? (aa = [e]) : aa.push(e);
      }
      var ma = x.ReactCurrentBatchConfig;
      function ga(e, t) {
        if (e && e.defaultProps) {
          for (var n in ((t = k({}, t)), (e = e.defaultProps)))
            void 0 === t[n] && (t[n] = e[n]);
          return t;
        }
        return t;
      }
      var va = Mr(null),
        _a = null,
        ya = null,
        xa = null;
      function ba() {
        xa = ya = _a = null;
      }
      function Sa(e) {
        var t = va.current;
        Tr(va), (e._currentValue = t);
      }
      function Ea(e, t, n) {
        for (; null !== e;) {
          var i = e.alternate;
          if (
            ((e.childLanes & t) !== t
              ? ((e.childLanes |= t), null !== i && (i.childLanes |= t))
              : null !== i && (i.childLanes & t) !== t && (i.childLanes |= t),
              e === n)
          )
            break;
          e = e.return;
        }
      }
      function Ma(e, t) {
        (_a = e),
          (xa = ya = null),
          null !== (e = e.dependencies) &&
          null !== e.firstContext &&
          (0 !== (e.lanes & t) && (xs = !0), (e.firstContext = null));
      }
      function Ta(e) {
        var t = e._currentValue;
        if (xa !== e)
          if (
            ((e = { context: e, memoizedValue: t, next: null }), null === ya)
          ) {
            if (null === _a) throw Error(a(308));
            (ya = e), (_a.dependencies = { lanes: 0, firstContext: e });
          } else ya = ya.next = e;
        return t;
      }
      var wa = null;
      function Aa(e) {
        null === wa ? (wa = [e]) : wa.push(e);
      }
      function Ra(e, t, n, i) {
        var r = t.interleaved;
        return (
          null === r
            ? ((n.next = n), Aa(t))
            : ((n.next = r.next), (r.next = n)),
          (t.interleaved = n),
          Ca(e, i)
        );
      }
      function Ca(e, t) {
        e.lanes |= t;
        var n = e.alternate;
        for (null !== n && (n.lanes |= t), n = e, e = e.return; null !== e;)
          (e.childLanes |= t),
            null !== (n = e.alternate) && (n.childLanes |= t),
            (n = e),
            (e = e.return);
        return 3 === n.tag ? n.stateNode : null;
      }
      var Pa = !1;
      function La(e) {
        e.updateQueue = {
          baseState: e.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: { pending: null, interleaved: null, lanes: 0 },
          effects: null,
        };
      }
      function Na(e, t) {
        (e = e.updateQueue),
          t.updateQueue === e &&
          (t.updateQueue = {
            baseState: e.baseState,
            firstBaseUpdate: e.firstBaseUpdate,
            lastBaseUpdate: e.lastBaseUpdate,
            shared: e.shared,
            effects: e.effects,
          });
      }
      function Da(e, t) {
        return {
          eventTime: e,
          lane: t,
          tag: 0,
          payload: null,
          callback: null,
          next: null,
        };
      }
      function Ua(e, t, n) {
        var i = e.updateQueue;
        if (null === i) return null;
        if (((i = i.shared), 0 !== (2 & Cl))) {
          var r = i.pending;
          return (
            null === r ? (t.next = t) : ((t.next = r.next), (r.next = t)),
            (i.pending = t),
            Ca(e, n)
          );
        }
        return (
          null === (r = i.interleaved)
            ? ((t.next = t), Aa(i))
            : ((t.next = r.next), (r.next = t)),
          (i.interleaved = t),
          Ca(e, n)
        );
      }
      function Ia(e, t, n) {
        if (
          null !== (t = t.updateQueue) &&
          ((t = t.shared), 0 !== (4194240 & n))
        ) {
          var i = t.lanes;
          (n |= i &= e.pendingLanes), (t.lanes = n), _t(e, n);
        }
      }
      function Oa(e, t) {
        var n = e.updateQueue,
          i = e.alternate;
        if (null !== i && n === (i = i.updateQueue)) {
          var r = null,
            a = null;
          if (null !== (n = n.firstBaseUpdate)) {
            do {
              var o = {
                eventTime: n.eventTime,
                lane: n.lane,
                tag: n.tag,
                payload: n.payload,
                callback: n.callback,
                next: null,
              };
              null === a ? (r = a = o) : (a = a.next = o), (n = n.next);
            } while (null !== n);
            null === a ? (r = a = t) : (a = a.next = t);
          } else r = a = t;
          return (
            (n = {
              baseState: i.baseState,
              firstBaseUpdate: r,
              lastBaseUpdate: a,
              shared: i.shared,
              effects: i.effects,
            }),
            void (e.updateQueue = n)
          );
        }
        null === (e = n.lastBaseUpdate)
          ? (n.firstBaseUpdate = t)
          : (e.next = t),
          (n.lastBaseUpdate = t);
      }
      function ka(e, t, n, i) {
        var r = e.updateQueue;
        Pa = !1;
        var a = r.firstBaseUpdate,
          o = r.lastBaseUpdate,
          s = r.shared.pending;
        if (null !== s) {
          r.shared.pending = null;
          var l = s,
            c = l.next;
          (l.next = null), null === o ? (a = c) : (o.next = c), (o = l);
          var u = e.alternate;
          null !== u &&
            (s = (u = u.updateQueue).lastBaseUpdate) !== o &&
            (null === s ? (u.firstBaseUpdate = c) : (s.next = c),
              (u.lastBaseUpdate = l));
        }
        if (null !== a) {
          var d = r.baseState;
          for (o = 0, u = c = l = null, s = a; ;) {
            var h = s.lane,
              p = s.eventTime;
            if ((i & h) === h) {
              null !== u &&
                (u = u.next =
                {
                  eventTime: p,
                  lane: 0,
                  tag: s.tag,
                  payload: s.payload,
                  callback: s.callback,
                  next: null,
                });
              e: {
                var f = e,
                  m = s;
                switch (((h = t), (p = n), m.tag)) {
                  case 1:
                    if ("function" === typeof (f = m.payload)) {
                      d = f.call(p, d, h);
                      break e;
                    }
                    d = f;
                    break e;
                  case 3:
                    f.flags = (-65537 & f.flags) | 128;
                  case 0:
                    if (
                      null ===
                      (h =
                        "function" === typeof (f = m.payload)
                          ? f.call(p, d, h)
                          : f) ||
                      void 0 === h
                    )
                      break e;
                    d = k({}, d, h);
                    break e;
                  case 2:
                    Pa = !0;
                }
              }
              null !== s.callback &&
                0 !== s.lane &&
                ((e.flags |= 64),
                  null === (h = r.effects) ? (r.effects = [s]) : h.push(s));
            } else
              (p = {
                eventTime: p,
                lane: h,
                tag: s.tag,
                payload: s.payload,
                callback: s.callback,
                next: null,
              }),
                null === u ? ((c = u = p), (l = d)) : (u = u.next = p),
                (o |= h);
            if (null === (s = s.next)) {
              if (null === (s = r.shared.pending)) break;
              (s = (h = s).next),
                (h.next = null),
                (r.lastBaseUpdate = h),
                (r.shared.pending = null);
            }
          }
          if (
            (null === u && (l = d),
              (r.baseState = l),
              (r.firstBaseUpdate = c),
              (r.lastBaseUpdate = u),
              null !== (t = r.shared.interleaved))
          ) {
            r = t;
            do {
              (o |= r.lane), (r = r.next);
            } while (r !== t);
          } else null === a && (r.shared.lanes = 0);
          (kl |= o), (e.lanes = o), (e.memoizedState = d);
        }
      }
      function Fa(e, t, n) {
        if (((e = t.effects), (t.effects = null), null !== e))
          for (t = 0; t < e.length; t++) {
            var i = e[t],
              r = i.callback;
            if (null !== r) {
              if (((i.callback = null), (i = n), "function" !== typeof r))
                throw Error(a(191, r));
              r.call(i);
            }
          }
      }
      var za = new i.Component().refs;
      function Ba(e, t, n, i) {
        (n =
          null === (n = n(i, (t = e.memoizedState))) || void 0 === n
            ? t
            : k({}, t, n)),
          (e.memoizedState = n),
          0 === e.lanes && (e.updateQueue.baseState = n);
      }
      var Va = {
        isMounted: function (e) {
          return !!(e = e._reactInternals) && He(e) === e;
        },
        enqueueSetState: function (e, t, n) {
          e = e._reactInternals;
          var i = tc(),
            r = nc(e),
            a = Da(i, r);
          (a.payload = t),
            void 0 !== n && null !== n && (a.callback = n),
            null !== (t = Ua(e, a, r)) && (ic(t, e, r, i), Ia(t, e, r));
        },
        enqueueReplaceState: function (e, t, n) {
          e = e._reactInternals;
          var i = tc(),
            r = nc(e),
            a = Da(i, r);
          (a.tag = 1),
            (a.payload = t),
            void 0 !== n && null !== n && (a.callback = n),
            null !== (t = Ua(e, a, r)) && (ic(t, e, r, i), Ia(t, e, r));
        },
        enqueueForceUpdate: function (e, t) {
          e = e._reactInternals;
          var n = tc(),
            i = nc(e),
            r = Da(n, i);
          (r.tag = 2),
            void 0 !== t && null !== t && (r.callback = t),
            null !== (t = Ua(e, r, i)) && (ic(t, e, i, n), Ia(t, e, i));
        },
      };
      function Ha(e, t, n, i, r, a, o) {
        return "function" === typeof (e = e.stateNode).shouldComponentUpdate
          ? e.shouldComponentUpdate(i, a, o)
          : !t.prototype ||
          !t.prototype.isPureReactComponent ||
          !li(n, i) ||
          !li(r, a);
      }
      function Ga(e, t, n) {
        var i = !1,
          r = Ar,
          a = t.contextType;
        return (
          "object" === typeof a && null !== a
            ? (a = Ta(a))
            : ((r = Nr(t) ? Pr : Rr.current),
              (a = (i = null !== (i = t.contextTypes) && void 0 !== i)
                ? Lr(e, r)
                : Ar)),
          (t = new t(n, a)),
          (e.memoizedState =
            null !== t.state && void 0 !== t.state ? t.state : null),
          (t.updater = Va),
          (e.stateNode = t),
          (t._reactInternals = e),
          i &&
          (((e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext =
            r),
            (e.__reactInternalMemoizedMaskedChildContext = a)),
          t
        );
      }
      function Wa(e, t, n, i) {
        (e = t.state),
          "function" === typeof t.componentWillReceiveProps &&
          t.componentWillReceiveProps(n, i),
          "function" === typeof t.UNSAFE_componentWillReceiveProps &&
          t.UNSAFE_componentWillReceiveProps(n, i),
          t.state !== e && Va.enqueueReplaceState(t, t.state, null);
      }
      function ja(e, t, n, i) {
        var r = e.stateNode;
        (r.props = n), (r.state = e.memoizedState), (r.refs = za), La(e);
        var a = t.contextType;
        "object" === typeof a && null !== a
          ? (r.context = Ta(a))
          : ((a = Nr(t) ? Pr : Rr.current), (r.context = Lr(e, a))),
          (r.state = e.memoizedState),
          "function" === typeof (a = t.getDerivedStateFromProps) &&
          (Ba(e, t, a, n), (r.state = e.memoizedState)),
          "function" === typeof t.getDerivedStateFromProps ||
          "function" === typeof r.getSnapshotBeforeUpdate ||
          ("function" !== typeof r.UNSAFE_componentWillMount &&
            "function" !== typeof r.componentWillMount) ||
          ((t = r.state),
            "function" === typeof r.componentWillMount &&
            r.componentWillMount(),
            "function" === typeof r.UNSAFE_componentWillMount &&
            r.UNSAFE_componentWillMount(),
            t !== r.state && Va.enqueueReplaceState(r, r.state, null),
            ka(e, n, r, i),
            (r.state = e.memoizedState)),
          "function" === typeof r.componentDidMount && (e.flags |= 4194308);
      }
      function Xa(e, t, n) {
        if (
          null !== (e = n.ref) &&
          "function" !== typeof e &&
          "object" !== typeof e
        ) {
          if (n._owner) {
            if ((n = n._owner)) {
              if (1 !== n.tag) throw Error(a(309));
              var i = n.stateNode;
            }
            if (!i) throw Error(a(147, e));
            var r = i,
              o = "" + e;
            return null !== t &&
              null !== t.ref &&
              "function" === typeof t.ref &&
              t.ref._stringRef === o
              ? t.ref
              : ((t = function (e) {
                var t = r.refs;
                t === za && (t = r.refs = {}),
                  null === e ? delete t[o] : (t[o] = e);
              }),
                (t._stringRef = o),
                t);
          }
          if ("string" !== typeof e) throw Error(a(284));
          if (!n._owner) throw Error(a(290, e));
        }
        return e;
      }
      function Ya(e, t) {
        throw (
          ((e = Object.prototype.toString.call(t)),
            Error(
              a(
                31,
                "[object Object]" === e
                  ? "object with keys {" + Object.keys(t).join(", ") + "}"
                  : e
              )
            ))
        );
      }
      function qa(e) {
        return (0, e._init)(e._payload);
      }
      function Ka(e) {
        function t(t, n) {
          if (e) {
            var i = t.deletions;
            null === i ? ((t.deletions = [n]), (t.flags |= 16)) : i.push(n);
          }
        }
        function n(n, i) {
          if (!e) return null;
          for (; null !== i;) t(n, i), (i = i.sibling);
          return null;
        }
        function i(e, t) {
          for (e = new Map(); null !== t;)
            null !== t.key ? e.set(t.key, t) : e.set(t.index, t),
              (t = t.sibling);
          return e;
        }
        function r(e, t) {
          return ((e = Uc(e, t)).index = 0), (e.sibling = null), e;
        }
        function o(t, n, i) {
          return (
            (t.index = i),
            e
              ? null !== (i = t.alternate)
                ? (i = i.index) < n
                  ? ((t.flags |= 2), n)
                  : i
                : ((t.flags |= 2), n)
              : ((t.flags |= 1048576), n)
          );
        }
        function s(t) {
          return e && null === t.alternate && (t.flags |= 2), t;
        }
        function l(e, t, n, i) {
          return null === t || 6 !== t.tag
            ? (((t = Fc(n, e.mode, i)).return = e), t)
            : (((t = r(t, n)).return = e), t);
        }
        function c(e, t, n, i) {
          var a = n.type;
          return a === E
            ? d(e, t, n.props.children, i, n.key)
            : null !== t &&
              (t.elementType === a ||
                ("object" === typeof a &&
                  null !== a &&
                  a.$$typeof === N &&
                  qa(a) === t.type))
              ? (((i = r(t, n.props)).ref = Xa(e, t, n)), (i.return = e), i)
              : (((i = Ic(n.type, n.key, n.props, null, e.mode, i)).ref = Xa(
                e,
                t,
                n
              )),
                (i.return = e),
                i);
        }
        function u(e, t, n, i) {
          return null === t ||
            4 !== t.tag ||
            t.stateNode.containerInfo !== n.containerInfo ||
            t.stateNode.implementation !== n.implementation
            ? (((t = zc(n, e.mode, i)).return = e), t)
            : (((t = r(t, n.children || [])).return = e), t);
        }
        function d(e, t, n, i, a) {
          return null === t || 7 !== t.tag
            ? (((t = Oc(n, e.mode, i, a)).return = e), t)
            : (((t = r(t, n)).return = e), t);
        }
        function h(e, t, n) {
          if (("string" === typeof t && "" !== t) || "number" === typeof t)
            return ((t = Fc("" + t, e.mode, n)).return = e), t;
          if ("object" === typeof t && null !== t) {
            switch (t.$$typeof) {
              case b:
                return (
                  ((n = Ic(t.type, t.key, t.props, null, e.mode, n)).ref = Xa(
                    e,
                    null,
                    t
                  )),
                  (n.return = e),
                  n
                );
              case S:
                return ((t = zc(t, e.mode, n)).return = e), t;
              case N:
                return h(e, (0, t._init)(t._payload), n);
            }
            if (te(t) || I(t))
              return ((t = Oc(t, e.mode, n, null)).return = e), t;
            Ya(e, t);
          }
          return null;
        }
        function p(e, t, n, i) {
          var r = null !== t ? t.key : null;
          if (("string" === typeof n && "" !== n) || "number" === typeof n)
            return null !== r ? null : l(e, t, "" + n, i);
          if ("object" === typeof n && null !== n) {
            switch (n.$$typeof) {
              case b:
                return n.key === r ? c(e, t, n, i) : null;
              case S:
                return n.key === r ? u(e, t, n, i) : null;
              case N:
                return p(e, t, (r = n._init)(n._payload), i);
            }
            if (te(n) || I(n)) return null !== r ? null : d(e, t, n, i, null);
            Ya(e, n);
          }
          return null;
        }
        function f(e, t, n, i, r) {
          if (("string" === typeof i && "" !== i) || "number" === typeof i)
            return l(t, (e = e.get(n) || null), "" + i, r);
          if ("object" === typeof i && null !== i) {
            switch (i.$$typeof) {
              case b:
                return c(
                  t,
                  (e = e.get(null === i.key ? n : i.key) || null),
                  i,
                  r
                );
              case S:
                return u(
                  t,
                  (e = e.get(null === i.key ? n : i.key) || null),
                  i,
                  r
                );
              case N:
                return f(e, t, n, (0, i._init)(i._payload), r);
            }
            if (te(i) || I(i))
              return d(t, (e = e.get(n) || null), i, r, null);
            Ya(t, i);
          }
          return null;
        }
        function m(r, a, s, l) {
          for (
            var c = null, u = null, d = a, m = (a = 0), g = null;
            null !== d && m < s.length;
            m++
          ) {
            d.index > m ? ((g = d), (d = null)) : (g = d.sibling);
            var v = p(r, d, s[m], l);
            if (null === v) {
              null === d && (d = g);
              break;
            }
            e && d && null === v.alternate && t(r, d),
              (a = o(v, a, m)),
              null === u ? (c = v) : (u.sibling = v),
              (u = v),
              (d = g);
          }
          if (m === s.length) return n(r, d), ra && Qr(r, m), c;
          if (null === d) {
            for (; m < s.length; m++)
              null !== (d = h(r, s[m], l)) &&
                ((a = o(d, a, m)),
                  null === u ? (c = d) : (u.sibling = d),
                  (u = d));
            return ra && Qr(r, m), c;
          }
          for (d = i(r, d); m < s.length; m++)
            null !== (g = f(d, r, m, s[m], l)) &&
              (e &&
                null !== g.alternate &&
                d.delete(null === g.key ? m : g.key),
                (a = o(g, a, m)),
                null === u ? (c = g) : (u.sibling = g),
                (u = g));
          return (
            e &&
            d.forEach(function (e) {
              return t(r, e);
            }),
            ra && Qr(r, m),
            c
          );
        }
        function g(r, s, l, c) {
          var u = I(l);
          if ("function" !== typeof u) throw Error(a(150));
          if (null == (l = u.call(l))) throw Error(a(151));
          for (
            var d = (u = null), m = s, g = (s = 0), v = null, _ = l.next();
            null !== m && !_.done;
            g++, _ = l.next()
          ) {
            m.index > g ? ((v = m), (m = null)) : (v = m.sibling);
            var y = p(r, m, _.value, c);
            if (null === y) {
              null === m && (m = v);
              break;
            }
            e && m && null === y.alternate && t(r, m),
              (s = o(y, s, g)),
              null === d ? (u = y) : (d.sibling = y),
              (d = y),
              (m = v);
          }
          if (_.done) return n(r, m), ra && Qr(r, g), u;
          if (null === m) {
            for (; !_.done; g++, _ = l.next())
              null !== (_ = h(r, _.value, c)) &&
                ((s = o(_, s, g)),
                  null === d ? (u = _) : (d.sibling = _),
                  (d = _));
            return ra && Qr(r, g), u;
          }
          for (m = i(r, m); !_.done; g++, _ = l.next())
            null !== (_ = f(m, r, g, _.value, c)) &&
              (e &&
                null !== _.alternate &&
                m.delete(null === _.key ? g : _.key),
                (s = o(_, s, g)),
                null === d ? (u = _) : (d.sibling = _),
                (d = _));
          return (
            e &&
            m.forEach(function (e) {
              return t(r, e);
            }),
            ra && Qr(r, g),
            u
          );
        }
        return function e(i, a, o, l) {
          if (
            ("object" === typeof o &&
              null !== o &&
              o.type === E &&
              null === o.key &&
              (o = o.props.children),
              "object" === typeof o && null !== o)
          ) {
            switch (o.$$typeof) {
              case b:
                e: {
                  for (var c = o.key, u = a; null !== u;) {
                    if (u.key === c) {
                      if ((c = o.type) === E) {
                        if (7 === u.tag) {
                          n(i, u.sibling),
                            ((a = r(u, o.props.children)).return = i),
                            (i = a);
                          break e;
                        }
                      } else if (
                        u.elementType === c ||
                        ("object" === typeof c &&
                          null !== c &&
                          c.$$typeof === N &&
                          qa(c) === u.type)
                      ) {
                        n(i, u.sibling),
                          ((a = r(u, o.props)).ref = Xa(i, u, o)),
                          (a.return = i),
                          (i = a);
                        break e;
                      }
                      n(i, u);
                      break;
                    }
                    t(i, u), (u = u.sibling);
                  }
                  o.type === E
                    ? (((a = Oc(o.props.children, i.mode, l, o.key)).return =
                      i),
                      (i = a))
                    : (((l = Ic(
                      o.type,
                      o.key,
                      o.props,
                      null,
                      i.mode,
                      l
                    )).ref = Xa(i, a, o)),
                      (l.return = i),
                      (i = l));
                }
                return s(i);
              case S:
                e: {
                  for (u = o.key; null !== a;) {
                    if (a.key === u) {
                      if (
                        4 === a.tag &&
                        a.stateNode.containerInfo === o.containerInfo &&
                        a.stateNode.implementation === o.implementation
                      ) {
                        n(i, a.sibling),
                          ((a = r(a, o.children || [])).return = i),
                          (i = a);
                        break e;
                      }
                      n(i, a);
                      break;
                    }
                    t(i, a), (a = a.sibling);
                  }
                  ((a = zc(o, i.mode, l)).return = i), (i = a);
                }
                return s(i);
              case N:
                return e(i, a, (u = o._init)(o._payload), l);
            }
            if (te(o)) return m(i, a, o, l);
            if (I(o)) return g(i, a, o, l);
            Ya(i, o);
          }
          return ("string" === typeof o && "" !== o) || "number" === typeof o
            ? ((o = "" + o),
              null !== a && 6 === a.tag
                ? (n(i, a.sibling), ((a = r(a, o)).return = i), (i = a))
                : (n(i, a), ((a = Fc(o, i.mode, l)).return = i), (i = a)),
              s(i))
            : n(i, a);
        };
      }
      var Za = Ka(!0),
        Ja = Ka(!1),
        Qa = {},
        $a = Mr(Qa),
        eo = Mr(Qa),
        to = Mr(Qa);
      function no(e) {
        if (e === Qa) throw Error(a(174));
        return e;
      }
      function io(e, t) {
        switch ((wr(to, t), wr(eo, e), wr($a, Qa), (e = t.nodeType))) {
          case 9:
          case 11:
            t = (t = t.documentElement) ? t.namespaceURI : le(null, "");
            break;
          default:
            t = le(
              (t = (e = 8 === e ? t.parentNode : t).namespaceURI || null),
              (e = e.tagName)
            );
        }
        Tr($a), wr($a, t);
      }
      function ro() {
        Tr($a), Tr(eo), Tr(to);
      }
      function ao(e) {
        no(to.current);
        var t = no($a.current),
          n = le(t, e.type);
        t !== n && (wr(eo, e), wr($a, n));
      }
      function oo(e) {
        eo.current === e && (Tr($a), Tr(eo));
      }
      var so = Mr(0);
      function lo(e) {
        for (var t = e; null !== t;) {
          if (13 === t.tag) {
            var n = t.memoizedState;
            if (
              null !== n &&
              (null === (n = n.dehydrated) ||
                "$?" === n.data ||
                "$!" === n.data)
            )
              return t;
          } else if (19 === t.tag && void 0 !== t.memoizedProps.revealOrder) {
            if (0 !== (128 & t.flags)) return t;
          } else if (null !== t.child) {
            (t.child.return = t), (t = t.child);
            continue;
          }
          if (t === e) break;
          for (; null === t.sibling;) {
            if (null === t.return || t.return === e) return null;
            t = t.return;
          }
          (t.sibling.return = t.return), (t = t.sibling);
        }
        return null;
      }
      var co = [];
      function uo() {
        for (var e = 0; e < co.length; e++)
          co[e]._workInProgressVersionPrimary = null;
        co.length = 0;
      }
      var ho = x.ReactCurrentDispatcher,
        po = x.ReactCurrentBatchConfig,
        fo = 0,
        mo = null,
        go = null,
        vo = null,
        _o = !1,
        yo = !1,
        xo = 0,
        bo = 0;
      function So() {
        throw Error(a(321));
      }
      function Eo(e, t) {
        if (null === t) return !1;
        for (var n = 0; n < t.length && n < e.length; n++)
          if (!si(e[n], t[n])) return !1;
        return !0;
      }
      function Mo(e, t, n, i, r, o) {
        if (
          ((fo = o),
            (mo = t),
            (t.memoizedState = null),
            (t.updateQueue = null),
            (t.lanes = 0),
            (ho.current = null === e || null === e.memoizedState ? ss : ls),
            (e = n(i, r)),
            yo)
        ) {
          o = 0;
          do {
            if (((yo = !1), (xo = 0), 25 <= o)) throw Error(a(301));
            (o += 1),
              (vo = go = null),
              (t.updateQueue = null),
              (ho.current = cs),
              (e = n(i, r));
          } while (yo);
        }
        if (
          ((ho.current = os),
            (t = null !== go && null !== go.next),
            (fo = 0),
            (vo = go = mo = null),
            (_o = !1),
            t)
        )
          throw Error(a(300));
        return e;
      }
      function To() {
        var e = 0 !== xo;
        return (xo = 0), e;
      }
      function wo() {
        var e = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null,
        };
        return (
          null === vo ? (mo.memoizedState = vo = e) : (vo = vo.next = e), vo
        );
      }
      function Ao() {
        if (null === go) {
          var e = mo.alternate;
          e = null !== e ? e.memoizedState : null;
        } else e = go.next;
        var t = null === vo ? mo.memoizedState : vo.next;
        if (null !== t) (vo = t), (go = e);
        else {
          if (null === e) throw Error(a(310));
          (e = {
            memoizedState: (go = e).memoizedState,
            baseState: go.baseState,
            baseQueue: go.baseQueue,
            queue: go.queue,
            next: null,
          }),
            null === vo ? (mo.memoizedState = vo = e) : (vo = vo.next = e);
        }
        return vo;
      }
      function Ro(e, t) {
        return "function" === typeof t ? t(e) : t;
      }
      function Co(e) {
        var t = Ao(),
          n = t.queue;
        if (null === n) throw Error(a(311));
        n.lastRenderedReducer = e;
        var i = go,
          r = i.baseQueue,
          o = n.pending;
        if (null !== o) {
          if (null !== r) {
            var s = r.next;
            (r.next = o.next), (o.next = s);
          }
          (i.baseQueue = r = o), (n.pending = null);
        }
        if (null !== r) {
          (o = r.next), (i = i.baseState);
          var l = (s = null),
            c = null,
            u = o;
          do {
            var d = u.lane;
            if ((fo & d) === d)
              null !== c &&
                (c = c.next =
                {
                  lane: 0,
                  action: u.action,
                  hasEagerState: u.hasEagerState,
                  eagerState: u.eagerState,
                  next: null,
                }),
                (i = u.hasEagerState ? u.eagerState : e(i, u.action));
            else {
              var h = {
                lane: d,
                action: u.action,
                hasEagerState: u.hasEagerState,
                eagerState: u.eagerState,
                next: null,
              };
              null === c ? ((l = c = h), (s = i)) : (c = c.next = h),
                (mo.lanes |= d),
                (kl |= d);
            }
            u = u.next;
          } while (null !== u && u !== o);
          null === c ? (s = i) : (c.next = l),
            si(i, t.memoizedState) || (xs = !0),
            (t.memoizedState = i),
            (t.baseState = s),
            (t.baseQueue = c),
            (n.lastRenderedState = i);
        }
        if (null !== (e = n.interleaved)) {
          r = e;
          do {
            (o = r.lane), (mo.lanes |= o), (kl |= o), (r = r.next);
          } while (r !== e);
        } else null === r && (n.lanes = 0);
        return [t.memoizedState, n.dispatch];
      }
      function Po(e) {
        var t = Ao(),
          n = t.queue;
        if (null === n) throw Error(a(311));
        n.lastRenderedReducer = e;
        var i = n.dispatch,
          r = n.pending,
          o = t.memoizedState;
        if (null !== r) {
          n.pending = null;
          var s = (r = r.next);
          do {
            (o = e(o, s.action)), (s = s.next);
          } while (s !== r);
          si(o, t.memoizedState) || (xs = !0),
            (t.memoizedState = o),
            null === t.baseQueue && (t.baseState = o),
            (n.lastRenderedState = o);
        }
        return [o, i];
      }
      function Lo() { }
      function No(e, t) {
        var n = mo,
          i = Ao(),
          r = t(),
          o = !si(i.memoizedState, r);
        if (
          (o && ((i.memoizedState = r), (xs = !0)),
            (i = i.queue),
            Wo(Io.bind(null, n, i, e), [e]),
            i.getSnapshot !== t ||
            o ||
            (null !== vo && 1 & vo.memoizedState.tag))
        ) {
          if (
            ((n.flags |= 2048),
              zo(9, Uo.bind(null, n, i, r, t), void 0, null),
              null === Pl)
          )
            throw Error(a(349));
          0 !== (30 & fo) || Do(n, t, r);
        }
        return r;
      }
      function Do(e, t, n) {
        (e.flags |= 16384),
          (e = { getSnapshot: t, value: n }),
          null === (t = mo.updateQueue)
            ? ((t = { lastEffect: null, stores: null }),
              (mo.updateQueue = t),
              (t.stores = [e]))
            : null === (n = t.stores)
              ? (t.stores = [e])
              : n.push(e);
      }
      function Uo(e, t, n, i) {
        (t.value = n), (t.getSnapshot = i), Oo(t) && ko(e);
      }
      function Io(e, t, n) {
        return n(function () {
          Oo(t) && ko(e);
        });
      }
      function Oo(e) {
        var t = e.getSnapshot;
        e = e.value;
        try {
          var n = t();
          return !si(e, n);
        } catch (i) {
          return !0;
        }
      }
      function ko(e) {
        var t = Ca(e, 1);
        null !== t && ic(t, e, 1, -1);
      }
      function Fo(e) {
        var t = wo();
        return (
          "function" === typeof e && (e = e()),
          (t.memoizedState = t.baseState = e),
          (e = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: Ro,
            lastRenderedState: e,
          }),
          (t.queue = e),
          (e = e.dispatch = ns.bind(null, mo, e)),
          [t.memoizedState, e]
        );
      }
      function zo(e, t, n, i) {
        return (
          (e = { tag: e, create: t, destroy: n, deps: i, next: null }),
          null === (t = mo.updateQueue)
            ? ((t = { lastEffect: null, stores: null }),
              (mo.updateQueue = t),
              (t.lastEffect = e.next = e))
            : null === (n = t.lastEffect)
              ? (t.lastEffect = e.next = e)
              : ((i = n.next), (n.next = e), (e.next = i), (t.lastEffect = e)),
          e
        );
      }
      function Bo() {
        return Ao().memoizedState;
      }
      function Vo(e, t, n, i) {
        var r = wo();
        (mo.flags |= e),
          (r.memoizedState = zo(1 | t, n, void 0, void 0 === i ? null : i));
      }
      function Ho(e, t, n, i) {
        var r = Ao();
        i = void 0 === i ? null : i;
        var a = void 0;
        if (null !== go) {
          var o = go.memoizedState;
          if (((a = o.destroy), null !== i && Eo(i, o.deps)))
            return void (r.memoizedState = zo(t, n, a, i));
        }
        (mo.flags |= e), (r.memoizedState = zo(1 | t, n, a, i));
      }
      function Go(e, t) {
        return Vo(8390656, 8, e, t);
      }
      function Wo(e, t) {
        return Ho(2048, 8, e, t);
      }
      function jo(e, t) {
        return Ho(4, 2, e, t);
      }
      function Xo(e, t) {
        return Ho(4, 4, e, t);
      }
      function Yo(e, t) {
        return "function" === typeof t
          ? ((e = e()),
            t(e),
            function () {
              t(null);
            })
          : null !== t && void 0 !== t
            ? ((e = e()),
              (t.current = e),
              function () {
                t.current = null;
              })
            : void 0;
      }
      function qo(e, t, n) {
        return (
          (n = null !== n && void 0 !== n ? n.concat([e]) : null),
          Ho(4, 4, Yo.bind(null, t, e), n)
        );
      }
      function Ko() { }
      function Zo(e, t) {
        var n = Ao();
        t = void 0 === t ? null : t;
        var i = n.memoizedState;
        return null !== i && null !== t && Eo(t, i[1])
          ? i[0]
          : ((n.memoizedState = [e, t]), e);
      }
      function Jo(e, t) {
        var n = Ao();
        t = void 0 === t ? null : t;
        var i = n.memoizedState;
        return null !== i && null !== t && Eo(t, i[1])
          ? i[0]
          : ((e = e()), (n.memoizedState = [e, t]), e);
      }
      function Qo(e, t, n) {
        return 0 === (21 & fo)
          ? (e.baseState && ((e.baseState = !1), (xs = !0)),
            (e.memoizedState = n))
          : (si(n, t) ||
            ((n = mt()), (mo.lanes |= n), (kl |= n), (e.baseState = !0)),
            t);
      }
      function $o(e, t) {
        var n = yt;
        (yt = 0 !== n && 4 > n ? n : 4), e(!0);
        var i = po.transition;
        po.transition = {};
        try {
          e(!1), t();
        } finally {
          (yt = n), (po.transition = i);
        }
      }
      function es() {
        return Ao().memoizedState;
      }
      function ts(e, t, n) {
        var i = nc(e);
        if (
          ((n = {
            lane: i,
            action: n,
            hasEagerState: !1,
            eagerState: null,
            next: null,
          }),
            is(e))
        )
          rs(t, n);
        else if (null !== (n = Ra(e, t, n, i))) {
          ic(n, e, i, tc()), as(n, t, i);
        }
      }
      function ns(e, t, n) {
        var i = nc(e),
          r = {
            lane: i,
            action: n,
            hasEagerState: !1,
            eagerState: null,
            next: null,
          };
        if (is(e)) rs(t, r);
        else {
          var a = e.alternate;
          if (
            0 === e.lanes &&
            (null === a || 0 === a.lanes) &&
            null !== (a = t.lastRenderedReducer)
          )
            try {
              var o = t.lastRenderedState,
                s = a(o, n);
              if (((r.hasEagerState = !0), (r.eagerState = s), si(s, o))) {
                var l = t.interleaved;
                return (
                  null === l
                    ? ((r.next = r), Aa(t))
                    : ((r.next = l.next), (l.next = r)),
                  void (t.interleaved = r)
                );
              }
            } catch (c) { }
          null !== (n = Ra(e, t, r, i)) &&
            (ic(n, e, i, (r = tc())), as(n, t, i));
        }
      }
      function is(e) {
        var t = e.alternate;
        return e === mo || (null !== t && t === mo);
      }
      function rs(e, t) {
        yo = _o = !0;
        var n = e.pending;
        null === n ? (t.next = t) : ((t.next = n.next), (n.next = t)),
          (e.pending = t);
      }
      function as(e, t, n) {
        if (0 !== (4194240 & n)) {
          var i = t.lanes;
          (n |= i &= e.pendingLanes), (t.lanes = n), _t(e, n);
        }
      }
      var os = {
        readContext: Ta,
        useCallback: So,
        useContext: So,
        useEffect: So,
        useImperativeHandle: So,
        useInsertionEffect: So,
        useLayoutEffect: So,
        useMemo: So,
        useReducer: So,
        useRef: So,
        useState: So,
        useDebugValue: So,
        useDeferredValue: So,
        useTransition: So,
        useMutableSource: So,
        useSyncExternalStore: So,
        useId: So,
        unstable_isNewReconciler: !1,
      },
        ss = {
          readContext: Ta,
          useCallback: function (e, t) {
            return (wo().memoizedState = [e, void 0 === t ? null : t]), e;
          },
          useContext: Ta,
          useEffect: Go,
          useImperativeHandle: function (e, t, n) {
            return (
              (n = null !== n && void 0 !== n ? n.concat([e]) : null),
              Vo(4194308, 4, Yo.bind(null, t, e), n)
            );
          },
          useLayoutEffect: function (e, t) {
            return Vo(4194308, 4, e, t);
          },
          useInsertionEffect: function (e, t) {
            return Vo(4, 2, e, t);
          },
          useMemo: function (e, t) {
            var n = wo();
            return (
              (t = void 0 === t ? null : t),
              (e = e()),
              (n.memoizedState = [e, t]),
              e
            );
          },
          useReducer: function (e, t, n) {
            var i = wo();
            return (
              (t = void 0 !== n ? n(t) : t),
              (i.memoizedState = i.baseState = t),
              (e = {
                pending: null,
                interleaved: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: e,
                lastRenderedState: t,
              }),
              (i.queue = e),
              (e = e.dispatch = ts.bind(null, mo, e)),
              [i.memoizedState, e]
            );
          },
          useRef: function (e) {
            return (e = { current: e }), (wo().memoizedState = e);
          },
          useState: Fo,
          useDebugValue: Ko,
          useDeferredValue: function (e) {
            return (wo().memoizedState = e);
          },
          useTransition: function () {
            var e = Fo(!1),
              t = e[0];
            return (
              (e = $o.bind(null, e[1])), (wo().memoizedState = e), [t, e]
            );
          },
          useMutableSource: function () { },
          useSyncExternalStore: function (e, t, n) {
            var i = mo,
              r = wo();
            if (ra) {
              if (void 0 === n) throw Error(a(407));
              n = n();
            } else {
              if (((n = t()), null === Pl)) throw Error(a(349));
              0 !== (30 & fo) || Do(i, t, n);
            }
            r.memoizedState = n;
            var o = { value: n, getSnapshot: t };
            return (
              (r.queue = o),
              Go(Io.bind(null, i, o, e), [e]),
              (i.flags |= 2048),
              zo(9, Uo.bind(null, i, o, n, t), void 0, null),
              n
            );
          },
          useId: function () {
            var e = wo(),
              t = Pl.identifierPrefix;
            if (ra) {
              var n = Jr;
              (t =
                ":" +
                t +
                "R" +
                (n = (Zr & ~(1 << (32 - ot(Zr) - 1))).toString(32) + n)),
                0 < (n = xo++) && (t += "H" + n.toString(32)),
                (t += ":");
            } else t = ":" + t + "r" + (n = bo++).toString(32) + ":";
            return (e.memoizedState = t);
          },
          unstable_isNewReconciler: !1,
        },
        ls = {
          readContext: Ta,
          useCallback: Zo,
          useContext: Ta,
          useEffect: Wo,
          useImperativeHandle: qo,
          useInsertionEffect: jo,
          useLayoutEffect: Xo,
          useMemo: Jo,
          useReducer: Co,
          useRef: Bo,
          useState: function () {
            return Co(Ro);
          },
          useDebugValue: Ko,
          useDeferredValue: function (e) {
            return Qo(Ao(), go.memoizedState, e);
          },
          useTransition: function () {
            return [Co(Ro)[0], Ao().memoizedState];
          },
          useMutableSource: Lo,
          useSyncExternalStore: No,
          useId: es,
          unstable_isNewReconciler: !1,
        },
        cs = {
          readContext: Ta,
          useCallback: Zo,
          useContext: Ta,
          useEffect: Wo,
          useImperativeHandle: qo,
          useInsertionEffect: jo,
          useLayoutEffect: Xo,
          useMemo: Jo,
          useReducer: Po,
          useRef: Bo,
          useState: function () {
            return Po(Ro);
          },
          useDebugValue: Ko,
          useDeferredValue: function (e) {
            var t = Ao();
            return null === go
              ? (t.memoizedState = e)
              : Qo(t, go.memoizedState, e);
          },
          useTransition: function () {
            return [Po(Ro)[0], Ao().memoizedState];
          },
          useMutableSource: Lo,
          useSyncExternalStore: No,
          useId: es,
          unstable_isNewReconciler: !1,
        };
      function us(e, t) {
        try {
          var n = "",
            i = t;
          do {
            (n += V(i)), (i = i.return);
          } while (i);
          var r = n;
        } catch (a) {
          r = "\nError generating stack: " + a.message + "\n" + a.stack;
        }
        return { value: e, source: t, stack: r, digest: null };
      }
      function ds(e, t, n) {
        return {
          value: e,
          source: null,
          stack: null != n ? n : null,
          digest: null != t ? t : null,
        };
      }
      function hs(e, t) {
        try {
          console.error(t.value);
        } catch (n) {
          setTimeout(function () {
            throw n;
          });
        }
      }
      var ps = "function" === typeof WeakMap ? WeakMap : Map;
      function fs(e, t, n) {
        ((n = Da(-1, n)).tag = 3), (n.payload = { element: null });
        var i = t.value;
        return (
          (n.callback = function () {
            jl || ((jl = !0), (Xl = i)), hs(0, t);
          }),
          n
        );
      }
      function ms(e, t, n) {
        (n = Da(-1, n)).tag = 3;
        var i = e.type.getDerivedStateFromError;
        if ("function" === typeof i) {
          var r = t.value;
          (n.payload = function () {
            return i(r);
          }),
            (n.callback = function () {
              hs(0, t);
            });
        }
        var a = e.stateNode;
        return (
          null !== a &&
          "function" === typeof a.componentDidCatch &&
          (n.callback = function () {
            hs(0, t),
              "function" !== typeof i &&
              (null === Yl ? (Yl = new Set([this])) : Yl.add(this));
            var e = t.stack;
            this.componentDidCatch(t.value, {
              componentStack: null !== e ? e : "",
            });
          }),
          n
        );
      }
      function gs(e, t, n) {
        var i = e.pingCache;
        if (null === i) {
          i = e.pingCache = new ps();
          var r = new Set();
          i.set(t, r);
        } else void 0 === (r = i.get(t)) && ((r = new Set()), i.set(t, r));
        r.has(n) || (r.add(n), (e = wc.bind(null, e, t, n)), t.then(e, e));
      }
      function vs(e) {
        do {
          var t;
          if (
            ((t = 13 === e.tag) &&
              (t = null === (t = e.memoizedState) || null !== t.dehydrated),
              t)
          )
            return e;
          e = e.return;
        } while (null !== e);
        return null;
      }
      function _s(e, t, n, i, r) {
        return 0 === (1 & e.mode)
          ? (e === t
            ? (e.flags |= 65536)
            : ((e.flags |= 128),
              (n.flags |= 131072),
              (n.flags &= -52805),
              1 === n.tag &&
              (null === n.alternate
                ? (n.tag = 17)
                : (((t = Da(-1, 1)).tag = 2), Ua(n, t, 1))),
              (n.lanes |= 1)),
            e)
          : ((e.flags |= 65536), (e.lanes = r), e);
      }
      var ys = x.ReactCurrentOwner,
        xs = !1;
      function bs(e, t, n, i) {
        t.child = null === e ? Ja(t, null, n, i) : Za(t, e.child, n, i);
      }
      function Ss(e, t, n, i, r) {
        n = n.render;
        var a = t.ref;
        return (
          Ma(t, r),
          (i = Mo(e, t, n, i, a, r)),
          (n = To()),
          null === e || xs
            ? (ra && n && ea(t), (t.flags |= 1), bs(e, t, i, r), t.child)
            : ((t.updateQueue = e.updateQueue),
              (t.flags &= -2053),
              (e.lanes &= ~r),
              js(e, t, r))
        );
      }
      function Es(e, t, n, i, r) {
        if (null === e) {
          var a = n.type;
          return "function" !== typeof a ||
            Dc(a) ||
            void 0 !== a.defaultProps ||
            null !== n.compare ||
            void 0 !== n.defaultProps
            ? (((e = Ic(n.type, null, i, t, t.mode, r)).ref = t.ref),
              (e.return = t),
              (t.child = e))
            : ((t.tag = 15), (t.type = a), Ms(e, t, a, i, r));
        }
        if (((a = e.child), 0 === (e.lanes & r))) {
          var o = a.memoizedProps;
          if (
            (n = null !== (n = n.compare) ? n : li)(o, i) &&
            e.ref === t.ref
          )
            return js(e, t, r);
        }
        return (
          (t.flags |= 1),
          ((e = Uc(a, i)).ref = t.ref),
          (e.return = t),
          (t.child = e)
        );
      }
      function Ms(e, t, n, i, r) {
        if (null !== e) {
          var a = e.memoizedProps;
          if (li(a, i) && e.ref === t.ref) {
            if (((xs = !1), (t.pendingProps = i = a), 0 === (e.lanes & r)))
              return (t.lanes = e.lanes), js(e, t, r);
            0 !== (131072 & e.flags) && (xs = !0);
          }
        }
        return As(e, t, n, i, r);
      }
      function Ts(e, t, n) {
        var i = t.pendingProps,
          r = i.children,
          a = null !== e ? e.memoizedState : null;
        if ("hidden" === i.mode)
          if (0 === (1 & t.mode))
            (t.memoizedState = {
              baseLanes: 0,
              cachePool: null,
              transitions: null,
            }),
              wr(Ul, Dl),
              (Dl |= n);
          else {
            if (0 === (1073741824 & n))
              return (
                (e = null !== a ? a.baseLanes | n : n),
                (t.lanes = t.childLanes = 1073741824),
                (t.memoizedState = {
                  baseLanes: e,
                  cachePool: null,
                  transitions: null,
                }),
                (t.updateQueue = null),
                wr(Ul, Dl),
                (Dl |= e),
                null
              );
            (t.memoizedState = {
              baseLanes: 0,
              cachePool: null,
              transitions: null,
            }),
              (i = null !== a ? a.baseLanes : n),
              wr(Ul, Dl),
              (Dl |= i);
          }
        else
          null !== a
            ? ((i = a.baseLanes | n), (t.memoizedState = null))
            : (i = n),
            wr(Ul, Dl),
            (Dl |= i);
        return bs(e, t, r, n), t.child;
      }
      function ws(e, t) {
        var n = t.ref;
        ((null === e && null !== n) || (null !== e && e.ref !== n)) &&
          ((t.flags |= 512), (t.flags |= 2097152));
      }
      function As(e, t, n, i, r) {
        var a = Nr(n) ? Pr : Rr.current;
        return (
          (a = Lr(t, a)),
          Ma(t, r),
          (n = Mo(e, t, n, i, a, r)),
          (i = To()),
          null === e || xs
            ? (ra && i && ea(t), (t.flags |= 1), bs(e, t, n, r), t.child)
            : ((t.updateQueue = e.updateQueue),
              (t.flags &= -2053),
              (e.lanes &= ~r),
              js(e, t, r))
        );
      }
      function Rs(e, t, n, i, r) {
        if (Nr(n)) {
          var a = !0;
          Or(t);
        } else a = !1;
        if ((Ma(t, r), null === t.stateNode))
          Ws(e, t), Ga(t, n, i), ja(t, n, i, r), (i = !0);
        else if (null === e) {
          var o = t.stateNode,
            s = t.memoizedProps;
          o.props = s;
          var l = o.context,
            c = n.contextType;
          "object" === typeof c && null !== c
            ? (c = Ta(c))
            : (c = Lr(t, (c = Nr(n) ? Pr : Rr.current)));
          var u = n.getDerivedStateFromProps,
            d =
              "function" === typeof u ||
              "function" === typeof o.getSnapshotBeforeUpdate;
          d ||
            ("function" !== typeof o.UNSAFE_componentWillReceiveProps &&
              "function" !== typeof o.componentWillReceiveProps) ||
            ((s !== i || l !== c) && Wa(t, o, i, c)),
            (Pa = !1);
          var h = t.memoizedState;
          (o.state = h),
            ka(t, i, o, r),
            (l = t.memoizedState),
            s !== i || h !== l || Cr.current || Pa
              ? ("function" === typeof u &&
                (Ba(t, n, u, i), (l = t.memoizedState)),
                (s = Pa || Ha(t, n, s, i, h, l, c))
                  ? (d ||
                    ("function" !== typeof o.UNSAFE_componentWillMount &&
                      "function" !== typeof o.componentWillMount) ||
                    ("function" === typeof o.componentWillMount &&
                      o.componentWillMount(),
                      "function" === typeof o.UNSAFE_componentWillMount &&
                      o.UNSAFE_componentWillMount()),
                    "function" === typeof o.componentDidMount &&
                    (t.flags |= 4194308))
                  : ("function" === typeof o.componentDidMount &&
                    (t.flags |= 4194308),
                    (t.memoizedProps = i),
                    (t.memoizedState = l)),
                (o.props = i),
                (o.state = l),
                (o.context = c),
                (i = s))
              : ("function" === typeof o.componentDidMount &&
                (t.flags |= 4194308),
                (i = !1));
        } else {
          (o = t.stateNode),
            Na(e, t),
            (s = t.memoizedProps),
            (c = t.type === t.elementType ? s : ga(t.type, s)),
            (o.props = c),
            (d = t.pendingProps),
            (h = o.context),
            "object" === typeof (l = n.contextType) && null !== l
              ? (l = Ta(l))
              : (l = Lr(t, (l = Nr(n) ? Pr : Rr.current)));
          var p = n.getDerivedStateFromProps;
          (u =
            "function" === typeof p ||
            "function" === typeof o.getSnapshotBeforeUpdate) ||
            ("function" !== typeof o.UNSAFE_componentWillReceiveProps &&
              "function" !== typeof o.componentWillReceiveProps) ||
            ((s !== d || h !== l) && Wa(t, o, i, l)),
            (Pa = !1),
            (h = t.memoizedState),
            (o.state = h),
            ka(t, i, o, r);
          var f = t.memoizedState;
          s !== d || h !== f || Cr.current || Pa
            ? ("function" === typeof p &&
              (Ba(t, n, p, i), (f = t.memoizedState)),
              (c = Pa || Ha(t, n, c, i, h, f, l) || !1)
                ? (u ||
                  ("function" !== typeof o.UNSAFE_componentWillUpdate &&
                    "function" !== typeof o.componentWillUpdate) ||
                  ("function" === typeof o.componentWillUpdate &&
                    o.componentWillUpdate(i, f, l),
                    "function" === typeof o.UNSAFE_componentWillUpdate &&
                    o.UNSAFE_componentWillUpdate(i, f, l)),
                  "function" === typeof o.componentDidUpdate &&
                  (t.flags |= 4),
                  "function" === typeof o.getSnapshotBeforeUpdate &&
                  (t.flags |= 1024))
                : ("function" !== typeof o.componentDidUpdate ||
                  (s === e.memoizedProps && h === e.memoizedState) ||
                  (t.flags |= 4),
                  "function" !== typeof o.getSnapshotBeforeUpdate ||
                  (s === e.memoizedProps && h === e.memoizedState) ||
                  (t.flags |= 1024),
                  (t.memoizedProps = i),
                  (t.memoizedState = f)),
              (o.props = i),
              (o.state = f),
              (o.context = l),
              (i = c))
            : ("function" !== typeof o.componentDidUpdate ||
              (s === e.memoizedProps && h === e.memoizedState) ||
              (t.flags |= 4),
              "function" !== typeof o.getSnapshotBeforeUpdate ||
              (s === e.memoizedProps && h === e.memoizedState) ||
              (t.flags |= 1024),
              (i = !1));
        }
        return Cs(e, t, n, i, a, r);
      }
      function Cs(e, t, n, i, r, a) {
        ws(e, t);
        var o = 0 !== (128 & t.flags);
        if (!i && !o) return r && kr(t, n, !1), js(e, t, a);
        (i = t.stateNode), (ys.current = t);
        var s =
          o && "function" !== typeof n.getDerivedStateFromError
            ? null
            : i.render();
        return (
          (t.flags |= 1),
          null !== e && o
            ? ((t.child = Za(t, e.child, null, a)),
              (t.child = Za(t, null, s, a)))
            : bs(e, t, s, a),
          (t.memoizedState = i.state),
          r && kr(t, n, !0),
          t.child
        );
      }
      function Ps(e) {
        var t = e.stateNode;
        t.pendingContext
          ? Ur(0, t.pendingContext, t.pendingContext !== t.context)
          : t.context && Ur(0, t.context, !1),
          io(e, t.containerInfo);
      }
      function Ls(e, t, n, i, r) {
        return pa(), fa(r), (t.flags |= 256), bs(e, t, n, i), t.child;
      }
      var Ns,
        Ds,
        Us,
        Is,
        Os = { dehydrated: null, treeContext: null, retryLane: 0 };
      function ks(e) {
        return { baseLanes: e, cachePool: null, transitions: null };
      }
      function Fs(e, t, n) {
        var i,
          r = t.pendingProps,
          o = so.current,
          s = !1,
          l = 0 !== (128 & t.flags);
        if (
          ((i = l) ||
            (i = (null === e || null !== e.memoizedState) && 0 !== (2 & o)),
            i
              ? ((s = !0), (t.flags &= -129))
              : (null !== e && null === e.memoizedState) || (o |= 1),
            wr(so, 1 & o),
            null === e)
        )
          return (
            ca(t),
            null !== (e = t.memoizedState) && null !== (e = e.dehydrated)
              ? (0 === (1 & t.mode)
                ? (t.lanes = 1)
                : "$!" === e.data
                  ? (t.lanes = 8)
                  : (t.lanes = 1073741824),
                null)
              : ((l = r.children),
                (e = r.fallback),
                s
                  ? ((r = t.mode),
                    (s = t.child),
                    (l = { mode: "hidden", children: l }),
                    0 === (1 & r) && null !== s
                      ? ((s.childLanes = 0), (s.pendingProps = l))
                      : (s = kc(l, r, 0, null)),
                    (e = Oc(e, r, n, null)),
                    (s.return = t),
                    (e.return = t),
                    (s.sibling = e),
                    (t.child = s),
                    (t.child.memoizedState = ks(n)),
                    (t.memoizedState = Os),
                    e)
                  : zs(t, l))
          );
        if (null !== (o = e.memoizedState) && null !== (i = o.dehydrated))
          return (function (e, t, n, i, r, o, s) {
            if (n)
              return 256 & t.flags
                ? ((t.flags &= -257), Bs(e, t, s, (i = ds(Error(a(422))))))
                : null !== t.memoizedState
                  ? ((t.child = e.child), (t.flags |= 128), null)
                  : ((o = i.fallback),
                    (r = t.mode),
                    (i = kc(
                      { mode: "visible", children: i.children },
                      r,
                      0,
                      null
                    )),
                    ((o = Oc(o, r, s, null)).flags |= 2),
                    (i.return = t),
                    (o.return = t),
                    (i.sibling = o),
                    (t.child = i),
                    0 !== (1 & t.mode) && Za(t, e.child, null, s),
                    (t.child.memoizedState = ks(s)),
                    (t.memoizedState = Os),
                    o);
            if (0 === (1 & t.mode)) return Bs(e, t, s, null);
            if ("$!" === r.data) {
              if ((i = r.nextSibling && r.nextSibling.dataset))
                var l = i.dgst;
              return (
                (i = l), Bs(e, t, s, (i = ds((o = Error(a(419))), i, void 0)))
              );
            }
            if (((l = 0 !== (s & e.childLanes)), xs || l)) {
              if (null !== (i = Pl)) {
                switch (s & -s) {
                  case 4:
                    r = 2;
                    break;
                  case 16:
                    r = 8;
                    break;
                  case 64:
                  case 128:
                  case 256:
                  case 512:
                  case 1024:
                  case 2048:
                  case 4096:
                  case 8192:
                  case 16384:
                  case 32768:
                  case 65536:
                  case 131072:
                  case 262144:
                  case 524288:
                  case 1048576:
                  case 2097152:
                  case 4194304:
                  case 8388608:
                  case 16777216:
                  case 33554432:
                  case 67108864:
                    r = 32;
                    break;
                  case 536870912:
                    r = 268435456;
                    break;
                  default:
                    r = 0;
                }
                0 !== (r = 0 !== (r & (i.suspendedLanes | s)) ? 0 : r) &&
                  r !== o.retryLane &&
                  ((o.retryLane = r), Ca(e, r), ic(i, e, r, -1));
              }
              return gc(), Bs(e, t, s, (i = ds(Error(a(421)))));
            }
            return "$?" === r.data
              ? ((t.flags |= 128),
                (t.child = e.child),
                (t = Rc.bind(null, e)),
                (r._reactRetry = t),
                null)
              : ((e = o.treeContext),
                (ia = cr(r.nextSibling)),
                (na = t),
                (ra = !0),
                (aa = null),
                null !== e &&
                ((Yr[qr++] = Zr),
                  (Yr[qr++] = Jr),
                  (Yr[qr++] = Kr),
                  (Zr = e.id),
                  (Jr = e.overflow),
                  (Kr = t)),
                (t = zs(t, i.children)),
                (t.flags |= 4096),
                t);
          })(e, t, l, r, i, o, n);
        if (s) {
          (s = r.fallback), (l = t.mode), (i = (o = e.child).sibling);
          var c = { mode: "hidden", children: r.children };
          return (
            0 === (1 & l) && t.child !== o
              ? (((r = t.child).childLanes = 0),
                (r.pendingProps = c),
                (t.deletions = null))
              : ((r = Uc(o, c)).subtreeFlags = 14680064 & o.subtreeFlags),
            null !== i
              ? (s = Uc(i, s))
              : ((s = Oc(s, l, n, null)).flags |= 2),
            (s.return = t),
            (r.return = t),
            (r.sibling = s),
            (t.child = r),
            (r = s),
            (s = t.child),
            (l =
              null === (l = e.child.memoizedState)
                ? ks(n)
                : {
                  baseLanes: l.baseLanes | n,
                  cachePool: null,
                  transitions: l.transitions,
                }),
            (s.memoizedState = l),
            (s.childLanes = e.childLanes & ~n),
            (t.memoizedState = Os),
            r
          );
        }
        return (
          (e = (s = e.child).sibling),
          (r = Uc(s, { mode: "visible", children: r.children })),
          0 === (1 & t.mode) && (r.lanes = n),
          (r.return = t),
          (r.sibling = null),
          null !== e &&
          (null === (n = t.deletions)
            ? ((t.deletions = [e]), (t.flags |= 16))
            : n.push(e)),
          (t.child = r),
          (t.memoizedState = null),
          r
        );
      }
      function zs(e, t) {
        return (
          ((t = kc(
            { mode: "visible", children: t },
            e.mode,
            0,
            null
          )).return = e),
          (e.child = t)
        );
      }
      function Bs(e, t, n, i) {
        return (
          null !== i && fa(i),
          Za(t, e.child, null, n),
          ((e = zs(t, t.pendingProps.children)).flags |= 2),
          (t.memoizedState = null),
          e
        );
      }
      function Vs(e, t, n) {
        e.lanes |= t;
        var i = e.alternate;
        null !== i && (i.lanes |= t), Ea(e.return, t, n);
      }
      function Hs(e, t, n, i, r) {
        var a = e.memoizedState;
        null === a
          ? (e.memoizedState = {
            isBackwards: t,
            rendering: null,
            renderingStartTime: 0,
            last: i,
            tail: n,
            tailMode: r,
          })
          : ((a.isBackwards = t),
            (a.rendering = null),
            (a.renderingStartTime = 0),
            (a.last = i),
            (a.tail = n),
            (a.tailMode = r));
      }
      function Gs(e, t, n) {
        var i = t.pendingProps,
          r = i.revealOrder,
          a = i.tail;
        if ((bs(e, t, i.children, n), 0 !== (2 & (i = so.current))))
          (i = (1 & i) | 2), (t.flags |= 128);
        else {
          if (null !== e && 0 !== (128 & e.flags))
            e: for (e = t.child; null !== e;) {
              if (13 === e.tag) null !== e.memoizedState && Vs(e, n, t);
              else if (19 === e.tag) Vs(e, n, t);
              else if (null !== e.child) {
                (e.child.return = e), (e = e.child);
                continue;
              }
              if (e === t) break e;
              for (; null === e.sibling;) {
                if (null === e.return || e.return === t) break e;
                e = e.return;
              }
              (e.sibling.return = e.return), (e = e.sibling);
            }
          i &= 1;
        }
        if ((wr(so, i), 0 === (1 & t.mode))) t.memoizedState = null;
        else
          switch (r) {
            case "forwards":
              for (n = t.child, r = null; null !== n;)
                null !== (e = n.alternate) && null === lo(e) && (r = n),
                  (n = n.sibling);
              null === (n = r)
                ? ((r = t.child), (t.child = null))
                : ((r = n.sibling), (n.sibling = null)),
                Hs(t, !1, r, n, a);
              break;
            case "backwards":
              for (n = null, r = t.child, t.child = null; null !== r;) {
                if (null !== (e = r.alternate) && null === lo(e)) {
                  t.child = r;
                  break;
                }
                (e = r.sibling), (r.sibling = n), (n = r), (r = e);
              }
              Hs(t, !0, n, null, a);
              break;
            case "together":
              Hs(t, !1, null, null, void 0);
              break;
            default:
              t.memoizedState = null;
          }
        return t.child;
      }
      function Ws(e, t) {
        0 === (1 & t.mode) &&
          null !== e &&
          ((e.alternate = null), (t.alternate = null), (t.flags |= 2));
      }
      function js(e, t, n) {
        if (
          (null !== e && (t.dependencies = e.dependencies),
            (kl |= t.lanes),
            0 === (n & t.childLanes))
        )
          return null;
        if (null !== e && t.child !== e.child) throw Error(a(153));
        if (null !== t.child) {
          for (
            n = Uc((e = t.child), e.pendingProps), t.child = n, n.return = t;
            null !== e.sibling;

          )
            (e = e.sibling),
              ((n = n.sibling = Uc(e, e.pendingProps)).return = t);
          n.sibling = null;
        }
        return t.child;
      }
      function Xs(e, t) {
        if (!ra)
          switch (e.tailMode) {
            case "hidden":
              t = e.tail;
              for (var n = null; null !== t;)
                null !== t.alternate && (n = t), (t = t.sibling);
              null === n ? (e.tail = null) : (n.sibling = null);
              break;
            case "collapsed":
              n = e.tail;
              for (var i = null; null !== n;)
                null !== n.alternate && (i = n), (n = n.sibling);
              null === i
                ? t || null === e.tail
                  ? (e.tail = null)
                  : (e.tail.sibling = null)
                : (i.sibling = null);
          }
      }
      function Ys(e) {
        var t = null !== e.alternate && e.alternate.child === e.child,
          n = 0,
          i = 0;
        if (t)
          for (var r = e.child; null !== r;)
            (n |= r.lanes | r.childLanes),
              (i |= 14680064 & r.subtreeFlags),
              (i |= 14680064 & r.flags),
              (r.return = e),
              (r = r.sibling);
        else
          for (r = e.child; null !== r;)
            (n |= r.lanes | r.childLanes),
              (i |= r.subtreeFlags),
              (i |= r.flags),
              (r.return = e),
              (r = r.sibling);
        return (e.subtreeFlags |= i), (e.childLanes = n), t;
      }
      function qs(e, t, n) {
        var i = t.pendingProps;
        switch ((ta(t), t.tag)) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return Ys(t), null;
          case 1:
          case 17:
            return Nr(t.type) && Dr(), Ys(t), null;
          case 3:
            return (
              (i = t.stateNode),
              ro(),
              Tr(Cr),
              Tr(Rr),
              uo(),
              i.pendingContext &&
              ((i.context = i.pendingContext), (i.pendingContext = null)),
              (null !== e && null !== e.child) ||
              (da(t)
                ? (t.flags |= 4)
                : null === e ||
                (e.memoizedState.isDehydrated && 0 === (256 & t.flags)) ||
                ((t.flags |= 1024),
                  null !== aa && (sc(aa), (aa = null)))),
              Ds(e, t),
              Ys(t),
              null
            );
          case 5:
            oo(t);
            var r = no(to.current);
            if (((n = t.type), null !== e && null != t.stateNode))
              Us(e, t, n, i, r),
                e.ref !== t.ref && ((t.flags |= 512), (t.flags |= 2097152));
            else {
              if (!i) {
                if (null === t.stateNode) throw Error(a(166));
                return Ys(t), null;
              }
              if (((e = no($a.current)), da(t))) {
                (i = t.stateNode), (n = t.type);
                var o = t.memoizedProps;
                switch (
                ((i[hr] = t), (i[pr] = o), (e = 0 !== (1 & t.mode)), n)
                ) {
                  case "dialog":
                    zi("cancel", i), zi("close", i);
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    zi("load", i);
                    break;
                  case "video":
                  case "audio":
                    for (r = 0; r < Ii.length; r++) zi(Ii[r], i);
                    break;
                  case "source":
                    zi("error", i);
                    break;
                  case "img":
                  case "image":
                  case "link":
                    zi("error", i), zi("load", i);
                    break;
                  case "details":
                    zi("toggle", i);
                    break;
                  case "input":
                    Z(i, o), zi("invalid", i);
                    break;
                  case "select":
                    (i._wrapperState = { wasMultiple: !!o.multiple }),
                      zi("invalid", i);
                    break;
                  case "textarea":
                    re(i, o), zi("invalid", i);
                }
                for (var l in (_e(n, o), (r = null), o))
                  if (o.hasOwnProperty(l)) {
                    var c = o[l];
                    "children" === l
                      ? "string" === typeof c
                        ? i.textContent !== c &&
                        (!0 !== o.suppressHydrationWarning &&
                          Qi(i.textContent, c, e),
                          (r = ["children", c]))
                        : "number" === typeof c &&
                        i.textContent !== "" + c &&
                        (!0 !== o.suppressHydrationWarning &&
                          Qi(i.textContent, c, e),
                          (r = ["children", "" + c]))
                      : s.hasOwnProperty(l) &&
                      null != c &&
                      "onScroll" === l &&
                      zi("scroll", i);
                  }
                switch (n) {
                  case "input":
                    X(i), $(i, o, !0);
                    break;
                  case "textarea":
                    X(i), oe(i);
                    break;
                  case "select":
                  case "option":
                    break;
                  default:
                    "function" === typeof o.onClick && (i.onclick = $i);
                }
                (i = r), (t.updateQueue = i), null !== i && (t.flags |= 4);
              } else {
                (l = 9 === r.nodeType ? r : r.ownerDocument),
                  "http://www.w3.org/1999/xhtml" === e && (e = se(n)),
                  "http://www.w3.org/1999/xhtml" === e
                    ? "script" === n
                      ? (((e = l.createElement("div")).innerHTML =
                        "<script></script>"),
                        (e = e.removeChild(e.firstChild)))
                      : "string" === typeof i.is
                        ? (e = l.createElement(n, { is: i.is }))
                        : ((e = l.createElement(n)),
                          "select" === n &&
                          ((l = e),
                            i.multiple
                              ? (l.multiple = !0)
                              : i.size && (l.size = i.size)))
                    : (e = l.createElementNS(e, n)),
                  (e[hr] = t),
                  (e[pr] = i),
                  Ns(e, t, !1, !1),
                  (t.stateNode = e);
                e: {
                  switch (((l = ye(n, i)), n)) {
                    case "dialog":
                      zi("cancel", e), zi("close", e), (r = i);
                      break;
                    case "iframe":
                    case "object":
                    case "embed":
                      zi("load", e), (r = i);
                      break;
                    case "video":
                    case "audio":
                      for (r = 0; r < Ii.length; r++) zi(Ii[r], e);
                      r = i;
                      break;
                    case "source":
                      zi("error", e), (r = i);
                      break;
                    case "img":
                    case "image":
                    case "link":
                      zi("error", e), zi("load", e), (r = i);
                      break;
                    case "details":
                      zi("toggle", e), (r = i);
                      break;
                    case "input":
                      Z(e, i), (r = K(e, i)), zi("invalid", e);
                      break;
                    case "option":
                    default:
                      r = i;
                      break;
                    case "select":
                      (e._wrapperState = { wasMultiple: !!i.multiple }),
                        (r = k({}, i, { value: void 0 })),
                        zi("invalid", e);
                      break;
                    case "textarea":
                      re(e, i), (r = ie(e, i)), zi("invalid", e);
                  }
                  for (o in (_e(n, r), (c = r)))
                    if (c.hasOwnProperty(o)) {
                      var u = c[o];
                      "style" === o
                        ? ge(e, u)
                        : "dangerouslySetInnerHTML" === o
                          ? null != (u = u ? u.__html : void 0) && de(e, u)
                          : "children" === o
                            ? "string" === typeof u
                              ? ("textarea" !== n || "" !== u) && he(e, u)
                              : "number" === typeof u && he(e, "" + u)
                            : "suppressContentEditableWarning" !== o &&
                            "suppressHydrationWarning" !== o &&
                            "autoFocus" !== o &&
                            (s.hasOwnProperty(o)
                              ? null != u && "onScroll" === o && zi("scroll", e)
                              : null != u && y(e, o, u, l));
                    }
                  switch (n) {
                    case "input":
                      X(e), $(e, i, !1);
                      break;
                    case "textarea":
                      X(e), oe(e);
                      break;
                    case "option":
                      null != i.value &&
                        e.setAttribute("value", "" + W(i.value));
                      break;
                    case "select":
                      (e.multiple = !!i.multiple),
                        null != (o = i.value)
                          ? ne(e, !!i.multiple, o, !1)
                          : null != i.defaultValue &&
                          ne(e, !!i.multiple, i.defaultValue, !0);
                      break;
                    default:
                      "function" === typeof r.onClick && (e.onclick = $i);
                  }
                  switch (n) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      i = !!i.autoFocus;
                      break e;
                    case "img":
                      i = !0;
                      break e;
                    default:
                      i = !1;
                  }
                }
                i && (t.flags |= 4);
              }
              null !== t.ref && ((t.flags |= 512), (t.flags |= 2097152));
            }
            return Ys(t), null;
          case 6:
            if (e && null != t.stateNode) Is(e, t, e.memoizedProps, i);
            else {
              if ("string" !== typeof i && null === t.stateNode)
                throw Error(a(166));
              if (((n = no(to.current)), no($a.current), da(t))) {
                if (
                  ((i = t.stateNode),
                    (n = t.memoizedProps),
                    (i[hr] = t),
                    (o = i.nodeValue !== n) && null !== (e = na))
                )
                  switch (e.tag) {
                    case 3:
                      Qi(i.nodeValue, n, 0 !== (1 & e.mode));
                      break;
                    case 5:
                      !0 !== e.memoizedProps.suppressHydrationWarning &&
                        Qi(i.nodeValue, n, 0 !== (1 & e.mode));
                  }
                o && (t.flags |= 4);
              } else
                ((i = (9 === n.nodeType ? n : n.ownerDocument).createTextNode(
                  i
                ))[hr] = t),
                  (t.stateNode = i);
            }
            return Ys(t), null;
          case 13:
            if (
              (Tr(so),
                (i = t.memoizedState),
                null === e ||
                (null !== e.memoizedState &&
                  null !== e.memoizedState.dehydrated))
            ) {
              if (
                ra &&
                null !== ia &&
                0 !== (1 & t.mode) &&
                0 === (128 & t.flags)
              )
                ha(), pa(), (t.flags |= 98560), (o = !1);
              else if (((o = da(t)), null !== i && null !== i.dehydrated)) {
                if (null === e) {
                  if (!o) throw Error(a(318));
                  if (
                    !(o =
                      null !== (o = t.memoizedState) ? o.dehydrated : null)
                  )
                    throw Error(a(317));
                  o[hr] = t;
                } else
                  pa(),
                    0 === (128 & t.flags) && (t.memoizedState = null),
                    (t.flags |= 4);
                Ys(t), (o = !1);
              } else null !== aa && (sc(aa), (aa = null)), (o = !0);
              if (!o) return 65536 & t.flags ? t : null;
            }
            return 0 !== (128 & t.flags)
              ? ((t.lanes = n), t)
              : ((i = null !== i) !==
                (null !== e && null !== e.memoizedState) &&
                i &&
                ((t.child.flags |= 8192),
                  0 !== (1 & t.mode) &&
                  (null === e || 0 !== (1 & so.current)
                    ? 0 === Il && (Il = 3)
                    : gc())),
                null !== t.updateQueue && (t.flags |= 4),
                Ys(t),
                null);
          case 4:
            return (
              ro(),
              Ds(e, t),
              null === e && Hi(t.stateNode.containerInfo),
              Ys(t),
              null
            );
          case 10:
            return Sa(t.type._context), Ys(t), null;
          case 19:
            if ((Tr(so), null === (o = t.memoizedState))) return Ys(t), null;
            if (((i = 0 !== (128 & t.flags)), null === (l = o.rendering)))
              if (i) Xs(o, !1);
              else {
                if (0 !== Il || (null !== e && 0 !== (128 & e.flags)))
                  for (e = t.child; null !== e;) {
                    if (null !== (l = lo(e))) {
                      for (
                        t.flags |= 128,
                        Xs(o, !1),
                        null !== (i = l.updateQueue) &&
                        ((t.updateQueue = i), (t.flags |= 4)),
                        t.subtreeFlags = 0,
                        i = n,
                        n = t.child;
                        null !== n;

                      )
                        (e = i),
                          ((o = n).flags &= 14680066),
                          null === (l = o.alternate)
                            ? ((o.childLanes = 0),
                              (o.lanes = e),
                              (o.child = null),
                              (o.subtreeFlags = 0),
                              (o.memoizedProps = null),
                              (o.memoizedState = null),
                              (o.updateQueue = null),
                              (o.dependencies = null),
                              (o.stateNode = null))
                            : ((o.childLanes = l.childLanes),
                              (o.lanes = l.lanes),
                              (o.child = l.child),
                              (o.subtreeFlags = 0),
                              (o.deletions = null),
                              (o.memoizedProps = l.memoizedProps),
                              (o.memoizedState = l.memoizedState),
                              (o.updateQueue = l.updateQueue),
                              (o.type = l.type),
                              (e = l.dependencies),
                              (o.dependencies =
                                null === e
                                  ? null
                                  : {
                                    lanes: e.lanes,
                                    firstContext: e.firstContext,
                                  })),
                          (n = n.sibling);
                      return wr(so, (1 & so.current) | 2), t.child;
                    }
                    e = e.sibling;
                  }
                null !== o.tail &&
                  Je() > Gl &&
                  ((t.flags |= 128),
                    (i = !0),
                    Xs(o, !1),
                    (t.lanes = 4194304));
              }
            else {
              if (!i)
                if (null !== (e = lo(l))) {
                  if (
                    ((t.flags |= 128),
                      (i = !0),
                      null !== (n = e.updateQueue) &&
                      ((t.updateQueue = n), (t.flags |= 4)),
                      Xs(o, !0),
                      null === o.tail &&
                      "hidden" === o.tailMode &&
                      !l.alternate &&
                      !ra)
                  )
                    return Ys(t), null;
                } else
                  2 * Je() - o.renderingStartTime > Gl &&
                    1073741824 !== n &&
                    ((t.flags |= 128),
                      (i = !0),
                      Xs(o, !1),
                      (t.lanes = 4194304));
              o.isBackwards
                ? ((l.sibling = t.child), (t.child = l))
                : (null !== (n = o.last) ? (n.sibling = l) : (t.child = l),
                  (o.last = l));
            }
            return null !== o.tail
              ? ((t = o.tail),
                (o.rendering = t),
                (o.tail = t.sibling),
                (o.renderingStartTime = Je()),
                (t.sibling = null),
                (n = so.current),
                wr(so, i ? (1 & n) | 2 : 1 & n),
                t)
              : (Ys(t), null);
          case 22:
          case 23:
            return (
              hc(),
              (i = null !== t.memoizedState),
              null !== e &&
              (null !== e.memoizedState) !== i &&
              (t.flags |= 8192),
              i && 0 !== (1 & t.mode)
                ? 0 !== (1073741824 & Dl) &&
                (Ys(t), 6 & t.subtreeFlags && (t.flags |= 8192))
                : Ys(t),
              null
            );
          case 24:
          case 25:
            return null;
        }
        throw Error(a(156, t.tag));
      }
      function Ks(e, t) {
        switch ((ta(t), t.tag)) {
          case 1:
            return (
              Nr(t.type) && Dr(),
              65536 & (e = t.flags)
                ? ((t.flags = (-65537 & e) | 128), t)
                : null
            );
          case 3:
            return (
              ro(),
              Tr(Cr),
              Tr(Rr),
              uo(),
              0 !== (65536 & (e = t.flags)) && 0 === (128 & e)
                ? ((t.flags = (-65537 & e) | 128), t)
                : null
            );
          case 5:
            return oo(t), null;
          case 13:
            if (
              (Tr(so),
                null !== (e = t.memoizedState) && null !== e.dehydrated)
            ) {
              if (null === t.alternate) throw Error(a(340));
              pa();
            }
            return 65536 & (e = t.flags)
              ? ((t.flags = (-65537 & e) | 128), t)
              : null;
          case 19:
            return Tr(so), null;
          case 4:
            return ro(), null;
          case 10:
            return Sa(t.type._context), null;
          case 22:
          case 23:
            return hc(), null;
          default:
            return null;
        }
      }
      (Ns = function (e, t) {
        for (var n = t.child; null !== n;) {
          if (5 === n.tag || 6 === n.tag) e.appendChild(n.stateNode);
          else if (4 !== n.tag && null !== n.child) {
            (n.child.return = n), (n = n.child);
            continue;
          }
          if (n === t) break;
          for (; null === n.sibling;) {
            if (null === n.return || n.return === t) return;
            n = n.return;
          }
          (n.sibling.return = n.return), (n = n.sibling);
        }
      }),
        (Ds = function () { }),
        (Us = function (e, t, n, i) {
          var r = e.memoizedProps;
          if (r !== i) {
            (e = t.stateNode), no($a.current);
            var a,
              o = null;
            switch (n) {
              case "input":
                (r = K(e, r)), (i = K(e, i)), (o = []);
                break;
              case "select":
                (r = k({}, r, { value: void 0 })),
                  (i = k({}, i, { value: void 0 })),
                  (o = []);
                break;
              case "textarea":
                (r = ie(e, r)), (i = ie(e, i)), (o = []);
                break;
              default:
                "function" !== typeof r.onClick &&
                  "function" === typeof i.onClick &&
                  (e.onclick = $i);
            }
            for (u in (_e(n, i), (n = null), r))
              if (!i.hasOwnProperty(u) && r.hasOwnProperty(u) && null != r[u])
                if ("style" === u) {
                  var l = r[u];
                  for (a in l)
                    l.hasOwnProperty(a) && (n || (n = {}), (n[a] = ""));
                } else
                  "dangerouslySetInnerHTML" !== u &&
                    "children" !== u &&
                    "suppressContentEditableWarning" !== u &&
                    "suppressHydrationWarning" !== u &&
                    "autoFocus" !== u &&
                    (s.hasOwnProperty(u)
                      ? o || (o = [])
                      : (o = o || []).push(u, null));
            for (u in i) {
              var c = i[u];
              if (
                ((l = null != r ? r[u] : void 0),
                  i.hasOwnProperty(u) && c !== l && (null != c || null != l))
              )
                if ("style" === u)
                  if (l) {
                    for (a in l)
                      !l.hasOwnProperty(a) ||
                        (c && c.hasOwnProperty(a)) ||
                        (n || (n = {}), (n[a] = ""));
                    for (a in c)
                      c.hasOwnProperty(a) &&
                        l[a] !== c[a] &&
                        (n || (n = {}), (n[a] = c[a]));
                  } else n || (o || (o = []), o.push(u, n)), (n = c);
                else
                  "dangerouslySetInnerHTML" === u
                    ? ((c = c ? c.__html : void 0),
                      (l = l ? l.__html : void 0),
                      null != c && l !== c && (o = o || []).push(u, c))
                    : "children" === u
                      ? ("string" !== typeof c && "number" !== typeof c) ||
                      (o = o || []).push(u, "" + c)
                      : "suppressContentEditableWarning" !== u &&
                      "suppressHydrationWarning" !== u &&
                      (s.hasOwnProperty(u)
                        ? (null != c && "onScroll" === u && zi("scroll", e),
                          o || l === c || (o = []))
                        : (o = o || []).push(u, c));
            }
            n && (o = o || []).push("style", n);
            var u = o;
            (t.updateQueue = u) && (t.flags |= 4);
          }
        }),
        (Is = function (e, t, n, i) {
          n !== i && (t.flags |= 4);
        });
      var Zs = !1,
        Js = !1,
        Qs = "function" === typeof WeakSet ? WeakSet : Set,
        $s = null;
      function el(e, t) {
        var n = e.ref;
        if (null !== n)
          if ("function" === typeof n)
            try {
              n(null);
            } catch (i) {
              Tc(e, t, i);
            }
          else n.current = null;
      }
      function tl(e, t, n) {
        try {
          n();
        } catch (i) {
          Tc(e, t, i);
        }
      }
      var nl = !1;
      function il(e, t, n) {
        var i = t.updateQueue;
        if (null !== (i = null !== i ? i.lastEffect : null)) {
          var r = (i = i.next);
          do {
            if ((r.tag & e) === e) {
              var a = r.destroy;
              (r.destroy = void 0), void 0 !== a && tl(t, n, a);
            }
            r = r.next;
          } while (r !== i);
        }
      }
      function rl(e, t) {
        if (
          null !== (t = null !== (t = t.updateQueue) ? t.lastEffect : null)
        ) {
          var n = (t = t.next);
          do {
            if ((n.tag & e) === e) {
              var i = n.create;
              n.destroy = i();
            }
            n = n.next;
          } while (n !== t);
        }
      }
      function al(e) {
        var t = e.ref;
        if (null !== t) {
          var n = e.stateNode;
          e.tag, (e = n), "function" === typeof t ? t(e) : (t.current = e);
        }
      }
      function ol(e) {
        var t = e.alternate;
        null !== t && ((e.alternate = null), ol(t)),
          (e.child = null),
          (e.deletions = null),
          (e.sibling = null),
          5 === e.tag &&
          null !== (t = e.stateNode) &&
          (delete t[hr],
            delete t[pr],
            delete t[mr],
            delete t[gr],
            delete t[vr]),
          (e.stateNode = null),
          (e.return = null),
          (e.dependencies = null),
          (e.memoizedProps = null),
          (e.memoizedState = null),
          (e.pendingProps = null),
          (e.stateNode = null),
          (e.updateQueue = null);
      }
      function sl(e) {
        return 5 === e.tag || 3 === e.tag || 4 === e.tag;
      }
      function ll(e) {
        e: for (; ;) {
          for (; null === e.sibling;) {
            if (null === e.return || sl(e.return)) return null;
            e = e.return;
          }
          for (
            e.sibling.return = e.return, e = e.sibling;
            5 !== e.tag && 6 !== e.tag && 18 !== e.tag;

          ) {
            if (2 & e.flags) continue e;
            if (null === e.child || 4 === e.tag) continue e;
            (e.child.return = e), (e = e.child);
          }
          if (!(2 & e.flags)) return e.stateNode;
        }
      }
      function cl(e, t, n) {
        var i = e.tag;
        if (5 === i || 6 === i)
          (e = e.stateNode),
            t
              ? 8 === n.nodeType
                ? n.parentNode.insertBefore(e, t)
                : n.insertBefore(e, t)
              : (8 === n.nodeType
                ? (t = n.parentNode).insertBefore(e, n)
                : (t = n).appendChild(e),
                (null !== (n = n._reactRootContainer) && void 0 !== n) ||
                null !== t.onclick ||
                (t.onclick = $i));
        else if (4 !== i && null !== (e = e.child))
          for (cl(e, t, n), e = e.sibling; null !== e;)
            cl(e, t, n), (e = e.sibling);
      }
      function ul(e, t, n) {
        var i = e.tag;
        if (5 === i || 6 === i)
          (e = e.stateNode), t ? n.insertBefore(e, t) : n.appendChild(e);
        else if (4 !== i && null !== (e = e.child))
          for (ul(e, t, n), e = e.sibling; null !== e;)
            ul(e, t, n), (e = e.sibling);
      }
      var dl = null,
        hl = !1;
      function pl(e, t, n) {
        for (n = n.child; null !== n;) fl(e, t, n), (n = n.sibling);
      }
      function fl(e, t, n) {
        if (at && "function" === typeof at.onCommitFiberUnmount)
          try {
            at.onCommitFiberUnmount(rt, n);
          } catch (s) { }
        switch (n.tag) {
          case 5:
            Js || el(n, t);
          case 6:
            var i = dl,
              r = hl;
            (dl = null),
              pl(e, t, n),
              (hl = r),
              null !== (dl = i) &&
              (hl
                ? ((e = dl),
                  (n = n.stateNode),
                  8 === e.nodeType
                    ? e.parentNode.removeChild(n)
                    : e.removeChild(n))
                : dl.removeChild(n.stateNode));
            break;
          case 18:
            null !== dl &&
              (hl
                ? ((e = dl),
                  (n = n.stateNode),
                  8 === e.nodeType
                    ? lr(e.parentNode, n)
                    : 1 === e.nodeType && lr(e, n),
                  Ht(e))
                : lr(dl, n.stateNode));
            break;
          case 4:
            (i = dl),
              (r = hl),
              (dl = n.stateNode.containerInfo),
              (hl = !0),
              pl(e, t, n),
              (dl = i),
              (hl = r);
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            if (
              !Js &&
              null !== (i = n.updateQueue) &&
              null !== (i = i.lastEffect)
            ) {
              r = i = i.next;
              do {
                var a = r,
                  o = a.destroy;
                (a = a.tag),
                  void 0 !== o &&
                  (0 !== (2 & a) || 0 !== (4 & a)) &&
                  tl(n, t, o),
                  (r = r.next);
              } while (r !== i);
            }
            pl(e, t, n);
            break;
          case 1:
            if (
              !Js &&
              (el(n, t),
                "function" === typeof (i = n.stateNode).componentWillUnmount)
            )
              try {
                (i.props = n.memoizedProps),
                  (i.state = n.memoizedState),
                  i.componentWillUnmount();
              } catch (s) {
                Tc(n, t, s);
              }
            pl(e, t, n);
            break;
          case 21:
            pl(e, t, n);
            break;
          case 22:
            1 & n.mode
              ? ((Js = (i = Js) || null !== n.memoizedState),
                pl(e, t, n),
                (Js = i))
              : pl(e, t, n);
            break;
          default:
            pl(e, t, n);
        }
      }
      function ml(e) {
        var t = e.updateQueue;
        if (null !== t) {
          e.updateQueue = null;
          var n = e.stateNode;
          null === n && (n = e.stateNode = new Qs()),
            t.forEach(function (t) {
              var i = Cc.bind(null, e, t);
              n.has(t) || (n.add(t), t.then(i, i));
            });
        }
      }
      function gl(e, t) {
        var n = t.deletions;
        if (null !== n)
          for (var i = 0; i < n.length; i++) {
            var r = n[i];
            try {
              var o = e,
                s = t,
                l = s;
              e: for (; null !== l;) {
                switch (l.tag) {
                  case 5:
                    (dl = l.stateNode), (hl = !1);
                    break e;
                  case 3:
                  case 4:
                    (dl = l.stateNode.containerInfo), (hl = !0);
                    break e;
                }
                l = l.return;
              }
              if (null === dl) throw Error(a(160));
              fl(o, s, r), (dl = null), (hl = !1);
              var c = r.alternate;
              null !== c && (c.return = null), (r.return = null);
            } catch (u) {
              Tc(r, t, u);
            }
          }
        if (12854 & t.subtreeFlags)
          for (t = t.child; null !== t;) vl(t, e), (t = t.sibling);
      }
      function vl(e, t) {
        var n = e.alternate,
          i = e.flags;
        switch (e.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            if ((gl(t, e), _l(e), 4 & i)) {
              try {
                il(3, e, e.return), rl(3, e);
              } catch (g) {
                Tc(e, e.return, g);
              }
              try {
                il(5, e, e.return);
              } catch (g) {
                Tc(e, e.return, g);
              }
            }
            break;
          case 1:
            gl(t, e), _l(e), 512 & i && null !== n && el(n, n.return);
            break;
          case 5:
            if (
              (gl(t, e),
                _l(e),
                512 & i && null !== n && el(n, n.return),
                32 & e.flags)
            ) {
              var r = e.stateNode;
              try {
                he(r, "");
              } catch (g) {
                Tc(e, e.return, g);
              }
            }
            if (4 & i && null != (r = e.stateNode)) {
              var o = e.memoizedProps,
                s = null !== n ? n.memoizedProps : o,
                l = e.type,
                c = e.updateQueue;
              if (((e.updateQueue = null), null !== c))
                try {
                  "input" === l &&
                    "radio" === o.type &&
                    null != o.name &&
                    J(r, o),
                    ye(l, s);
                  var u = ye(l, o);
                  for (s = 0; s < c.length; s += 2) {
                    var d = c[s],
                      h = c[s + 1];
                    "style" === d
                      ? ge(r, h)
                      : "dangerouslySetInnerHTML" === d
                        ? de(r, h)
                        : "children" === d
                          ? he(r, h)
                          : y(r, d, h, u);
                  }
                  switch (l) {
                    case "input":
                      Q(r, o);
                      break;
                    case "textarea":
                      ae(r, o);
                      break;
                    case "select":
                      var p = r._wrapperState.wasMultiple;
                      r._wrapperState.wasMultiple = !!o.multiple;
                      var f = o.value;
                      null != f
                        ? ne(r, !!o.multiple, f, !1)
                        : p !== !!o.multiple &&
                        (null != o.defaultValue
                          ? ne(r, !!o.multiple, o.defaultValue, !0)
                          : ne(r, !!o.multiple, o.multiple ? [] : "", !1));
                  }
                  r[pr] = o;
                } catch (g) {
                  Tc(e, e.return, g);
                }
            }
            break;
          case 6:
            if ((gl(t, e), _l(e), 4 & i)) {
              if (null === e.stateNode) throw Error(a(162));
              (r = e.stateNode), (o = e.memoizedProps);
              try {
                r.nodeValue = o;
              } catch (g) {
                Tc(e, e.return, g);
              }
            }
            break;
          case 3:
            if (
              (gl(t, e),
                _l(e),
                4 & i && null !== n && n.memoizedState.isDehydrated)
            )
              try {
                Ht(t.containerInfo);
              } catch (g) {
                Tc(e, e.return, g);
              }
            break;
          case 4:
          default:
            gl(t, e), _l(e);
            break;
          case 13:
            gl(t, e),
              _l(e),
              8192 & (r = e.child).flags &&
              ((o = null !== r.memoizedState),
                (r.stateNode.isHidden = o),
                !o ||
                (null !== r.alternate &&
                  null !== r.alternate.memoizedState) ||
                (Hl = Je())),
              4 & i && ml(e);
            break;
          case 22:
            if (
              ((d = null !== n && null !== n.memoizedState),
                1 & e.mode
                  ? ((Js = (u = Js) || d), gl(t, e), (Js = u))
                  : gl(t, e),
                _l(e),
                8192 & i)
            ) {
              if (
                ((u = null !== e.memoizedState),
                  (e.stateNode.isHidden = u) && !d && 0 !== (1 & e.mode))
              )
                for ($s = e, d = e.child; null !== d;) {
                  for (h = $s = d; null !== $s;) {
                    switch (((f = (p = $s).child), p.tag)) {
                      case 0:
                      case 11:
                      case 14:
                      case 15:
                        il(4, p, p.return);
                        break;
                      case 1:
                        el(p, p.return);
                        var m = p.stateNode;
                        if ("function" === typeof m.componentWillUnmount) {
                          (i = p), (n = p.return);
                          try {
                            (t = i),
                              (m.props = t.memoizedProps),
                              (m.state = t.memoizedState),
                              m.componentWillUnmount();
                          } catch (g) {
                            Tc(i, n, g);
                          }
                        }
                        break;
                      case 5:
                        el(p, p.return);
                        break;
                      case 22:
                        if (null !== p.memoizedState) {
                          Sl(h);
                          continue;
                        }
                    }
                    null !== f ? ((f.return = p), ($s = f)) : Sl(h);
                  }
                  d = d.sibling;
                }
              e: for (d = null, h = e; ;) {
                if (5 === h.tag) {
                  if (null === d) {
                    d = h;
                    try {
                      (r = h.stateNode),
                        u
                          ? "function" === typeof (o = r.style).setProperty
                            ? o.setProperty("display", "none", "important")
                            : (o.display = "none")
                          : ((l = h.stateNode),
                            (s =
                              void 0 !== (c = h.memoizedProps.style) &&
                                null !== c &&
                                c.hasOwnProperty("display")
                                ? c.display
                                : null),
                            (l.style.display = me("display", s)));
                    } catch (g) {
                      Tc(e, e.return, g);
                    }
                  }
                } else if (6 === h.tag) {
                  if (null === d)
                    try {
                      h.stateNode.nodeValue = u ? "" : h.memoizedProps;
                    } catch (g) {
                      Tc(e, e.return, g);
                    }
                } else if (
                  ((22 !== h.tag && 23 !== h.tag) ||
                    null === h.memoizedState ||
                    h === e) &&
                  null !== h.child
                ) {
                  (h.child.return = h), (h = h.child);
                  continue;
                }
                if (h === e) break e;
                for (; null === h.sibling;) {
                  if (null === h.return || h.return === e) break e;
                  d === h && (d = null), (h = h.return);
                }
                d === h && (d = null),
                  (h.sibling.return = h.return),
                  (h = h.sibling);
              }
            }
            break;
          case 19:
            gl(t, e), _l(e), 4 & i && ml(e);
          case 21:
        }
      }
      function _l(e) {
        var t = e.flags;
        if (2 & t) {
          try {
            e: {
              for (var n = e.return; null !== n;) {
                if (sl(n)) {
                  var i = n;
                  break e;
                }
                n = n.return;
              }
              throw Error(a(160));
            }
            switch (i.tag) {
              case 5:
                var r = i.stateNode;
                32 & i.flags && (he(r, ""), (i.flags &= -33)),
                  ul(e, ll(e), r);
                break;
              case 3:
              case 4:
                var o = i.stateNode.containerInfo;
                cl(e, ll(e), o);
                break;
              default:
                throw Error(a(161));
            }
          } catch (s) {
            Tc(e, e.return, s);
          }
          e.flags &= -3;
        }
        4096 & t && (e.flags &= -4097);
      }
      function yl(e, t, n) {
        ($s = e), xl(e, t, n);
      }
      function xl(e, t, n) {
        for (var i = 0 !== (1 & e.mode); null !== $s;) {
          var r = $s,
            a = r.child;
          if (22 === r.tag && i) {
            var o = null !== r.memoizedState || Zs;
            if (!o) {
              var s = r.alternate,
                l = (null !== s && null !== s.memoizedState) || Js;
              s = Zs;
              var c = Js;
              if (((Zs = o), (Js = l) && !c))
                for ($s = r; null !== $s;)
                  (l = (o = $s).child),
                    22 === o.tag && null !== o.memoizedState
                      ? El(r)
                      : null !== l
                        ? ((l.return = o), ($s = l))
                        : El(r);
              for (; null !== a;) ($s = a), xl(a, t, n), (a = a.sibling);
              ($s = r), (Zs = s), (Js = c);
            }
            bl(e);
          } else
            0 !== (8772 & r.subtreeFlags) && null !== a
              ? ((a.return = r), ($s = a))
              : bl(e);
        }
      }
      function bl(e) {
        for (; null !== $s;) {
          var t = $s;
          if (0 !== (8772 & t.flags)) {
            var n = t.alternate;
            try {
              if (0 !== (8772 & t.flags))
                switch (t.tag) {
                  case 0:
                  case 11:
                  case 15:
                    Js || rl(5, t);
                    break;
                  case 1:
                    var i = t.stateNode;
                    if (4 & t.flags && !Js)
                      if (null === n) i.componentDidMount();
                      else {
                        var r =
                          t.elementType === t.type
                            ? n.memoizedProps
                            : ga(t.type, n.memoizedProps);
                        i.componentDidUpdate(
                          r,
                          n.memoizedState,
                          i.__reactInternalSnapshotBeforeUpdate
                        );
                      }
                    var o = t.updateQueue;
                    null !== o && Fa(t, o, i);
                    break;
                  case 3:
                    var s = t.updateQueue;
                    if (null !== s) {
                      if (((n = null), null !== t.child))
                        switch (t.child.tag) {
                          case 5:
                          case 1:
                            n = t.child.stateNode;
                        }
                      Fa(t, s, n);
                    }
                    break;
                  case 5:
                    var l = t.stateNode;
                    if (null === n && 4 & t.flags) {
                      n = l;
                      var c = t.memoizedProps;
                      switch (t.type) {
                        case "button":
                        case "input":
                        case "select":
                        case "textarea":
                          c.autoFocus && n.focus();
                          break;
                        case "img":
                          c.src && (n.src = c.src);
                      }
                    }
                    break;
                  case 6:
                  case 4:
                  case 12:
                  case 19:
                  case 17:
                  case 21:
                  case 22:
                  case 23:
                  case 25:
                    break;
                  case 13:
                    if (null === t.memoizedState) {
                      var u = t.alternate;
                      if (null !== u) {
                        var d = u.memoizedState;
                        if (null !== d) {
                          var h = d.dehydrated;
                          null !== h && Ht(h);
                        }
                      }
                    }
                    break;
                  default:
                    throw Error(a(163));
                }
              Js || (512 & t.flags && al(t));
            } catch (p) {
              Tc(t, t.return, p);
            }
          }
          if (t === e) {
            $s = null;
            break;
          }
          if (null !== (n = t.sibling)) {
            (n.return = t.return), ($s = n);
            break;
          }
          $s = t.return;
        }
      }
      function Sl(e) {
        for (; null !== $s;) {
          var t = $s;
          if (t === e) {
            $s = null;
            break;
          }
          var n = t.sibling;
          if (null !== n) {
            (n.return = t.return), ($s = n);
            break;
          }
          $s = t.return;
        }
      }
      function El(e) {
        for (; null !== $s;) {
          var t = $s;
          try {
            switch (t.tag) {
              case 0:
              case 11:
              case 15:
                var n = t.return;
                try {
                  rl(4, t);
                } catch (l) {
                  Tc(t, n, l);
                }
                break;
              case 1:
                var i = t.stateNode;
                if ("function" === typeof i.componentDidMount) {
                  var r = t.return;
                  try {
                    i.componentDidMount();
                  } catch (l) {
                    Tc(t, r, l);
                  }
                }
                var a = t.return;
                try {
                  al(t);
                } catch (l) {
                  Tc(t, a, l);
                }
                break;
              case 5:
                var o = t.return;
                try {
                  al(t);
                } catch (l) {
                  Tc(t, o, l);
                }
            }
          } catch (l) {
            Tc(t, t.return, l);
          }
          if (t === e) {
            $s = null;
            break;
          }
          var s = t.sibling;
          if (null !== s) {
            (s.return = t.return), ($s = s);
            break;
          }
          $s = t.return;
        }
      }
      var Ml,
        Tl = Math.ceil,
        wl = x.ReactCurrentDispatcher,
        Al = x.ReactCurrentOwner,
        Rl = x.ReactCurrentBatchConfig,
        Cl = 0,
        Pl = null,
        Ll = null,
        Nl = 0,
        Dl = 0,
        Ul = Mr(0),
        Il = 0,
        Ol = null,
        kl = 0,
        Fl = 0,
        zl = 0,
        Bl = null,
        Vl = null,
        Hl = 0,
        Gl = 1 / 0,
        Wl = null,
        jl = !1,
        Xl = null,
        Yl = null,
        ql = !1,
        Kl = null,
        Zl = 0,
        Jl = 0,
        Ql = null,
        $l = -1,
        ec = 0;
      function tc() {
        return 0 !== (6 & Cl) ? Je() : -1 !== $l ? $l : ($l = Je());
      }
      function nc(e) {
        return 0 === (1 & e.mode)
          ? 1
          : 0 !== (2 & Cl) && 0 !== Nl
            ? Nl & -Nl
            : null !== ma.transition
              ? (0 === ec && (ec = mt()), ec)
              : 0 !== (e = yt)
                ? e
                : (e = void 0 === (e = window.event) ? 16 : Zt(e.type));
      }
      function ic(e, t, n, i) {
        if (50 < Jl) throw ((Jl = 0), (Ql = null), Error(a(185)));
        vt(e, n, i),
          (0 !== (2 & Cl) && e === Pl) ||
          (e === Pl && (0 === (2 & Cl) && (Fl |= n), 4 === Il && lc(e, Nl)),
            rc(e, i),
            1 === n &&
            0 === Cl &&
            0 === (1 & t.mode) &&
            ((Gl = Je() + 500), zr && Hr()));
      }
      function rc(e, t) {
        var n = e.callbackNode;
        !(function (e, t) {
          for (
            var n = e.suspendedLanes,
            i = e.pingedLanes,
            r = e.expirationTimes,
            a = e.pendingLanes;
            0 < a;

          ) {
            var o = 31 - ot(a),
              s = 1 << o,
              l = r[o];
            -1 === l
              ? (0 !== (s & n) && 0 === (s & i)) || (r[o] = pt(s, t))
              : l <= t && (e.expiredLanes |= s),
              (a &= ~s);
          }
        })(e, t);
        var i = ht(e, e === Pl ? Nl : 0);
        if (0 === i)
          null !== n && qe(n),
            (e.callbackNode = null),
            (e.callbackPriority = 0);
        else if (((t = i & -i), e.callbackPriority !== t)) {
          if ((null != n && qe(n), 1 === t))
            0 === e.tag
              ? (function (e) {
                (zr = !0), Vr(e);
              })(cc.bind(null, e))
              : Vr(cc.bind(null, e)),
              or(function () {
                0 === (6 & Cl) && Hr();
              }),
              (n = null);
          else {
            switch (xt(i)) {
              case 1:
                n = $e;
                break;
              case 4:
                n = et;
                break;
              case 16:
              default:
                n = tt;
                break;
              case 536870912:
                n = it;
            }
            n = Pc(n, ac.bind(null, e));
          }
          (e.callbackPriority = t), (e.callbackNode = n);
        }
      }
      function ac(e, t) {
        if ((($l = -1), (ec = 0), 0 !== (6 & Cl))) throw Error(a(327));
        var n = e.callbackNode;
        if (Ec() && e.callbackNode !== n) return null;
        var i = ht(e, e === Pl ? Nl : 0);
        if (0 === i) return null;
        if (0 !== (30 & i) || 0 !== (i & e.expiredLanes) || t) t = vc(e, i);
        else {
          t = i;
          var r = Cl;
          Cl |= 2;
          var o = mc();
          for (
            (Pl === e && Nl === t) ||
            ((Wl = null), (Gl = Je() + 500), pc(e, t));
            ;

          )
            try {
              yc();
              break;
            } catch (l) {
              fc(e, l);
            }
          ba(),
            (wl.current = o),
            (Cl = r),
            null !== Ll ? (t = 0) : ((Pl = null), (Nl = 0), (t = Il));
        }
        if (0 !== t) {
          if (
            (2 === t && 0 !== (r = ft(e)) && ((i = r), (t = oc(e, r))),
              1 === t)
          )
            throw ((n = Ol), pc(e, 0), lc(e, i), rc(e, Je()), n);
          if (6 === t) lc(e, i);
          else {
            if (
              ((r = e.current.alternate),
                0 === (30 & i) &&
                !(function (e) {
                  for (var t = e; ;) {
                    if (16384 & t.flags) {
                      var n = t.updateQueue;
                      if (null !== n && null !== (n = n.stores))
                        for (var i = 0; i < n.length; i++) {
                          var r = n[i],
                            a = r.getSnapshot;
                          r = r.value;
                          try {
                            if (!si(a(), r)) return !1;
                          } catch (s) {
                            return !1;
                          }
                        }
                    }
                    if (((n = t.child), 16384 & t.subtreeFlags && null !== n))
                      (n.return = t), (t = n);
                    else {
                      if (t === e) break;
                      for (; null === t.sibling;) {
                        if (null === t.return || t.return === e) return !0;
                        t = t.return;
                      }
                      (t.sibling.return = t.return), (t = t.sibling);
                    }
                  }
                  return !0;
                })(r) &&
                (2 === (t = vc(e, i)) &&
                  0 !== (o = ft(e)) &&
                  ((i = o), (t = oc(e, o))),
                  1 === t))
            )
              throw ((n = Ol), pc(e, 0), lc(e, i), rc(e, Je()), n);
            switch (((e.finishedWork = r), (e.finishedLanes = i), t)) {
              case 0:
              case 1:
                throw Error(a(345));
              case 2:
              case 5:
                Sc(e, Vl, Wl);
                break;
              case 3:
                if (
                  (lc(e, i),
                    (130023424 & i) === i && 10 < (t = Hl + 500 - Je()))
                ) {
                  if (0 !== ht(e, 0)) break;
                  if (((r = e.suspendedLanes) & i) !== i) {
                    tc(), (e.pingedLanes |= e.suspendedLanes & r);
                    break;
                  }
                  e.timeoutHandle = ir(Sc.bind(null, e, Vl, Wl), t);
                  break;
                }
                Sc(e, Vl, Wl);
                break;
              case 4:
                if ((lc(e, i), (4194240 & i) === i)) break;
                for (t = e.eventTimes, r = -1; 0 < i;) {
                  var s = 31 - ot(i);
                  (o = 1 << s), (s = t[s]) > r && (r = s), (i &= ~o);
                }
                if (
                  ((i = r),
                    10 <
                    (i =
                      (120 > (i = Je() - i)
                        ? 120
                        : 480 > i
                          ? 480
                          : 1080 > i
                            ? 1080
                            : 1920 > i
                              ? 1920
                              : 3e3 > i
                                ? 3e3
                                : 4320 > i
                                  ? 4320
                                  : 1960 * Tl(i / 1960)) - i))
                ) {
                  e.timeoutHandle = ir(Sc.bind(null, e, Vl, Wl), i);
                  break;
                }
                Sc(e, Vl, Wl);
                break;
              default:
                throw Error(a(329));
            }
          }
        }
        return rc(e, Je()), e.callbackNode === n ? ac.bind(null, e) : null;
      }
      function oc(e, t) {
        var n = Bl;
        return (
          e.current.memoizedState.isDehydrated && (pc(e, t).flags |= 256),
          2 !== (e = vc(e, t)) && ((t = Vl), (Vl = n), null !== t && sc(t)),
          e
        );
      }
      function sc(e) {
        null === Vl ? (Vl = e) : Vl.push.apply(Vl, e);
      }
      function lc(e, t) {
        for (
          t &= ~zl,
          t &= ~Fl,
          e.suspendedLanes |= t,
          e.pingedLanes &= ~t,
          e = e.expirationTimes;
          0 < t;

        ) {
          var n = 31 - ot(t),
            i = 1 << n;
          (e[n] = -1), (t &= ~i);
        }
      }
      function cc(e) {
        if (0 !== (6 & Cl)) throw Error(a(327));
        Ec();
        var t = ht(e, 0);
        if (0 === (1 & t)) return rc(e, Je()), null;
        var n = vc(e, t);
        if (0 !== e.tag && 2 === n) {
          var i = ft(e);
          0 !== i && ((t = i), (n = oc(e, i)));
        }
        if (1 === n) throw ((n = Ol), pc(e, 0), lc(e, t), rc(e, Je()), n);
        if (6 === n) throw Error(a(345));
        return (
          (e.finishedWork = e.current.alternate),
          (e.finishedLanes = t),
          Sc(e, Vl, Wl),
          rc(e, Je()),
          null
        );
      }
      function uc(e, t) {
        var n = Cl;
        Cl |= 1;
        try {
          return e(t);
        } finally {
          0 === (Cl = n) && ((Gl = Je() + 500), zr && Hr());
        }
      }
      function dc(e) {
        null !== Kl && 0 === Kl.tag && 0 === (6 & Cl) && Ec();
        var t = Cl;
        Cl |= 1;
        var n = Rl.transition,
          i = yt;
        try {
          if (((Rl.transition = null), (yt = 1), e)) return e();
        } finally {
          (yt = i), (Rl.transition = n), 0 === (6 & (Cl = t)) && Hr();
        }
      }
      function hc() {
        (Dl = Ul.current), Tr(Ul);
      }
      function pc(e, t) {
        (e.finishedWork = null), (e.finishedLanes = 0);
        var n = e.timeoutHandle;
        if ((-1 !== n && ((e.timeoutHandle = -1), rr(n)), null !== Ll))
          for (n = Ll.return; null !== n;) {
            var i = n;
            switch ((ta(i), i.tag)) {
              case 1:
                null !== (i = i.type.childContextTypes) &&
                  void 0 !== i &&
                  Dr();
                break;
              case 3:
                ro(), Tr(Cr), Tr(Rr), uo();
                break;
              case 5:
                oo(i);
                break;
              case 4:
                ro();
                break;
              case 13:
              case 19:
                Tr(so);
                break;
              case 10:
                Sa(i.type._context);
                break;
              case 22:
              case 23:
                hc();
            }
            n = n.return;
          }
        if (
          ((Pl = e),
            (Ll = e = Uc(e.current, null)),
            (Nl = Dl = t),
            (Il = 0),
            (Ol = null),
            (zl = Fl = kl = 0),
            (Vl = Bl = null),
            null !== wa)
        ) {
          for (t = 0; t < wa.length; t++)
            if (null !== (i = (n = wa[t]).interleaved)) {
              n.interleaved = null;
              var r = i.next,
                a = n.pending;
              if (null !== a) {
                var o = a.next;
                (a.next = r), (i.next = o);
              }
              n.pending = i;
            }
          wa = null;
        }
        return e;
      }
      function fc(e, t) {
        for (; ;) {
          var n = Ll;
          try {
            if ((ba(), (ho.current = os), _o)) {
              for (var i = mo.memoizedState; null !== i;) {
                var r = i.queue;
                null !== r && (r.pending = null), (i = i.next);
              }
              _o = !1;
            }
            if (
              ((fo = 0),
                (vo = go = mo = null),
                (yo = !1),
                (xo = 0),
                (Al.current = null),
                null === n || null === n.return)
            ) {
              (Il = 1), (Ol = t), (Ll = null);
              break;
            }
            e: {
              var o = e,
                s = n.return,
                l = n,
                c = t;
              if (
                ((t = Nl),
                  (l.flags |= 32768),
                  null !== c &&
                  "object" === typeof c &&
                  "function" === typeof c.then)
              ) {
                var u = c,
                  d = l,
                  h = d.tag;
                if (0 === (1 & d.mode) && (0 === h || 11 === h || 15 === h)) {
                  var p = d.alternate;
                  p
                    ? ((d.updateQueue = p.updateQueue),
                      (d.memoizedState = p.memoizedState),
                      (d.lanes = p.lanes))
                    : ((d.updateQueue = null), (d.memoizedState = null));
                }
                var f = vs(s);
                if (null !== f) {
                  (f.flags &= -257),
                    _s(f, s, l, 0, t),
                    1 & f.mode && gs(o, u, t),
                    (c = u);
                  var m = (t = f).updateQueue;
                  if (null === m) {
                    var g = new Set();
                    g.add(c), (t.updateQueue = g);
                  } else m.add(c);
                  break e;
                }
                if (0 === (1 & t)) {
                  gs(o, u, t), gc();
                  break e;
                }
                c = Error(a(426));
              } else if (ra && 1 & l.mode) {
                var v = vs(s);
                if (null !== v) {
                  0 === (65536 & v.flags) && (v.flags |= 256),
                    _s(v, s, l, 0, t),
                    fa(us(c, l));
                  break e;
                }
              }
              (o = c = us(c, l)),
                4 !== Il && (Il = 2),
                null === Bl ? (Bl = [o]) : Bl.push(o),
                (o = s);
              do {
                switch (o.tag) {
                  case 3:
                    (o.flags |= 65536),
                      (t &= -t),
                      (o.lanes |= t),
                      Oa(o, fs(0, c, t));
                    break e;
                  case 1:
                    l = c;
                    var _ = o.type,
                      y = o.stateNode;
                    if (
                      0 === (128 & o.flags) &&
                      ("function" === typeof _.getDerivedStateFromError ||
                        (null !== y &&
                          "function" === typeof y.componentDidCatch &&
                          (null === Yl || !Yl.has(y))))
                    ) {
                      (o.flags |= 65536),
                        (t &= -t),
                        (o.lanes |= t),
                        Oa(o, ms(o, l, t));
                      break e;
                    }
                }
                o = o.return;
              } while (null !== o);
            }
            bc(n);
          } catch (x) {
            (t = x), Ll === n && null !== n && (Ll = n = n.return);
            continue;
          }
          break;
        }
      }
      function mc() {
        var e = wl.current;
        return (wl.current = os), null === e ? os : e;
      }
      function gc() {
        (0 !== Il && 3 !== Il && 2 !== Il) || (Il = 4),
          null === Pl ||
          (0 === (268435455 & kl) && 0 === (268435455 & Fl)) ||
          lc(Pl, Nl);
      }
      function vc(e, t) {
        var n = Cl;
        Cl |= 2;
        var i = mc();
        for ((Pl === e && Nl === t) || ((Wl = null), pc(e, t)); ;)
          try {
            _c();
            break;
          } catch (r) {
            fc(e, r);
          }
        if ((ba(), (Cl = n), (wl.current = i), null !== Ll))
          throw Error(a(261));
        return (Pl = null), (Nl = 0), Il;
      }
      function _c() {
        for (; null !== Ll;) xc(Ll);
      }
      function yc() {
        for (; null !== Ll && !Ke();) xc(Ll);
      }
      function xc(e) {
        var t = Ml(e.alternate, e, Dl);
        (e.memoizedProps = e.pendingProps),
          null === t ? bc(e) : (Ll = t),
          (Al.current = null);
      }
      function bc(e) {
        var t = e;
        do {
          var n = t.alternate;
          if (((e = t.return), 0 === (32768 & t.flags))) {
            if (null !== (n = qs(n, t, Dl))) return void (Ll = n);
          } else {
            if (null !== (n = Ks(n, t)))
              return (n.flags &= 32767), void (Ll = n);
            if (null === e) return (Il = 6), void (Ll = null);
            (e.flags |= 32768), (e.subtreeFlags = 0), (e.deletions = null);
          }
          if (null !== (t = t.sibling)) return void (Ll = t);
          Ll = t = e;
        } while (null !== t);
        0 === Il && (Il = 5);
      }
      function Sc(e, t, n) {
        var i = yt,
          r = Rl.transition;
        try {
          (Rl.transition = null),
            (yt = 1),
            (function (e, t, n, i) {
              do {
                Ec();
              } while (null !== Kl);
              if (0 !== (6 & Cl)) throw Error(a(327));
              n = e.finishedWork;
              var r = e.finishedLanes;
              if (null === n) return null;
              if (
                ((e.finishedWork = null),
                  (e.finishedLanes = 0),
                  n === e.current)
              )
                throw Error(a(177));
              (e.callbackNode = null), (e.callbackPriority = 0);
              var o = n.lanes | n.childLanes;
              if (
                ((function (e, t) {
                  var n = e.pendingLanes & ~t;
                  (e.pendingLanes = t),
                    (e.suspendedLanes = 0),
                    (e.pingedLanes = 0),
                    (e.expiredLanes &= t),
                    (e.mutableReadLanes &= t),
                    (e.entangledLanes &= t),
                    (t = e.entanglements);
                  var i = e.eventTimes;
                  for (e = e.expirationTimes; 0 < n;) {
                    var r = 31 - ot(n),
                      a = 1 << r;
                    (t[r] = 0), (i[r] = -1), (e[r] = -1), (n &= ~a);
                  }
                })(e, o),
                  e === Pl && ((Ll = Pl = null), (Nl = 0)),
                  (0 === (2064 & n.subtreeFlags) && 0 === (2064 & n.flags)) ||
                  ql ||
                  ((ql = !0),
                    Pc(tt, function () {
                      return Ec(), null;
                    })),
                  (o = 0 !== (15990 & n.flags)),
                  0 !== (15990 & n.subtreeFlags) || o)
              ) {
                (o = Rl.transition), (Rl.transition = null);
                var s = yt;
                yt = 1;
                var l = Cl;
                (Cl |= 4),
                  (Al.current = null),
                  (function (e, t) {
                    if (((er = Wt), pi((e = hi())))) {
                      if ("selectionStart" in e)
                        var n = {
                          start: e.selectionStart,
                          end: e.selectionEnd,
                        };
                      else
                        e: {
                          var i =
                            (n =
                              ((n = e.ownerDocument) && n.defaultView) ||
                              window).getSelection && n.getSelection();
                          if (i && 0 !== i.rangeCount) {
                            n = i.anchorNode;
                            var r = i.anchorOffset,
                              o = i.focusNode;
                            i = i.focusOffset;
                            try {
                              n.nodeType, o.nodeType;
                            } catch (b) {
                              n = null;
                              break e;
                            }
                            var s = 0,
                              l = -1,
                              c = -1,
                              u = 0,
                              d = 0,
                              h = e,
                              p = null;
                            t: for (; ;) {
                              for (
                                var f;
                                h !== n ||
                                (0 !== r && 3 !== h.nodeType) ||
                                (l = s + r),
                                h !== o ||
                                (0 !== i && 3 !== h.nodeType) ||
                                (c = s + i),
                                3 === h.nodeType &&
                                (s += h.nodeValue.length),
                                null !== (f = h.firstChild);

                              )
                                (p = h), (h = f);
                              for (; ;) {
                                if (h === e) break t;
                                if (
                                  (p === n && ++u === r && (l = s),
                                    p === o && ++d === i && (c = s),
                                    null !== (f = h.nextSibling))
                                )
                                  break;
                                p = (h = p).parentNode;
                              }
                              h = f;
                            }
                            n =
                              -1 === l || -1 === c
                                ? null
                                : { start: l, end: c };
                          } else n = null;
                        }
                      n = n || { start: 0, end: 0 };
                    } else n = null;
                    for (
                      tr = { focusedElem: e, selectionRange: n },
                      Wt = !1,
                      $s = t;
                      null !== $s;

                    )
                      if (
                        ((e = (t = $s).child),
                          0 !== (1028 & t.subtreeFlags) && null !== e)
                      )
                        (e.return = t), ($s = e);
                      else
                        for (; null !== $s;) {
                          t = $s;
                          try {
                            var m = t.alternate;
                            if (0 !== (1024 & t.flags))
                              switch (t.tag) {
                                case 0:
                                case 11:
                                case 15:
                                case 5:
                                case 6:
                                case 4:
                                case 17:
                                  break;
                                case 1:
                                  if (null !== m) {
                                    var g = m.memoizedProps,
                                      v = m.memoizedState,
                                      _ = t.stateNode,
                                      y = _.getSnapshotBeforeUpdate(
                                        t.elementType === t.type
                                          ? g
                                          : ga(t.type, g),
                                        v
                                      );
                                    _.__reactInternalSnapshotBeforeUpdate = y;
                                  }
                                  break;
                                case 3:
                                  var x = t.stateNode.containerInfo;
                                  1 === x.nodeType
                                    ? (x.textContent = "")
                                    : 9 === x.nodeType &&
                                    x.documentElement &&
                                    x.removeChild(x.documentElement);
                                  break;
                                default:
                                  throw Error(a(163));
                              }
                          } catch (b) {
                            Tc(t, t.return, b);
                          }
                          if (null !== (e = t.sibling)) {
                            (e.return = t.return), ($s = e);
                            break;
                          }
                          $s = t.return;
                        }
                    (m = nl), (nl = !1);
                  })(e, n),
                  vl(n, e),
                  fi(tr),
                  (Wt = !!er),
                  (tr = er = null),
                  (e.current = n),
                  yl(n, e, r),
                  Ze(),
                  (Cl = l),
                  (yt = s),
                  (Rl.transition = o);
              } else e.current = n;
              if (
                (ql && ((ql = !1), (Kl = e), (Zl = r)),
                  (o = e.pendingLanes),
                  0 === o && (Yl = null),
                  (function (e) {
                    if (at && "function" === typeof at.onCommitFiberRoot)
                      try {
                        at.onCommitFiberRoot(
                          rt,
                          e,
                          void 0,
                          128 === (128 & e.current.flags)
                        );
                      } catch (t) { }
                  })(n.stateNode),
                  rc(e, Je()),
                  null !== t)
              )
                for (i = e.onRecoverableError, n = 0; n < t.length; n++)
                  (r = t[n]),
                    i(r.value, { componentStack: r.stack, digest: r.digest });
              if (jl) throw ((jl = !1), (e = Xl), (Xl = null), e);
              0 !== (1 & Zl) && 0 !== e.tag && Ec(),
                (o = e.pendingLanes),
                0 !== (1 & o)
                  ? e === Ql
                    ? Jl++
                    : ((Jl = 0), (Ql = e))
                  : (Jl = 0),
                Hr();
            })(e, t, n, i);
        } finally {
          (Rl.transition = r), (yt = i);
        }
        return null;
      }
      function Ec() {
        if (null !== Kl) {
          var e = xt(Zl),
            t = Rl.transition,
            n = yt;
          try {
            if (((Rl.transition = null), (yt = 16 > e ? 16 : e), null === Kl))
              var i = !1;
            else {
              if (((e = Kl), (Kl = null), (Zl = 0), 0 !== (6 & Cl)))
                throw Error(a(331));
              var r = Cl;
              for (Cl |= 4, $s = e.current; null !== $s;) {
                var o = $s,
                  s = o.child;
                if (0 !== (16 & $s.flags)) {
                  var l = o.deletions;
                  if (null !== l) {
                    for (var c = 0; c < l.length; c++) {
                      var u = l[c];
                      for ($s = u; null !== $s;) {
                        var d = $s;
                        switch (d.tag) {
                          case 0:
                          case 11:
                          case 15:
                            il(8, d, o);
                        }
                        var h = d.child;
                        if (null !== h) (h.return = d), ($s = h);
                        else
                          for (; null !== $s;) {
                            var p = (d = $s).sibling,
                              f = d.return;
                            if ((ol(d), d === u)) {
                              $s = null;
                              break;
                            }
                            if (null !== p) {
                              (p.return = f), ($s = p);
                              break;
                            }
                            $s = f;
                          }
                      }
                    }
                    var m = o.alternate;
                    if (null !== m) {
                      var g = m.child;
                      if (null !== g) {
                        m.child = null;
                        do {
                          var v = g.sibling;
                          (g.sibling = null), (g = v);
                        } while (null !== g);
                      }
                    }
                    $s = o;
                  }
                }
                if (0 !== (2064 & o.subtreeFlags) && null !== s)
                  (s.return = o), ($s = s);
                else
                  e: for (; null !== $s;) {
                    if (0 !== (2048 & (o = $s).flags))
                      switch (o.tag) {
                        case 0:
                        case 11:
                        case 15:
                          il(9, o, o.return);
                      }
                    var _ = o.sibling;
                    if (null !== _) {
                      (_.return = o.return), ($s = _);
                      break e;
                    }
                    $s = o.return;
                  }
              }
              var y = e.current;
              for ($s = y; null !== $s;) {
                var x = (s = $s).child;
                if (0 !== (2064 & s.subtreeFlags) && null !== x)
                  (x.return = s), ($s = x);
                else
                  e: for (s = y; null !== $s;) {
                    if (0 !== (2048 & (l = $s).flags))
                      try {
                        switch (l.tag) {
                          case 0:
                          case 11:
                          case 15:
                            rl(9, l);
                        }
                      } catch (S) {
                        Tc(l, l.return, S);
                      }
                    if (l === s) {
                      $s = null;
                      break e;
                    }
                    var b = l.sibling;
                    if (null !== b) {
                      (b.return = l.return), ($s = b);
                      break e;
                    }
                    $s = l.return;
                  }
              }
              if (
                ((Cl = r),
                  Hr(),
                  at && "function" === typeof at.onPostCommitFiberRoot)
              )
                try {
                  at.onPostCommitFiberRoot(rt, e);
                } catch (S) { }
              i = !0;
            }
            return i;
          } finally {
            (yt = n), (Rl.transition = t);
          }
        }
        return !1;
      }
      function Mc(e, t, n) {
        (e = Ua(e, (t = fs(0, (t = us(n, t)), 1)), 1)),
          (t = tc()),
          null !== e && (vt(e, 1, t), rc(e, t));
      }
      function Tc(e, t, n) {
        if (3 === e.tag) Mc(e, e, n);
        else
          for (; null !== t;) {
            if (3 === t.tag) {
              Mc(t, e, n);
              break;
            }
            if (1 === t.tag) {
              var i = t.stateNode;
              if (
                "function" === typeof t.type.getDerivedStateFromError ||
                ("function" === typeof i.componentDidCatch &&
                  (null === Yl || !Yl.has(i)))
              ) {
                (t = Ua(t, (e = ms(t, (e = us(n, e)), 1)), 1)),
                  (e = tc()),
                  null !== t && (vt(t, 1, e), rc(t, e));
                break;
              }
            }
            t = t.return;
          }
      }
      function wc(e, t, n) {
        var i = e.pingCache;
        null !== i && i.delete(t),
          (t = tc()),
          (e.pingedLanes |= e.suspendedLanes & n),
          Pl === e &&
          (Nl & n) === n &&
          (4 === Il ||
            (3 === Il && (130023424 & Nl) === Nl && 500 > Je() - Hl)
            ? pc(e, 0)
            : (zl |= n)),
          rc(e, t);
      }
      function Ac(e, t) {
        0 === t &&
          (0 === (1 & e.mode)
            ? (t = 1)
            : ((t = ut), 0 === (130023424 & (ut <<= 1)) && (ut = 4194304)));
        var n = tc();
        null !== (e = Ca(e, t)) && (vt(e, t, n), rc(e, n));
      }
      function Rc(e) {
        var t = e.memoizedState,
          n = 0;
        null !== t && (n = t.retryLane), Ac(e, n);
      }
      function Cc(e, t) {
        var n = 0;
        switch (e.tag) {
          case 13:
            var i = e.stateNode,
              r = e.memoizedState;
            null !== r && (n = r.retryLane);
            break;
          case 19:
            i = e.stateNode;
            break;
          default:
            throw Error(a(314));
        }
        null !== i && i.delete(t), Ac(e, n);
      }
      function Pc(e, t) {
        return Ye(e, t);
      }
      function Lc(e, t, n, i) {
        (this.tag = e),
          (this.key = n),
          (this.sibling =
            this.child =
            this.return =
            this.stateNode =
            this.type =
            this.elementType =
            null),
          (this.index = 0),
          (this.ref = null),
          (this.pendingProps = t),
          (this.dependencies =
            this.memoizedState =
            this.updateQueue =
            this.memoizedProps =
            null),
          (this.mode = i),
          (this.subtreeFlags = this.flags = 0),
          (this.deletions = null),
          (this.childLanes = this.lanes = 0),
          (this.alternate = null);
      }
      function Nc(e, t, n, i) {
        return new Lc(e, t, n, i);
      }
      function Dc(e) {
        return !(!(e = e.prototype) || !e.isReactComponent);
      }
      function Uc(e, t) {
        var n = e.alternate;
        return (
          null === n
            ? (((n = Nc(e.tag, t, e.key, e.mode)).elementType =
              e.elementType),
              (n.type = e.type),
              (n.stateNode = e.stateNode),
              (n.alternate = e),
              (e.alternate = n))
            : ((n.pendingProps = t),
              (n.type = e.type),
              (n.flags = 0),
              (n.subtreeFlags = 0),
              (n.deletions = null)),
          (n.flags = 14680064 & e.flags),
          (n.childLanes = e.childLanes),
          (n.lanes = e.lanes),
          (n.child = e.child),
          (n.memoizedProps = e.memoizedProps),
          (n.memoizedState = e.memoizedState),
          (n.updateQueue = e.updateQueue),
          (t = e.dependencies),
          (n.dependencies =
            null === t
              ? null
              : { lanes: t.lanes, firstContext: t.firstContext }),
          (n.sibling = e.sibling),
          (n.index = e.index),
          (n.ref = e.ref),
          n
        );
      }
      function Ic(e, t, n, i, r, o) {
        var s = 2;
        if (((i = e), "function" === typeof e)) Dc(e) && (s = 1);
        else if ("string" === typeof e) s = 5;
        else
          e: switch (e) {
            case E:
              return Oc(n.children, r, o, t);
            case M:
              (s = 8), (r |= 8);
              break;
            case T:
              return (
                ((e = Nc(12, n, t, 2 | r)).elementType = T), (e.lanes = o), e
              );
            case C:
              return (
                ((e = Nc(13, n, t, r)).elementType = C), (e.lanes = o), e
              );
            case P:
              return (
                ((e = Nc(19, n, t, r)).elementType = P), (e.lanes = o), e
              );
            case D:
              return kc(n, r, o, t);
            default:
              if ("object" === typeof e && null !== e)
                switch (e.$$typeof) {
                  case w:
                    s = 10;
                    break e;
                  case A:
                    s = 9;
                    break e;
                  case R:
                    s = 11;
                    break e;
                  case L:
                    s = 14;
                    break e;
                  case N:
                    (s = 16), (i = null);
                    break e;
                }
              throw Error(a(130, null == e ? e : typeof e, ""));
          }
        return (
          ((t = Nc(s, n, t, r)).elementType = e),
          (t.type = i),
          (t.lanes = o),
          t
        );
      }
      function Oc(e, t, n, i) {
        return ((e = Nc(7, e, i, t)).lanes = n), e;
      }
      function kc(e, t, n, i) {
        return (
          ((e = Nc(22, e, i, t)).elementType = D),
          (e.lanes = n),
          (e.stateNode = { isHidden: !1 }),
          e
        );
      }
      function Fc(e, t, n) {
        return ((e = Nc(6, e, null, t)).lanes = n), e;
      }
      function zc(e, t, n) {
        return (
          ((t = Nc(
            4,
            null !== e.children ? e.children : [],
            e.key,
            t
          )).lanes = n),
          (t.stateNode = {
            containerInfo: e.containerInfo,
            pendingChildren: null,
            implementation: e.implementation,
          }),
          t
        );
      }
      function Bc(e, t, n, i, r) {
        (this.tag = t),
          (this.containerInfo = e),
          (this.finishedWork =
            this.pingCache =
            this.current =
            this.pendingChildren =
            null),
          (this.timeoutHandle = -1),
          (this.callbackNode = this.pendingContext = this.context = null),
          (this.callbackPriority = 0),
          (this.eventTimes = gt(0)),
          (this.expirationTimes = gt(-1)),
          (this.entangledLanes =
            this.finishedLanes =
            this.mutableReadLanes =
            this.expiredLanes =
            this.pingedLanes =
            this.suspendedLanes =
            this.pendingLanes =
            0),
          (this.entanglements = gt(0)),
          (this.identifierPrefix = i),
          (this.onRecoverableError = r),
          (this.mutableSourceEagerHydrationData = null);
      }
      function Vc(e, t, n, i, r, a, o, s, l) {
        return (
          (e = new Bc(e, t, n, s, l)),
          1 === t ? ((t = 1), !0 === a && (t |= 8)) : (t = 0),
          (a = Nc(3, null, null, t)),
          (e.current = a),
          (a.stateNode = e),
          (a.memoizedState = {
            element: i,
            isDehydrated: n,
            cache: null,
            transitions: null,
            pendingSuspenseBoundaries: null,
          }),
          La(a),
          e
        );
      }
      function Hc(e) {
        if (!e) return Ar;
        e: {
          if (He((e = e._reactInternals)) !== e || 1 !== e.tag)
            throw Error(a(170));
          var t = e;
          do {
            switch (t.tag) {
              case 3:
                t = t.stateNode.context;
                break e;
              case 1:
                if (Nr(t.type)) {
                  t = t.stateNode.__reactInternalMemoizedMergedChildContext;
                  break e;
                }
            }
            t = t.return;
          } while (null !== t);
          throw Error(a(171));
        }
        if (1 === e.tag) {
          var n = e.type;
          if (Nr(n)) return Ir(e, n, t);
        }
        return t;
      }
      function Gc(e, t, n, i, r, a, o, s, l) {
        return (
          ((e = Vc(n, i, !0, e, 0, a, 0, s, l)).context = Hc(null)),
          (n = e.current),
          ((a = Da((i = tc()), (r = nc(n)))).callback =
            void 0 !== t && null !== t ? t : null),
          Ua(n, a, r),
          (e.current.lanes = r),
          vt(e, r, i),
          rc(e, i),
          e
        );
      }
      function Wc(e, t, n, i) {
        var r = t.current,
          a = tc(),
          o = nc(r);
        return (
          (n = Hc(n)),
          null === t.context ? (t.context = n) : (t.pendingContext = n),
          ((t = Da(a, o)).payload = { element: e }),
          null !== (i = void 0 === i ? null : i) && (t.callback = i),
          null !== (e = Ua(r, t, o)) && (ic(e, r, o, a), Ia(e, r, o)),
          o
        );
      }
      function jc(e) {
        return (e = e.current).child
          ? (e.child.tag, e.child.stateNode)
          : null;
      }
      function Xc(e, t) {
        if (null !== (e = e.memoizedState) && null !== e.dehydrated) {
          var n = e.retryLane;
          e.retryLane = 0 !== n && n < t ? n : t;
        }
      }
      function Yc(e, t) {
        Xc(e, t), (e = e.alternate) && Xc(e, t);
      }
      Ml = function (e, t, n) {
        if (null !== e)
          if (e.memoizedProps !== t.pendingProps || Cr.current) xs = !0;
          else {
            if (0 === (e.lanes & n) && 0 === (128 & t.flags))
              return (
                (xs = !1),
                (function (e, t, n) {
                  switch (t.tag) {
                    case 3:
                      Ps(t), pa();
                      break;
                    case 5:
                      ao(t);
                      break;
                    case 1:
                      Nr(t.type) && Or(t);
                      break;
                    case 4:
                      io(t, t.stateNode.containerInfo);
                      break;
                    case 10:
                      var i = t.type._context,
                        r = t.memoizedProps.value;
                      wr(va, i._currentValue), (i._currentValue = r);
                      break;
                    case 13:
                      if (null !== (i = t.memoizedState))
                        return null !== i.dehydrated
                          ? (wr(so, 1 & so.current), (t.flags |= 128), null)
                          : 0 !== (n & t.child.childLanes)
                            ? Fs(e, t, n)
                            : (wr(so, 1 & so.current),
                              null !== (e = js(e, t, n)) ? e.sibling : null);
                      wr(so, 1 & so.current);
                      break;
                    case 19:
                      if (
                        ((i = 0 !== (n & t.childLanes)),
                          0 !== (128 & e.flags))
                      ) {
                        if (i) return Gs(e, t, n);
                        t.flags |= 128;
                      }
                      if (
                        (null !== (r = t.memoizedState) &&
                          ((r.rendering = null),
                            (r.tail = null),
                            (r.lastEffect = null)),
                          wr(so, so.current),
                          i)
                      )
                        break;
                      return null;
                    case 22:
                    case 23:
                      return (t.lanes = 0), Ts(e, t, n);
                  }
                  return js(e, t, n);
                })(e, t, n)
              );
            xs = 0 !== (131072 & e.flags);
          }
        else (xs = !1), ra && 0 !== (1048576 & t.flags) && $r(t, Xr, t.index);
        switch (((t.lanes = 0), t.tag)) {
          case 2:
            var i = t.type;
            Ws(e, t), (e = t.pendingProps);
            var r = Lr(t, Rr.current);
            Ma(t, n), (r = Mo(null, t, i, e, r, n));
            var o = To();
            return (
              (t.flags |= 1),
              "object" === typeof r &&
                null !== r &&
                "function" === typeof r.render &&
                void 0 === r.$$typeof
                ? ((t.tag = 1),
                  (t.memoizedState = null),
                  (t.updateQueue = null),
                  Nr(i) ? ((o = !0), Or(t)) : (o = !1),
                  (t.memoizedState =
                    null !== r.state && void 0 !== r.state ? r.state : null),
                  La(t),
                  (r.updater = Va),
                  (t.stateNode = r),
                  (r._reactInternals = t),
                  ja(t, i, e, n),
                  (t = Cs(null, t, i, !0, o, n)))
                : ((t.tag = 0),
                  ra && o && ea(t),
                  bs(null, t, r, n),
                  (t = t.child)),
              t
            );
          case 16:
            i = t.elementType;
            e: {
              switch (
              (Ws(e, t),
                (e = t.pendingProps),
                (i = (r = i._init)(i._payload)),
                (t.type = i),
                (r = t.tag =
                  (function (e) {
                    if ("function" === typeof e) return Dc(e) ? 1 : 0;
                    if (void 0 !== e && null !== e) {
                      if ((e = e.$$typeof) === R) return 11;
                      if (e === L) return 14;
                    }
                    return 2;
                  })(i)),
                (e = ga(i, e)),
                r)
              ) {
                case 0:
                  t = As(null, t, i, e, n);
                  break e;
                case 1:
                  t = Rs(null, t, i, e, n);
                  break e;
                case 11:
                  t = Ss(null, t, i, e, n);
                  break e;
                case 14:
                  t = Es(null, t, i, ga(i.type, e), n);
                  break e;
              }
              throw Error(a(306, i, ""));
            }
            return t;
          case 0:
            return (
              (i = t.type),
              (r = t.pendingProps),
              As(e, t, i, (r = t.elementType === i ? r : ga(i, r)), n)
            );
          case 1:
            return (
              (i = t.type),
              (r = t.pendingProps),
              Rs(e, t, i, (r = t.elementType === i ? r : ga(i, r)), n)
            );
          case 3:
            e: {
              if ((Ps(t), null === e)) throw Error(a(387));
              (i = t.pendingProps),
                (r = (o = t.memoizedState).element),
                Na(e, t),
                ka(t, i, null, n);
              var s = t.memoizedState;
              if (((i = s.element), o.isDehydrated)) {
                if (
                  ((o = {
                    element: i,
                    isDehydrated: !1,
                    cache: s.cache,
                    pendingSuspenseBoundaries: s.pendingSuspenseBoundaries,
                    transitions: s.transitions,
                  }),
                    (t.updateQueue.baseState = o),
                    (t.memoizedState = o),
                    256 & t.flags)
                ) {
                  t = Ls(e, t, i, n, (r = us(Error(a(423)), t)));
                  break e;
                }
                if (i !== r) {
                  t = Ls(e, t, i, n, (r = us(Error(a(424)), t)));
                  break e;
                }
                for (
                  ia = cr(t.stateNode.containerInfo.firstChild),
                  na = t,
                  ra = !0,
                  aa = null,
                  n = Ja(t, null, i, n),
                  t.child = n;
                  n;

                )
                  (n.flags = (-3 & n.flags) | 4096), (n = n.sibling);
              } else {
                if ((pa(), i === r)) {
                  t = js(e, t, n);
                  break e;
                }
                bs(e, t, i, n);
              }
              t = t.child;
            }
            return t;
          case 5:
            return (
              ao(t),
              null === e && ca(t),
              (i = t.type),
              (r = t.pendingProps),
              (o = null !== e ? e.memoizedProps : null),
              (s = r.children),
              nr(i, r)
                ? (s = null)
                : null !== o && nr(i, o) && (t.flags |= 32),
              ws(e, t),
              bs(e, t, s, n),
              t.child
            );
          case 6:
            return null === e && ca(t), null;
          case 13:
            return Fs(e, t, n);
          case 4:
            return (
              io(t, t.stateNode.containerInfo),
              (i = t.pendingProps),
              null === e ? (t.child = Za(t, null, i, n)) : bs(e, t, i, n),
              t.child
            );
          case 11:
            return (
              (i = t.type),
              (r = t.pendingProps),
              Ss(e, t, i, (r = t.elementType === i ? r : ga(i, r)), n)
            );
          case 7:
            return bs(e, t, t.pendingProps, n), t.child;
          case 8:
          case 12:
            return bs(e, t, t.pendingProps.children, n), t.child;
          case 10:
            e: {
              if (
                ((i = t.type._context),
                  (r = t.pendingProps),
                  (o = t.memoizedProps),
                  (s = r.value),
                  wr(va, i._currentValue),
                  (i._currentValue = s),
                  null !== o)
              )
                if (si(o.value, s)) {
                  if (o.children === r.children && !Cr.current) {
                    t = js(e, t, n);
                    break e;
                  }
                } else
                  for (
                    null !== (o = t.child) && (o.return = t);
                    null !== o;

                  ) {
                    var l = o.dependencies;
                    if (null !== l) {
                      s = o.child;
                      for (var c = l.firstContext; null !== c;) {
                        if (c.context === i) {
                          if (1 === o.tag) {
                            (c = Da(-1, n & -n)).tag = 2;
                            var u = o.updateQueue;
                            if (null !== u) {
                              var d = (u = u.shared).pending;
                              null === d
                                ? (c.next = c)
                                : ((c.next = d.next), (d.next = c)),
                                (u.pending = c);
                            }
                          }
                          (o.lanes |= n),
                            null !== (c = o.alternate) && (c.lanes |= n),
                            Ea(o.return, n, t),
                            (l.lanes |= n);
                          break;
                        }
                        c = c.next;
                      }
                    } else if (10 === o.tag)
                      s = o.type === t.type ? null : o.child;
                    else if (18 === o.tag) {
                      if (null === (s = o.return)) throw Error(a(341));
                      (s.lanes |= n),
                        null !== (l = s.alternate) && (l.lanes |= n),
                        Ea(s, n, t),
                        (s = o.sibling);
                    } else s = o.child;
                    if (null !== s) s.return = o;
                    else
                      for (s = o; null !== s;) {
                        if (s === t) {
                          s = null;
                          break;
                        }
                        if (null !== (o = s.sibling)) {
                          (o.return = s.return), (s = o);
                          break;
                        }
                        s = s.return;
                      }
                    o = s;
                  }
              bs(e, t, r.children, n), (t = t.child);
            }
            return t;
          case 9:
            return (
              (r = t.type),
              (i = t.pendingProps.children),
              Ma(t, n),
              (i = i((r = Ta(r)))),
              (t.flags |= 1),
              bs(e, t, i, n),
              t.child
            );
          case 14:
            return (
              (r = ga((i = t.type), t.pendingProps)),
              Es(e, t, i, (r = ga(i.type, r)), n)
            );
          case 15:
            return Ms(e, t, t.type, t.pendingProps, n);
          case 17:
            return (
              (i = t.type),
              (r = t.pendingProps),
              (r = t.elementType === i ? r : ga(i, r)),
              Ws(e, t),
              (t.tag = 1),
              Nr(i) ? ((e = !0), Or(t)) : (e = !1),
              Ma(t, n),
              Ga(t, i, r),
              ja(t, i, r, n),
              Cs(null, t, i, !0, e, n)
            );
          case 19:
            return Gs(e, t, n);
          case 22:
            return Ts(e, t, n);
        }
        throw Error(a(156, t.tag));
      };
      var qc =
        "function" === typeof reportError
          ? reportError
          : function (e) {
            console.error(e);
          };
      function Kc(e) {
        this._internalRoot = e;
      }
      function Zc(e) {
        this._internalRoot = e;
      }
      function Jc(e) {
        return !(
          !e ||
          (1 !== e.nodeType && 9 !== e.nodeType && 11 !== e.nodeType)
        );
      }
      function Qc(e) {
        return !(
          !e ||
          (1 !== e.nodeType &&
            9 !== e.nodeType &&
            11 !== e.nodeType &&
            (8 !== e.nodeType ||
              " react-mount-point-unstable " !== e.nodeValue))
        );
      }
      function $c() { }
      function eu(e, t, n, i, r) {
        var a = n._reactRootContainer;
        if (a) {
          var o = a;
          if ("function" === typeof r) {
            var s = r;
            r = function () {
              var e = jc(o);
              s.call(e);
            };
          }
          Wc(t, o, e, r);
        } else
          o = (function (e, t, n, i, r) {
            if (r) {
              if ("function" === typeof i) {
                var a = i;
                i = function () {
                  var e = jc(o);
                  a.call(e);
                };
              }
              var o = Gc(t, i, e, 0, null, !1, 0, "", $c);
              return (
                (e._reactRootContainer = o),
                (e[fr] = o.current),
                Hi(8 === e.nodeType ? e.parentNode : e),
                dc(),
                o
              );
            }
            for (; (r = e.lastChild);) e.removeChild(r);
            if ("function" === typeof i) {
              var s = i;
              i = function () {
                var e = jc(l);
                s.call(e);
              };
            }
            var l = Vc(e, 0, !1, null, 0, !1, 0, "", $c);
            return (
              (e._reactRootContainer = l),
              (e[fr] = l.current),
              Hi(8 === e.nodeType ? e.parentNode : e),
              dc(function () {
                Wc(t, l, n, i);
              }),
              l
            );
          })(n, t, e, r, i);
        return jc(o);
      }
      (Zc.prototype.render = Kc.prototype.render =
        function (e) {
          var t = this._internalRoot;
          if (null === t) throw Error(a(409));
          Wc(e, t, null, null);
        }),
        (Zc.prototype.unmount = Kc.prototype.unmount =
          function () {
            var e = this._internalRoot;
            if (null !== e) {
              this._internalRoot = null;
              var t = e.containerInfo;
              dc(function () {
                Wc(null, e, null, null);
              }),
                (t[fr] = null);
            }
          }),
        (Zc.prototype.unstable_scheduleHydration = function (e) {
          if (e) {
            var t = Mt();
            e = { blockedOn: null, target: e, priority: t };
            for (
              var n = 0;
              n < Dt.length && 0 !== t && t < Dt[n].priority;
              n++
            );
            Dt.splice(n, 0, e), 0 === n && kt(e);
          }
        }),
        (bt = function (e) {
          switch (e.tag) {
            case 3:
              var t = e.stateNode;
              if (t.current.memoizedState.isDehydrated) {
                var n = dt(t.pendingLanes);
                0 !== n &&
                  (_t(t, 1 | n),
                    rc(t, Je()),
                    0 === (6 & Cl) && ((Gl = Je() + 500), Hr()));
              }
              break;
            case 13:
              dc(function () {
                var t = Ca(e, 1);
                if (null !== t) {
                  var n = tc();
                  ic(t, e, 1, n);
                }
              }),
                Yc(e, 1);
          }
        }),
        (St = function (e) {
          if (13 === e.tag) {
            var t = Ca(e, 134217728);
            if (null !== t) ic(t, e, 134217728, tc());
            Yc(e, 134217728);
          }
        }),
        (Et = function (e) {
          if (13 === e.tag) {
            var t = nc(e),
              n = Ca(e, t);
            if (null !== n) ic(n, e, t, tc());
            Yc(e, t);
          }
        }),
        (Mt = function () {
          return yt;
        }),
        (Tt = function (e, t) {
          var n = yt;
          try {
            return (yt = e), t();
          } finally {
            yt = n;
          }
        }),
        (Se = function (e, t, n) {
          switch (t) {
            case "input":
              if ((Q(e, n), (t = n.name), "radio" === n.type && null != t)) {
                for (n = e; n.parentNode;) n = n.parentNode;
                for (
                  n = n.querySelectorAll(
                    "input[name=" + JSON.stringify("" + t) + '][type="radio"]'
                  ),
                  t = 0;
                  t < n.length;
                  t++
                ) {
                  var i = n[t];
                  if (i !== e && i.form === e.form) {
                    var r = br(i);
                    if (!r) throw Error(a(90));
                    Y(i), Q(i, r);
                  }
                }
              }
              break;
            case "textarea":
              ae(e, n);
              break;
            case "select":
              null != (t = n.value) && ne(e, !!n.multiple, t, !1);
          }
        }),
        (Re = uc),
        (Ce = dc);
      var tu = {
        usingClientEntryPoint: !1,
        Events: [yr, xr, br, we, Ae, uc],
      },
        nu = {
          findFiberByHostInstance: _r,
          bundleType: 0,
          version: "18.2.0",
          rendererPackageName: "react-dom",
        },
        iu = {
          bundleType: nu.bundleType,
          version: nu.version,
          rendererPackageName: nu.rendererPackageName,
          rendererConfig: nu.rendererConfig,
          overrideHookState: null,
          overrideHookStateDeletePath: null,
          overrideHookStateRenamePath: null,
          overrideProps: null,
          overridePropsDeletePath: null,
          overridePropsRenamePath: null,
          setErrorHandler: null,
          setSuspenseHandler: null,
          scheduleUpdate: null,
          currentDispatcherRef: x.ReactCurrentDispatcher,
          findHostInstanceByFiber: function (e) {
            return null === (e = je(e)) ? null : e.stateNode;
          },
          findFiberByHostInstance:
            nu.findFiberByHostInstance ||
            function () {
              return null;
            },
          findHostInstancesForRefresh: null,
          scheduleRefresh: null,
          scheduleRoot: null,
          setRefreshHandler: null,
          getCurrentFiber: null,
          reconcilerVersion: "18.2.0-next-9e3b772b8-20220608",
        };
      if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        var ru = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (!ru.isDisabled && ru.supportsFiber)
          try {
            (rt = ru.inject(iu)), (at = ru);
          } catch (ue) { }
      }
      (t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tu),
        (t.createPortal = function (e, t) {
          var n =
            2 < arguments.length && void 0 !== arguments[2]
              ? arguments[2]
              : null;
          if (!Jc(t)) throw Error(a(200));
          return (function (e, t, n) {
            var i =
              3 < arguments.length && void 0 !== arguments[3]
                ? arguments[3]
                : null;
            return {
              $$typeof: S,
              key: null == i ? null : "" + i,
              children: e,
              containerInfo: t,
              implementation: n,
            };
          })(e, t, null, n);
        }),
        (t.createRoot = function (e, t) {
          if (!Jc(e)) throw Error(a(299));
          var n = !1,
            i = "",
            r = qc;
          return (
            null !== t &&
            void 0 !== t &&
            (!0 === t.unstable_strictMode && (n = !0),
              void 0 !== t.identifierPrefix && (i = t.identifierPrefix),
              void 0 !== t.onRecoverableError && (r = t.onRecoverableError)),
            (t = Vc(e, 1, !1, null, 0, n, 0, i, r)),
            (e[fr] = t.current),
            Hi(8 === e.nodeType ? e.parentNode : e),
            new Kc(t)
          );
        }),
        (t.findDOMNode = function (e) {
          if (null == e) return null;
          if (1 === e.nodeType) return e;
          var t = e._reactInternals;
          if (void 0 === t) {
            if ("function" === typeof e.render) throw Error(a(188));
            throw ((e = Object.keys(e).join(",")), Error(a(268, e)));
          }
          return (e = null === (e = je(t)) ? null : e.stateNode);
        }),
        (t.flushSync = function (e) {
          return dc(e);
        }),
        (t.hydrate = function (e, t, n) {
          if (!Qc(t)) throw Error(a(200));
          return eu(null, e, t, !0, n);
        }),
        (t.hydrateRoot = function (e, t, n) {
          if (!Jc(e)) throw Error(a(405));
          var i = (null != n && n.hydratedSources) || null,
            r = !1,
            o = "",
            s = qc;
          if (
            (null !== n &&
              void 0 !== n &&
              (!0 === n.unstable_strictMode && (r = !0),
                void 0 !== n.identifierPrefix && (o = n.identifierPrefix),
                void 0 !== n.onRecoverableError && (s = n.onRecoverableError)),
              (t = Gc(t, null, e, 1, null != n ? n : null, r, 0, o, s)),
              (e[fr] = t.current),
              Hi(e),
              i)
          )
            for (e = 0; e < i.length; e++)
              (r = (r = (n = i[e])._getVersion)(n._source)),
                null == t.mutableSourceEagerHydrationData
                  ? (t.mutableSourceEagerHydrationData = [n, r])
                  : t.mutableSourceEagerHydrationData.push(n, r);
          return new Zc(t);
        }),
        (t.render = function (e, t, n) {
          if (!Qc(t)) throw Error(a(200));
          return eu(null, e, t, !1, n);
        }),
        (t.unmountComponentAtNode = function (e) {
          if (!Qc(e)) throw Error(a(40));
          return (
            !!e._reactRootContainer &&
            (dc(function () {
              eu(null, null, e, !1, function () {
                (e._reactRootContainer = null), (e[fr] = null);
              });
            }),
              !0)
          );
        }),
        (t.unstable_batchedUpdates = uc),
        (t.unstable_renderSubtreeIntoContainer = function (e, t, n, i) {
          if (!Qc(n)) throw Error(a(200));
          if (null == e || void 0 === e._reactInternals) throw Error(a(38));
          return eu(e, t, n, !1, i);
        }),
        (t.version = "18.2.0-next-9e3b772b8-20220608");
    },
    391: (e, t, n) => {
      var i = n(950);
      (t.createRoot = i.createRoot), (t.hydrateRoot = i.hydrateRoot);
    },
    950: (e, t, n) => {
      !(function e() {
        if (
          "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
          "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE
        )
          try {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e);
          } catch (t) {
            console.error(t);
          }
      })(),
        (e.exports = n(730));
    },
    153: (e, t, n) => {
      var i = n(43),
        r = Symbol.for("react.element"),
        a = Symbol.for("react.fragment"),
        o = Object.prototype.hasOwnProperty,
        s =
          i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
            .ReactCurrentOwner,
        l = { key: !0, ref: !0, __self: !0, __source: !0 };
      function c(e, t, n) {
        var i,
          a = {},
          c = null,
          u = null;
        for (i in (void 0 !== n && (c = "" + n),
          void 0 !== t.key && (c = "" + t.key),
          void 0 !== t.ref && (u = t.ref),
          t))
          o.call(t, i) && !l.hasOwnProperty(i) && (a[i] = t[i]);
        if (e && e.defaultProps)
          for (i in (t = e.defaultProps)) void 0 === a[i] && (a[i] = t[i]);
        return {
          $$typeof: r,
          type: e,
          key: c,
          ref: u,
          props: a,
          _owner: s.current,
        };
      }
      (t.jsx = c), (t.jsxs = c);
    },
    202: (e, t) => {
      var n = Symbol.for("react.element"),
        i = Symbol.for("react.portal"),
        r = Symbol.for("react.fragment"),
        a = Symbol.for("react.strict_mode"),
        o = Symbol.for("react.profiler"),
        s = Symbol.for("react.provider"),
        l = Symbol.for("react.context"),
        c = Symbol.for("react.forward_ref"),
        u = Symbol.for("react.suspense"),
        d = Symbol.for("react.memo"),
        h = Symbol.for("react.lazy"),
        p = Symbol.iterator;
      var f = {
        isMounted: function () {
          return !1;
        },
        enqueueForceUpdate: function () { },
        enqueueReplaceState: function () { },
        enqueueSetState: function () { },
      },
        m = Object.assign,
        g = {};
      function v(e, t, n) {
        (this.props = e),
          (this.context = t),
          (this.refs = g),
          (this.updater = n || f);
      }
      function _() { }
      function y(e, t, n) {
        (this.props = e),
          (this.context = t),
          (this.refs = g),
          (this.updater = n || f);
      }
      (v.prototype.isReactComponent = {}),
        (v.prototype.setState = function (e, t) {
          if ("object" !== typeof e && "function" !== typeof e && null != e)
            throw Error(
              "setState(...): takes an object of state variables to update or a function which returns an object of state variables."
            );
          this.updater.enqueueSetState(this, e, t, "setState");
        }),
        (v.prototype.forceUpdate = function (e) {
          this.updater.enqueueForceUpdate(this, e, "forceUpdate");
        }),
        (_.prototype = v.prototype);
      var x = (y.prototype = new _());
      (x.constructor = y), m(x, v.prototype), (x.isPureReactComponent = !0);
      var b = Array.isArray,
        S = Object.prototype.hasOwnProperty,
        E = { current: null },
        M = { key: !0, ref: !0, __self: !0, __source: !0 };
      function T(e, t, i) {
        var r,
          a = {},
          o = null,
          s = null;
        if (null != t)
          for (r in (void 0 !== t.ref && (s = t.ref),
            void 0 !== t.key && (o = "" + t.key),
            t))
            S.call(t, r) && !M.hasOwnProperty(r) && (a[r] = t[r]);
        var l = arguments.length - 2;
        if (1 === l) a.children = i;
        else if (1 < l) {
          for (var c = Array(l), u = 0; u < l; u++) c[u] = arguments[u + 2];
          a.children = c;
        }
        if (e && e.defaultProps)
          for (r in (l = e.defaultProps)) void 0 === a[r] && (a[r] = l[r]);
        return {
          $$typeof: n,
          type: e,
          key: o,
          ref: s,
          props: a,
          _owner: E.current,
        };
      }
      function w(e) {
        return "object" === typeof e && null !== e && e.$$typeof === n;
      }
      var A = /\/+/g;
      function R(e, t) {
        return "object" === typeof e && null !== e && null != e.key
          ? (function (e) {
            var t = { "=": "=0", ":": "=2" };
            return (
              "$" +
              e.replace(/[=:]/g, function (e) {
                return t[e];
              })
            );
          })("" + e.key)
          : t.toString(36);
      }
      function C(e, t, r, a, o) {
        var s = typeof e;
        ("undefined" !== s && "boolean" !== s) || (e = null);
        var l = !1;
        if (null === e) l = !0;
        else
          switch (s) {
            case "string":
            case "number":
              l = !0;
              break;
            case "object":
              switch (e.$$typeof) {
                case n:
                case i:
                  l = !0;
              }
          }
        if (l)
          return (
            (o = o((l = e))),
            (e = "" === a ? "." + R(l, 0) : a),
            b(o)
              ? ((r = ""),
                null != e && (r = e.replace(A, "$&/") + "/"),
                C(o, t, r, "", function (e) {
                  return e;
                }))
              : null != o &&
              (w(o) &&
                (o = (function (e, t) {
                  return {
                    $$typeof: n,
                    type: e.type,
                    key: t,
                    ref: e.ref,
                    props: e.props,
                    _owner: e._owner,
                  };
                })(
                  o,
                  r +
                  (!o.key || (l && l.key === o.key)
                    ? ""
                    : ("" + o.key).replace(A, "$&/") + "/") +
                  e
                )),
                t.push(o)),
            1
          );
        if (((l = 0), (a = "" === a ? "." : a + ":"), b(e)))
          for (var c = 0; c < e.length; c++) {
            var u = a + R((s = e[c]), c);
            l += C(s, t, r, u, o);
          }
        else if (
          ((u = (function (e) {
            return null === e || "object" !== typeof e
              ? null
              : "function" === typeof (e = (p && e[p]) || e["@@iterator"])
                ? e
                : null;
          })(e)),
            "function" === typeof u)
        )
          for (e = u.call(e), c = 0; !(s = e.next()).done;)
            l += C((s = s.value), t, r, (u = a + R(s, c++)), o);
        else if ("object" === s)
          throw (
            ((t = String(e)),
              Error(
                "Objects are not valid as a React child (found: " +
                ("[object Object]" === t
                  ? "object with keys {" + Object.keys(e).join(", ") + "}"
                  : t) +
                "). If you meant to render a collection of children, use an array instead."
              ))
          );
        return l;
      }
      function P(e, t, n) {
        if (null == e) return e;
        var i = [],
          r = 0;
        return (
          C(e, i, "", "", function (e) {
            return t.call(n, e, r++);
          }),
          i
        );
      }
      function L(e) {
        if (-1 === e._status) {
          var t = e._result;
          (t = t()).then(
            function (t) {
              (0 !== e._status && -1 !== e._status) ||
                ((e._status = 1), (e._result = t));
            },
            function (t) {
              (0 !== e._status && -1 !== e._status) ||
                ((e._status = 2), (e._result = t));
            }
          ),
            -1 === e._status && ((e._status = 0), (e._result = t));
        }
        if (1 === e._status) return e._result.default;
        throw e._result;
      }
      var N = { current: null },
        D = { transition: null },
        U = {
          ReactCurrentDispatcher: N,
          ReactCurrentBatchConfig: D,
          ReactCurrentOwner: E,
        };
      (t.Children = {
        map: P,
        forEach: function (e, t, n) {
          P(
            e,
            function () {
              t.apply(this, arguments);
            },
            n
          );
        },
        count: function (e) {
          var t = 0;
          return (
            P(e, function () {
              t++;
            }),
            t
          );
        },
        toArray: function (e) {
          return (
            P(e, function (e) {
              return e;
            }) || []
          );
        },
        only: function (e) {
          if (!w(e))
            throw Error(
              "React.Children.only expected to receive a single React element child."
            );
          return e;
        },
      }),
        (t.Component = v),
        (t.Fragment = r),
        (t.Profiler = o),
        (t.PureComponent = y),
        (t.StrictMode = a),
        (t.Suspense = u),
        (t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = U),
        (t.cloneElement = function (e, t, i) {
          if (null === e || void 0 === e)
            throw Error(
              "React.cloneElement(...): The argument must be a React element, but you passed " +
              e +
              "."
            );
          var r = m({}, e.props),
            a = e.key,
            o = e.ref,
            s = e._owner;
          if (null != t) {
            if (
              (void 0 !== t.ref && ((o = t.ref), (s = E.current)),
                void 0 !== t.key && (a = "" + t.key),
                e.type && e.type.defaultProps)
            )
              var l = e.type.defaultProps;
            for (c in t)
              S.call(t, c) &&
                !M.hasOwnProperty(c) &&
                (r[c] = void 0 === t[c] && void 0 !== l ? l[c] : t[c]);
          }
          var c = arguments.length - 2;
          if (1 === c) r.children = i;
          else if (1 < c) {
            l = Array(c);
            for (var u = 0; u < c; u++) l[u] = arguments[u + 2];
            r.children = l;
          }
          return {
            $$typeof: n,
            type: e.type,
            key: a,
            ref: o,
            props: r,
            _owner: s,
          };
        }),
        (t.createContext = function (e) {
          return (
            ((e = {
              $$typeof: l,
              _currentValue: e,
              _currentValue2: e,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null,
            }).Provider = { $$typeof: s, _context: e }),
            (e.Consumer = e)
          );
        }),
        (t.createElement = T),
        (t.createFactory = function (e) {
          var t = T.bind(null, e);
          return (t.type = e), t;
        }),
        (t.createRef = function () {
          return { current: null };
        }),
        (t.forwardRef = function (e) {
          return { $$typeof: c, render: e };
        }),
        (t.isValidElement = w),
        (t.lazy = function (e) {
          return {
            $$typeof: h,
            _payload: { _status: -1, _result: e },
            _init: L,
          };
        }),
        (t.memo = function (e, t) {
          return { $$typeof: d, type: e, compare: void 0 === t ? null : t };
        }),
        (t.startTransition = function (e) {
          var t = D.transition;
          D.transition = {};
          try {
            e();
          } finally {
            D.transition = t;
          }
        }),
        (t.unstable_act = function () {
          throw Error(
            "act(...) is not supported in production builds of React."
          );
        }),
        (t.useCallback = function (e, t) {
          return N.current.useCallback(e, t);
        }),
        (t.useContext = function (e) {
          return N.current.useContext(e);
        }),
        (t.useDebugValue = function () { }),
        (t.useDeferredValue = function (e) {
          return N.current.useDeferredValue(e);
        }),
        (t.useEffect = function (e, t) {
          return N.current.useEffect(e, t);
        }),
        (t.useId = function () {
          return N.current.useId();
        }),
        (t.useImperativeHandle = function (e, t, n) {
          return N.current.useImperativeHandle(e, t, n);
        }),
        (t.useInsertionEffect = function (e, t) {
          return N.current.useInsertionEffect(e, t);
        }),
        (t.useLayoutEffect = function (e, t) {
          return N.current.useLayoutEffect(e, t);
        }),
        (t.useMemo = function (e, t) {
          return N.current.useMemo(e, t);
        }),
        (t.useReducer = function (e, t, n) {
          return N.current.useReducer(e, t, n);
        }),
        (t.useRef = function (e) {
          return N.current.useRef(e);
        }),
        (t.useState = function (e) {
          return N.current.useState(e);
        }),
        (t.useSyncExternalStore = function (e, t, n) {
          return N.current.useSyncExternalStore(e, t, n);
        }),
        (t.useTransition = function () {
          return N.current.useTransition();
        }),
        (t.version = "18.2.0");
    },
    43: (e, t, n) => {
      e.exports = n(202);
    },
    579: (e, t, n) => {
      e.exports = n(153);
    },
    234: (e, t) => {
      function n(e, t) {
        var n = e.length;
        e.push(t);
        e: for (; 0 < n;) {
          var i = (n - 1) >>> 1,
            r = e[i];
          if (!(0 < a(r, t))) break e;
          (e[i] = t), (e[n] = r), (n = i);
        }
      }
      function i(e) {
        return 0 === e.length ? null : e[0];
      }
      function r(e) {
        if (0 === e.length) return null;
        var t = e[0],
          n = e.pop();
        if (n !== t) {
          e[0] = n;
          e: for (var i = 0, r = e.length, o = r >>> 1; i < o;) {
            var s = 2 * (i + 1) - 1,
              l = e[s],
              c = s + 1,
              u = e[c];
            if (0 > a(l, n))
              c < r && 0 > a(u, l)
                ? ((e[i] = u), (e[c] = n), (i = c))
                : ((e[i] = l), (e[s] = n), (i = s));
            else {
              if (!(c < r && 0 > a(u, n))) break e;
              (e[i] = u), (e[c] = n), (i = c);
            }
          }
        }
        return t;
      }
      function a(e, t) {
        var n = e.sortIndex - t.sortIndex;
        return 0 !== n ? n : e.id - t.id;
      }
      if (
        "object" === typeof performance &&
        "function" === typeof performance.now
      ) {
        var o = performance;
        t.unstable_now = function () {
          return o.now();
        };
      } else {
        var s = Date,
          l = s.now();
        t.unstable_now = function () {
          return s.now() - l;
        };
      }
      var c = [],
        u = [],
        d = 1,
        h = null,
        p = 3,
        f = !1,
        m = !1,
        g = !1,
        v = "function" === typeof setTimeout ? setTimeout : null,
        _ = "function" === typeof clearTimeout ? clearTimeout : null,
        y = "undefined" !== typeof setImmediate ? setImmediate : null;
      function x(e) {
        for (var t = i(u); null !== t;) {
          if (null === t.callback) r(u);
          else {
            if (!(t.startTime <= e)) break;
            r(u), (t.sortIndex = t.expirationTime), n(c, t);
          }
          t = i(u);
        }
      }
      function b(e) {
        if (((g = !1), x(e), !m))
          if (null !== i(c)) (m = !0), D(S);
          else {
            var t = i(u);
            null !== t && U(b, t.startTime - e);
          }
      }
      function S(e, n) {
        (m = !1), g && ((g = !1), _(w), (w = -1)), (f = !0);
        var a = p;
        try {
          for (
            x(n), h = i(c);
            null !== h && (!(h.expirationTime > n) || (e && !C()));

          ) {
            var o = h.callback;
            if ("function" === typeof o) {
              (h.callback = null), (p = h.priorityLevel);
              var s = o(h.expirationTime <= n);
              (n = t.unstable_now()),
                "function" === typeof s
                  ? (h.callback = s)
                  : h === i(c) && r(c),
                x(n);
            } else r(c);
            h = i(c);
          }
          if (null !== h) var l = !0;
          else {
            var d = i(u);
            null !== d && U(b, d.startTime - n), (l = !1);
          }
          return l;
        } finally {
          (h = null), (p = a), (f = !1);
        }
      }
      "undefined" !== typeof navigator &&
        void 0 !== navigator.scheduling &&
        void 0 !== navigator.scheduling.isInputPending &&
        navigator.scheduling.isInputPending.bind(navigator.scheduling);
      var E,
        M = !1,
        T = null,
        w = -1,
        A = 5,
        R = -1;
      function C() {
        return !(t.unstable_now() - R < A);
      }
      function P() {
        if (null !== T) {
          var e = t.unstable_now();
          R = e;
          var n = !0;
          try {
            n = T(!0, e);
          } finally {
            n ? E() : ((M = !1), (T = null));
          }
        } else M = !1;
      }
      if ("function" === typeof y)
        E = function () {
          y(P);
        };
      else if ("undefined" !== typeof MessageChannel) {
        var L = new MessageChannel(),
          N = L.port2;
        (L.port1.onmessage = P),
          (E = function () {
            N.postMessage(null);
          });
      } else
        E = function () {
          v(P, 0);
        };
      function D(e) {
        (T = e), M || ((M = !0), E());
      }
      function U(e, n) {
        w = v(function () {
          e(t.unstable_now());
        }, n);
      }
      (t.unstable_IdlePriority = 5),
        (t.unstable_ImmediatePriority = 1),
        (t.unstable_LowPriority = 4),
        (t.unstable_NormalPriority = 3),
        (t.unstable_Profiling = null),
        (t.unstable_UserBlockingPriority = 2),
        (t.unstable_cancelCallback = function (e) {
          e.callback = null;
        }),
        (t.unstable_continueExecution = function () {
          m || f || ((m = !0), D(S));
        }),
        (t.unstable_forceFrameRate = function (e) {
          0 > e || 125 < e
            ? console.error(
              "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
            )
            : (A = 0 < e ? Math.floor(1e3 / e) : 5);
        }),
        (t.unstable_getCurrentPriorityLevel = function () {
          return p;
        }),
        (t.unstable_getFirstCallbackNode = function () {
          return i(c);
        }),
        (t.unstable_next = function (e) {
          switch (p) {
            case 1:
            case 2:
            case 3:
              var t = 3;
              break;
            default:
              t = p;
          }
          var n = p;
          p = t;
          try {
            return e();
          } finally {
            p = n;
          }
        }),
        (t.unstable_pauseExecution = function () { }),
        (t.unstable_requestPaint = function () { }),
        (t.unstable_runWithPriority = function (e, t) {
          switch (e) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
            default:
              e = 3;
          }
          var n = p;
          p = e;
          try {
            return t();
          } finally {
            p = n;
          }
        }),
        (t.unstable_scheduleCallback = function (e, r, a) {
          var o = t.unstable_now();
          switch (
          ("object" === typeof a && null !== a
            ? (a = "number" === typeof (a = a.delay) && 0 < a ? o + a : o)
            : (a = o),
            e)
          ) {
            case 1:
              var s = -1;
              break;
            case 2:
              s = 250;
              break;
            case 5:
              s = 1073741823;
              break;
            case 4:
              s = 1e4;
              break;
            default:
              s = 5e3;
          }
          return (
            (e = {
              id: d++,
              callback: r,
              priorityLevel: e,
              startTime: a,
              expirationTime: (s = a + s),
              sortIndex: -1,
            }),
            a > o
              ? ((e.sortIndex = a),
                n(u, e),
                null === i(c) &&
                e === i(u) &&
                (g ? (_(w), (w = -1)) : (g = !0), U(b, a - o)))
              : ((e.sortIndex = s), n(c, e), m || f || ((m = !0), D(S))),
            e
          );
        }),
        (t.unstable_shouldYield = C),
        (t.unstable_wrapCallback = function (e) {
          var t = p;
          return function () {
            var n = p;
            p = t;
            try {
              return e.apply(this, arguments);
            } finally {
              p = n;
            }
          };
        });
    },
    853: (e, t, n) => {
      e.exports = n(234);
    },
    956: (e, t, n) => {
      var i = n(43);
      var r =
        "function" === typeof Object.is
          ? Object.is
          : function (e, t) {
            return (
              (e === t && (0 !== e || 1 / e === 1 / t)) ||
              (e !== e && t !== t)
            );
          },
        a = i.useState,
        o = i.useEffect,
        s = i.useLayoutEffect,
        l = i.useDebugValue;
      function c(e) {
        var t = e.getSnapshot;
        e = e.value;
        try {
          var n = t();
          return !r(e, n);
        } catch (i) {
          return !0;
        }
      }
      var u =
        "undefined" === typeof window ||
          "undefined" === typeof window.document ||
          "undefined" === typeof window.document.createElement
          ? function (e, t) {
            return t();
          }
          : function (e, t) {
            var n = t(),
              i = a({ inst: { value: n, getSnapshot: t } }),
              r = i[0].inst,
              u = i[1];
            return (
              s(
                function () {
                  (r.value = n),
                    (r.getSnapshot = t),
                    c(r) && u({ inst: r });
                },
                [e, n, t]
              ),
              o(
                function () {
                  return (
                    c(r) && u({ inst: r }),
                    e(function () {
                      c(r) && u({ inst: r });
                    })
                  );
                },
                [e]
              ),
              l(n),
              n
            );
          };
      t.useSyncExternalStore =
        void 0 !== i.useSyncExternalStore ? i.useSyncExternalStore : u;
    },
    39: (e, t, n) => {
      var i = n(43),
        r = n(461);
      var a =
        "function" === typeof Object.is
          ? Object.is
          : function (e, t) {
            return (
              (e === t && (0 !== e || 1 / e === 1 / t)) ||
              (e !== e && t !== t)
            );
          },
        o = r.useSyncExternalStore,
        s = i.useRef,
        l = i.useEffect,
        c = i.useMemo,
        u = i.useDebugValue;
      t.useSyncExternalStoreWithSelector = function (e, t, n, i, r) {
        var d = s(null);
        if (null === d.current) {
          var h = { hasValue: !1, value: null };
          d.current = h;
        } else h = d.current;
        d = c(
          function () {
            function e(e) {
              if (!l) {
                if (
                  ((l = !0), (o = e), (e = i(e)), void 0 !== r && h.hasValue)
                ) {
                  var t = h.value;
                  if (r(t, e)) return (s = t);
                }
                return (s = e);
              }
              if (((t = s), a(o, e))) return t;
              var n = i(e);
              return void 0 !== r && r(t, n) ? t : ((o = e), (s = n));
            }
            var o,
              s,
              l = !1,
              c = void 0 === n ? null : n;
            return [
              function () {
                return e(t());
              },
              null === c
                ? void 0
                : function () {
                  return e(c());
                },
            ];
          },
          [t, n, i, r]
        );
        var p = o(e, d[0], d[1]);
        return (
          l(
            function () {
              (h.hasValue = !0), (h.value = p);
            },
            [p]
          ),
          u(p),
          p
        );
      };
    },
    461: (e, t, n) => {
      e.exports = n(956);
    },
    443: (e, t, n) => {
      e.exports = n(39);
    },
  },
    t = {};
  function n(i) {
    var r = t[i];
    if (void 0 !== r) return r.exports;
    var a = (t[i] = { exports: {} });
    return e[i](a, a.exports, n), a.exports;
  }
  (n.m = e),
    (n.d = (e, t) => {
      for (var i in t)
        n.o(t, i) &&
          !n.o(e, i) &&
          Object.defineProperty(e, i, { enumerable: !0, get: t[i] });
    }),
    (n.f = {}),
    (n.e = (e) =>
      Promise.all(Object.keys(n.f).reduce((t, i) => (n.f[i](e, t), t), []))),
    (n.u = (e) => "static/js/" + e + ".1407b060.chunk.js"),
    (n.miniCssF = (e) => { }),
    (n.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
    (() => {
      var e = {},
        t = "portfolio:";
      n.l = (i, r, a, o) => {
        if (e[i]) e[i].push(r);
        else {
          var s, l;
          if (void 0 !== a)
            for (
              var c = document.getElementsByTagName("script"), u = 0;
              u < c.length;
              u++
            ) {
              var d = c[u];
              if (
                d.getAttribute("src") == i ||
                d.getAttribute("data-webpack") == t + a
              ) {
                s = d;
                break;
              }
            }
          s ||
            ((l = !0),
              ((s = document.createElement("script")).charset = "utf-8"),
              (s.timeout = 120),
              n.nc && s.setAttribute("nonce", n.nc),
              s.setAttribute("data-webpack", t + a),
              (s.src = i)),
            (e[i] = [r]);
          var h = (t, n) => {
            (s.onerror = s.onload = null), clearTimeout(p);
            var r = e[i];
            if (
              (delete e[i],
                s.parentNode && s.parentNode.removeChild(s),
                r && r.forEach((e) => e(n)),
                t)
            )
              return t(n);
          },
            p = setTimeout(
              h.bind(null, void 0, { type: "timeout", target: s }),
              12e4
            );
          (s.onerror = h.bind(null, s.onerror)),
            (s.onload = h.bind(null, s.onload)),
            l && document.head.appendChild(s);
        }
      };
    })(),
    (n.r = (e) => {
      "undefined" !== typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(e, "__esModule", { value: !0 });
    }),
    (n.p = "/"),
    (() => {
      var e = { 792: 0 };
      n.f.j = (t, i) => {
        var r = n.o(e, t) ? e[t] : void 0;
        if (0 !== r)
          if (r) i.push(r[2]);
          else {
            var a = new Promise((n, i) => (r = e[t] = [n, i]));
            i.push((r[2] = a));
            var o = n.p + n.u(t),
              s = new Error();
            n.l(
              o,
              (i) => {
                if (n.o(e, t) && (0 !== (r = e[t]) && (e[t] = void 0), r)) {
                  var a = i && ("load" === i.type ? "missing" : i.type),
                    o = i && i.target && i.target.src;
                  (s.message =
                    "Loading chunk " + t + " failed.\n(" + a + ": " + o + ")"),
                    (s.name = "ChunkLoadError"),
                    (s.type = a),
                    (s.request = o),
                    r[1](s);
                }
              },
              "chunk-" + t,
              t
            );
          }
      };
      var t = (t, i) => {
        var r,
          a,
          o = i[0],
          s = i[1],
          l = i[2],
          c = 0;
        if (o.some((t) => 0 !== e[t])) {
          for (r in s) n.o(s, r) && (n.m[r] = s[r]);
          if (l) l(n);
        }
        for (t && t(i); c < o.length; c++)
          (a = o[c]), n.o(e, a) && e[a] && e[a][0](), (e[a] = 0);
      },
        i = (self.webpackChunkportfolio = self.webpackChunkportfolio || []);
      i.forEach(t.bind(null, 0)), (i.push = t.bind(null, i.push.bind(i)));
    })(),
    (() => {
      var e = n(43),
        t = n(391);
      const i = (e) => e;
      let r = i,
        a = i;
      const o = { some: 0, all: 1 };
      function s(e, t) {
        let {
          root: n,
          margin: i,
          amount: r = "some",
        } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        const s = (function (e, t, n) {
          var i;
          if ("string" === typeof e) {
            let r = document;
            t &&
              (a(
                Boolean(t.current),
                "Scope provided, but no element detected."
              ),
                (r = t.current)),
              n
                ? ((null !== (i = n[e]) && void 0 !== i) ||
                  (n[e] = r.querySelectorAll(e)),
                  (e = n[e]))
                : (e = r.querySelectorAll(e));
          } else e instanceof Element && (e = [e]);
          return Array.from(e || []);
        })(e),
          l = new WeakMap(),
          c = new IntersectionObserver(
            (e) => {
              e.forEach((e) => {
                const n = l.get(e.target);
                if (e.isIntersecting !== Boolean(n))
                  if (e.isIntersecting) {
                    const n = t(e);
                    "function" === typeof n
                      ? l.set(e.target, n)
                      : c.unobserve(e.target);
                  } else n && (n(e), l.delete(e.target));
              });
            },
            {
              root: n,
              rootMargin: i,
              threshold: "number" === typeof r ? r : o[r],
            }
          );
        return s.forEach((e) => c.observe(e)), () => c.disconnect();
      }
      function l(t) {
        let {
          root: n,
          margin: i,
          amount: r,
          once: a = !1,
        } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        const [o, l] = (0, e.useState)(!1);
        return (
          (0, e.useEffect)(() => {
            if (!t.current || (a && o)) return;
            const e = {
              root: (n && n.current) || void 0,
              margin: i,
              amount: r,
            };
            return s(t.current, () => (l(!0), a ? void 0 : () => l(!1)), e);
          }, [n, t, i, a, r]),
          o
        );
      }
      const c = (0, e.createContext)({
        transformPagePoint: (e) => e,
        isStatic: !1,
        reducedMotion: "never",
      }),
        u = (0, e.createContext)({}),
        d = (0, e.createContext)(null),
        h = "undefined" !== typeof document,
        p = h ? e.useLayoutEffect : e.useEffect,
        f = (0, e.createContext)({ strict: !1 }),
        m = (e) => e.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase(),
        g = "data-" + m("framerAppearId"),
        v = !1,
        _ = !1;
      class y {
        constructor() {
          (this.order = []), (this.scheduled = new Set());
        }
        add(e) {
          if (!this.scheduled.has(e))
            return this.scheduled.add(e), this.order.push(e), !0;
        }
        remove(e) {
          const t = this.order.indexOf(e);
          -1 !== t && (this.order.splice(t, 1), this.scheduled.delete(e));
        }
        clear() {
          (this.order.length = 0), this.scheduled.clear();
        }
      }
      const x = [
        "prepare",
        "read",
        "update",
        "preRender",
        "render",
        "postRender",
      ];
      function b(e, t) {
        let n = !1,
          i = !0;
        const r = { delta: 0, timestamp: 0, isProcessing: !1 },
          a = x.reduce(
            (e, t) => (
              (e[t] = (function (e) {
                let t = new y(),
                  n = new y(),
                  i = 0,
                  r = !1,
                  a = !1;
                const o = new WeakSet(),
                  s = {
                    schedule: function (e) {
                      const a =
                        arguments.length > 2 &&
                        void 0 !== arguments[2] &&
                        arguments[2] &&
                        r,
                        s = a ? t : n;
                      return (
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1] &&
                        o.add(e),
                        s.add(e) && a && r && (i = t.order.length),
                        e
                      );
                    },
                    cancel: (e) => {
                      n.remove(e), o.delete(e);
                    },
                    process: (l) => {
                      if (r) a = !0;
                      else {
                        if (
                          ((r = !0),
                            ([t, n] = [n, t]),
                            n.clear(),
                            (i = t.order.length),
                            i)
                        )
                          for (let n = 0; n < i; n++) {
                            const i = t.order[n];
                            o.has(i) && (s.schedule(i), e()), i(l);
                          }
                        (r = !1), a && ((a = !1), s.process(l));
                      }
                    },
                  };
                return s;
              })(() => (n = !0))),
              e
            ),
            {}
          ),
          o = (e) => {
            a[e].process(r);
          },
          s = () => {
            const a = _ ? r.timestamp : performance.now();
            (n = !1),
              (r.delta = i
                ? 1e3 / 60
                : Math.max(Math.min(a - r.timestamp, 40), 1)),
              (r.timestamp = a),
              (r.isProcessing = !0),
              x.forEach(o),
              (r.isProcessing = !1),
              n && t && ((i = !1), e(s));
          },
          l = x.reduce((t, o) => {
            const l = a[o];
            return (
              (t[o] = function (t) {
                let a =
                  arguments.length > 1 &&
                  void 0 !== arguments[1] &&
                  arguments[1],
                  o =
                    arguments.length > 2 &&
                    void 0 !== arguments[2] &&
                    arguments[2];
                return (
                  n || ((n = !0), (i = !0), r.isProcessing || e(s)),
                  l.schedule(t, a, o)
                );
              }),
              t
            );
          }, {});
        return {
          schedule: l,
          cancel: (e) => x.forEach((t) => a[t].cancel(e)),
          state: r,
          steps: a,
        };
      }
      const { schedule: S, cancel: E } = b(queueMicrotask, !1);
      function M(e) {
        return (
          e &&
          "object" === typeof e &&
          Object.prototype.hasOwnProperty.call(e, "current")
        );
      }
      function T(e) {
        return "string" === typeof e || Array.isArray(e);
      }
      function w(e) {
        return (
          null !== e && "object" === typeof e && "function" === typeof e.start
        );
      }
      const A = [
        "animate",
        "whileInView",
        "whileFocus",
        "whileHover",
        "whileTap",
        "whileDrag",
        "exit",
      ],
        R = ["initial", ...A];
      function C(e) {
        return w(e.animate) || R.some((t) => T(e[t]));
      }
      function P(e) {
        return Boolean(C(e) || e.variants);
      }
      function L(t) {
        const { initial: n, animate: i } = (function (e, t) {
          if (C(e)) {
            const { initial: t, animate: n } = e;
            return {
              initial: !1 === t || T(t) ? t : void 0,
              animate: T(n) ? n : void 0,
            };
          }
          return !1 !== e.inherit ? t : {};
        })(t, (0, e.useContext)(u));
        return (0, e.useMemo)(() => ({ initial: n, animate: i }), [N(n), N(i)]);
      }
      function N(e) {
        return Array.isArray(e) ? e.join(" ") : e;
      }
      const D = {
        animation: [
          "animate",
          "variants",
          "whileHover",
          "whileTap",
          "exit",
          "whileInView",
          "whileFocus",
          "whileDrag",
        ],
        exit: ["exit"],
        drag: ["drag", "dragControls"],
        focus: ["whileFocus"],
        hover: ["whileHover", "onHoverStart", "onHoverEnd"],
        tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
        pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
        inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
        layout: ["layout", "layoutId"],
      },
        U = {};
      for (const n in D) U[n] = { isEnabled: (e) => D[n].some((t) => !!e[t]) };
      const I = (0, e.createContext)({}),
        O = (0, e.createContext)({}),
        k = Symbol.for("motionComponentSymbol");
      function F(t) {
        let {
          preloadedFeatures: n,
          createVisualElement: i,
          useRender: r,
          useVisualState: a,
          Component: o,
        } = t;
        n &&
          (function (e) {
            for (const t in e) U[t] = { ...U[t], ...e[t] };
          })(n);
        const s = (0, e.forwardRef)(function (t, s) {
          let l;
          const m = { ...(0, e.useContext)(c), ...t, layoutId: z(t) },
            { isStatic: v } = m,
            _ = L(t),
            y = a(t, v);
          if (!v && h) {
            _.visualElement = (function (t, n, i, r) {
              const { visualElement: a } = (0, e.useContext)(u),
                o = (0, e.useContext)(f),
                s = (0, e.useContext)(d),
                l = (0, e.useContext)(c).reducedMotion,
                h = (0, e.useRef)();
              (r = r || o.renderer),
                !h.current &&
                r &&
                (h.current = r(t, {
                  visualState: n,
                  parent: a,
                  props: i,
                  presenceContext: s,
                  blockInitialAnimation: !!s && !1 === s.initial,
                  reducedMotionConfig: l,
                }));
              const m = h.current;
              (0, e.useInsertionEffect)(() => {
                m && m.update(i, s);
              });
              const v = (0, e.useRef)(Boolean(i[g] && !window.HandoffComplete));
              return (
                p(() => {
                  m &&
                    (S.postRender(m.render),
                      v.current &&
                      m.animationState &&
                      m.animationState.animateChanges());
                }),
                (0, e.useEffect)(() => {
                  m &&
                    (m.updateFeatures(),
                      !v.current &&
                      m.animationState &&
                      m.animationState.animateChanges(),
                      v.current &&
                      ((v.current = !1), (window.HandoffComplete = !0)));
                }),
                m
              );
            })(o, y, m, i);
            const t = (0, e.useContext)(O),
              r = (0, e.useContext)(f).strict;
            _.visualElement && (l = _.visualElement.loadFeatures(m, r, n, t));
          }
          return e.createElement(
            u.Provider,
            { value: _ },
            l && _.visualElement
              ? e.createElement(l, { visualElement: _.visualElement, ...m })
              : null,
            r(
              o,
              t,
              (function (t, n, i) {
                return (0, e.useCallback)(
                  (e) => {
                    e && t.mount && t.mount(e),
                      n && (e ? n.mount(e) : n.unmount()),
                      i &&
                      ("function" === typeof i
                        ? i(e)
                        : M(i) && (i.current = e));
                  },
                  [n]
                );
              })(y, _.visualElement, s),
              y,
              v,
              _.visualElement
            )
          );
        });
        return (s[k] = o), s;
      }
      function z(t) {
        let { layoutId: n } = t;
        const i = (0, e.useContext)(I).id;
        return i && void 0 !== n ? i + "-" + n : n;
      }
      function B(e) {
        function t(t) {
          return F(
            e(
              t,
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : {}
            )
          );
        }
        if ("undefined" === typeof Proxy) return t;
        const n = new Map();
        return new Proxy(t, {
          get: (e, i) => (n.has(i) || n.set(i, t(i)), n.get(i)),
        });
      }
      const V = [
        "animate",
        "circle",
        "defs",
        "desc",
        "ellipse",
        "g",
        "image",
        "line",
        "filter",
        "marker",
        "mask",
        "metadata",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "rect",
        "stop",
        "switch",
        "symbol",
        "svg",
        "text",
        "tspan",
        "use",
        "view",
      ];
      function H(e) {
        return (
          "string" === typeof e &&
          !e.includes("-") &&
          !!(V.indexOf(e) > -1 || /[A-Z]/.test(e))
        );
      }
      const G = {};
      const W = [
        "transformPerspective",
        "x",
        "y",
        "z",
        "translateX",
        "translateY",
        "translateZ",
        "scale",
        "scaleX",
        "scaleY",
        "rotate",
        "rotateX",
        "rotateY",
        "rotateZ",
        "skew",
        "skewX",
        "skewY",
      ],
        j = new Set(W);
      function X(e, t) {
        let { layout: n, layoutId: i } = t;
        return (
          j.has(e) ||
          e.startsWith("origin") ||
          ((n || void 0 !== i) && (!!G[e] || "opacity" === e))
        );
      }
      const Y = (e) => Boolean(e && e.getVelocity),
        q = {
          x: "translateX",
          y: "translateY",
          z: "translateZ",
          transformPerspective: "perspective",
        },
        K = W.length;
      const Z = (e) => (t) => "string" === typeof t && t.startsWith(e),
        J = Z("--"),
        Q = Z("var(--"),
        $ = (e) => Q(e) && ee.test(e),
        ee =
          /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)$/i,
        te = (e, t) => (t && "number" === typeof e ? t.transform(e) : e),
        ne = (e, t, n) => (n > t ? t : n < e ? e : n),
        ie = {
          test: (e) => "number" === typeof e,
          parse: parseFloat,
          transform: (e) => e,
        },
        re = { ...ie, transform: (e) => ne(0, 1, e) },
        ae = { ...ie, default: 1 },
        oe = (e) => Math.round(1e5 * e) / 1e5,
        se = /(-)?([\d]*\.?[\d])+/g,
        le =
          /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,
        ce =
          /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
      function ue(e) {
        return "string" === typeof e;
      }
      const de = (e) => ({
        test: (t) => ue(t) && t.endsWith(e) && 1 === t.split(" ").length,
        parse: parseFloat,
        transform: (t) => "".concat(t).concat(e),
      }),
        he = de("deg"),
        pe = de("%"),
        fe = de("px"),
        me = de("vh"),
        ge = de("vw"),
        ve = {
          ...pe,
          parse: (e) => pe.parse(e) / 100,
          transform: (e) => pe.transform(100 * e),
        },
        _e = { ...ie, transform: Math.round },
        ye = {
          borderWidth: fe,
          borderTopWidth: fe,
          borderRightWidth: fe,
          borderBottomWidth: fe,
          borderLeftWidth: fe,
          borderRadius: fe,
          radius: fe,
          borderTopLeftRadius: fe,
          borderTopRightRadius: fe,
          borderBottomRightRadius: fe,
          borderBottomLeftRadius: fe,
          width: fe,
          maxWidth: fe,
          height: fe,
          maxHeight: fe,
          size: fe,
          top: fe,
          right: fe,
          bottom: fe,
          left: fe,
          padding: fe,
          paddingTop: fe,
          paddingRight: fe,
          paddingBottom: fe,
          paddingLeft: fe,
          margin: fe,
          marginTop: fe,
          marginRight: fe,
          marginBottom: fe,
          marginLeft: fe,
          rotate: he,
          rotateX: he,
          rotateY: he,
          rotateZ: he,
          scale: ae,
          scaleX: ae,
          scaleY: ae,
          scaleZ: ae,
          skew: he,
          skewX: he,
          skewY: he,
          distance: fe,
          translateX: fe,
          translateY: fe,
          translateZ: fe,
          x: fe,
          y: fe,
          z: fe,
          perspective: fe,
          transformPerspective: fe,
          opacity: re,
          originX: ve,
          originY: ve,
          originZ: fe,
          zIndex: _e,
          fillOpacity: re,
          strokeOpacity: re,
          numOctaves: _e,
        };
      function xe(e, t, n, i) {
        const { style: r, vars: a, transform: o, transformOrigin: s } = e;
        let l = !1,
          c = !1,
          u = !0;
        for (const d in t) {
          const e = t[d];
          if (J(d)) {
            a[d] = e;
            continue;
          }
          const n = ye[d],
            i = te(e, n);
          if (j.has(d)) {
            if (((l = !0), (o[d] = i), !u)) continue;
            e !== (n.default || 0) && (u = !1);
          } else d.startsWith("origin") ? ((c = !0), (s[d] = i)) : (r[d] = i);
        }
        if (
          (t.transform ||
            (l || i
              ? (r.transform = (function (e, t, n, i) {
                let {
                  enableHardwareAcceleration: r = !0,
                  allowTransformNone: a = !0,
                } = t,
                  o = "";
                for (let s = 0; s < K; s++) {
                  const t = W[s];
                  if (void 0 !== e[t]) {
                    const n = q[t] || t;
                    o += "".concat(n, "(").concat(e[t], ") ");
                  }
                }
                return (
                  r && !e.z && (o += "translateZ(0)"),
                  (o = o.trim()),
                  i ? (o = i(e, n ? "" : o)) : a && n && (o = "none"),
                  o
                );
              })(e.transform, n, u, i))
              : r.transform && (r.transform = "none")),
            c)
        ) {
          const { originX: e = "50%", originY: t = "50%", originZ: n = 0 } = s;
          r.transformOrigin = "".concat(e, " ").concat(t, " ").concat(n);
        }
      }
      const be = () => ({
        style: {},
        transform: {},
        transformOrigin: {},
        vars: {},
      });
      function Se(e, t, n) {
        for (const i in t) Y(t[i]) || X(i, n) || (e[i] = t[i]);
      }
      function Ee(t, n, i) {
        const r = {};
        return (
          Se(r, t.style || {}, t),
          Object.assign(
            r,
            (function (t, n, i) {
              let { transformTemplate: r } = t;
              return (0, e.useMemo)(() => {
                const e = be();
                return (
                  xe(e, n, { enableHardwareAcceleration: !i }, r),
                  Object.assign({}, e.vars, e.style)
                );
              }, [n]);
            })(t, n, i)
          ),
          r
        );
      }
      function Me(e, t, n) {
        const i = {},
          r = Ee(e, t, n);
        return (
          e.drag &&
          !1 !== e.dragListener &&
          ((i.draggable = !1),
            (r.userSelect = r.WebkitUserSelect = r.WebkitTouchCallout = "none"),
            (r.touchAction =
              !0 === e.drag
                ? "none"
                : "pan-".concat("x" === e.drag ? "y" : "x"))),
          void 0 === e.tabIndex &&
          (e.onTap || e.onTapStart || e.whileTap) &&
          (i.tabIndex = 0),
          (i.style = r),
          i
        );
      }
      const Te = new Set([
        "animate",
        "exit",
        "variants",
        "initial",
        "style",
        "values",
        "variants",
        "transition",
        "transformTemplate",
        "custom",
        "inherit",
        "onBeforeLayoutMeasure",
        "onAnimationStart",
        "onAnimationComplete",
        "onUpdate",
        "onDragStart",
        "onDrag",
        "onDragEnd",
        "onMeasureDragConstraints",
        "onDirectionLock",
        "onDragTransitionEnd",
        "_dragX",
        "_dragY",
        "onHoverStart",
        "onHoverEnd",
        "onViewportEnter",
        "onViewportLeave",
        "globalTapTarget",
        "ignoreStrict",
        "viewport",
      ]);
      function we(e) {
        return (
          e.startsWith("while") ||
          (e.startsWith("drag") && "draggable" !== e) ||
          e.startsWith("layout") ||
          e.startsWith("onTap") ||
          e.startsWith("onPan") ||
          e.startsWith("onLayout") ||
          Te.has(e)
        );
      }
      let Ae = (e) => !we(e);
      try {
        (Re = require("@emotion/is-prop-valid").default) &&
          (Ae = (e) => (e.startsWith("on") ? !we(e) : Re(e)));
      } catch (vm) { }
      var Re;
      function Ce(e, t, n) {
        return "string" === typeof e ? e : fe.transform(t + n * e);
      }
      const Pe = { offset: "stroke-dashoffset", array: "stroke-dasharray" },
        Le = { offset: "strokeDashoffset", array: "strokeDasharray" };
      function Ne(e, t, n, i, r) {
        let {
          attrX: a,
          attrY: o,
          attrScale: s,
          originX: l,
          originY: c,
          pathLength: u,
          pathSpacing: d = 1,
          pathOffset: h = 0,
          ...p
        } = t;
        if ((xe(e, p, n, r), i))
          return void (e.style.viewBox && (e.attrs.viewBox = e.style.viewBox));
        (e.attrs = e.style), (e.style = {});
        const { attrs: f, style: m, dimensions: g } = e;
        f.transform && (g && (m.transform = f.transform), delete f.transform),
          g &&
          (void 0 !== l || void 0 !== c || m.transform) &&
          (m.transformOrigin = (function (e, t, n) {
            const i = Ce(t, e.x, e.width),
              r = Ce(n, e.y, e.height);
            return "".concat(i, " ").concat(r);
          })(g, void 0 !== l ? l : 0.5, void 0 !== c ? c : 0.5)),
          void 0 !== a && (f.x = a),
          void 0 !== o && (f.y = o),
          void 0 !== s && (f.scale = s),
          void 0 !== u &&
          (function (e, t) {
            let n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 1,
              i =
                arguments.length > 3 && void 0 !== arguments[3]
                  ? arguments[3]
                  : 0,
              r =
                !(arguments.length > 4 && void 0 !== arguments[4]) ||
                arguments[4];
            e.pathLength = 1;
            const a = r ? Pe : Le;
            e[a.offset] = fe.transform(-i);
            const o = fe.transform(t),
              s = fe.transform(n);
            e[a.array] = "".concat(o, " ").concat(s);
          })(f, u, d, h, !1);
      }
      const De = () => ({ ...be(), attrs: {} }),
        Ue = (e) => "string" === typeof e && "svg" === e.toLowerCase();
      function Ie(t, n, i, r) {
        const a = (0, e.useMemo)(() => {
          const e = De();
          return (
            Ne(
              e,
              n,
              { enableHardwareAcceleration: !1 },
              Ue(r),
              t.transformTemplate
            ),
            { ...e.attrs, style: { ...e.style } }
          );
        }, [n]);
        if (t.style) {
          const e = {};
          Se(e, t.style, t), (a.style = { ...e, ...a.style });
        }
        return a;
      }
      function Oe() {
        let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
        return (n, i, r, a, o) => {
          let { latestValues: s } = a;
          const l = (H(n) ? Ie : Me)(i, s, o, n),
            c = (function (e, t, n) {
              const i = {};
              for (const r in e)
                ("values" === r && "object" === typeof e.values) ||
                  ((Ae(r) ||
                    (!0 === n && we(r)) ||
                    (!t && !we(r)) ||
                    (e.draggable && r.startsWith("onDrag"))) &&
                    (i[r] = e[r]));
              return i;
            })(i, "string" === typeof n, t),
            u = n !== e.Fragment ? { ...c, ...l, ref: r } : {},
            { children: d } = i,
            h = (0, e.useMemo)(() => (Y(d) ? d.get() : d), [d]);
          return (0, e.createElement)(n, { ...u, children: h });
        };
      }
      function ke(e, t, n, i) {
        let { style: r, vars: a } = t;
        Object.assign(e.style, r, i && i.getProjectionStyles(n));
        for (const o in a) e.style.setProperty(o, a[o]);
      }
      const Fe = new Set([
        "baseFrequency",
        "diffuseConstant",
        "kernelMatrix",
        "kernelUnitLength",
        "keySplines",
        "keyTimes",
        "limitingConeAngle",
        "markerHeight",
        "markerWidth",
        "numOctaves",
        "targetX",
        "targetY",
        "surfaceScale",
        "specularConstant",
        "specularExponent",
        "stdDeviation",
        "tableValues",
        "viewBox",
        "gradientTransform",
        "pathLength",
        "startOffset",
        "textLength",
        "lengthAdjust",
      ]);
      function ze(e, t, n, i) {
        ke(e, t, void 0, i);
        for (const r in t.attrs)
          e.setAttribute(Fe.has(r) ? r : m(r), t.attrs[r]);
      }
      function Be(e, t) {
        const { style: n } = e,
          i = {};
        for (const r in n)
          (Y(n[r]) || (t.style && Y(t.style[r])) || X(r, e)) && (i[r] = n[r]);
        return i;
      }
      function Ve(e, t) {
        const n = Be(e, t);
        for (const i in e)
          if (Y(e[i]) || Y(t[i])) {
            n[
              -1 !== W.indexOf(i)
                ? "attr" + i.charAt(0).toUpperCase() + i.substring(1)
                : i
            ] = e[i];
          }
        return n;
      }
      function He(e, t, n) {
        let i =
          arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
          r =
            arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {};
        return (
          "function" === typeof t && (t = t(void 0 !== n ? n : e.custom, i, r)),
          "string" === typeof t && (t = e.variants && e.variants[t]),
          "function" === typeof t && (t = t(void 0 !== n ? n : e.custom, i, r)),
          t
        );
      }
      function Ge(t) {
        const n = (0, e.useRef)(null);
        return null === n.current && (n.current = t()), n.current;
      }
      const We = (e) => Array.isArray(e),
        je = (e) => Boolean(e && "object" === typeof e && e.mix && e.toValue),
        Xe = (e) => (We(e) ? e[e.length - 1] || 0 : e);
      function Ye(e) {
        const t = Y(e) ? e.get() : e;
        return je(t) ? t.toValue() : t;
      }
      const qe = (t) => (n, i) => {
        const r = (0, e.useContext)(u),
          a = (0, e.useContext)(d),
          o = () =>
            (function (e, t, n, i) {
              let {
                scrapeMotionValuesFromProps: r,
                createRenderState: a,
                onMount: o,
              } = e;
              const s = { latestValues: Ke(t, n, i, r), renderState: a() };
              return o && (s.mount = (e) => o(t, e, s)), s;
            })(t, n, r, a);
        return i ? o() : Ge(o);
      };
      function Ke(e, t, n, i) {
        const r = {},
          a = i(e, {});
        for (const h in a) r[h] = Ye(a[h]);
        let { initial: o, animate: s } = e;
        const l = C(e),
          c = P(e);
        t &&
          c &&
          !l &&
          !1 !== e.inherit &&
          (void 0 === o && (o = t.initial), void 0 === s && (s = t.animate));
        let u = !!n && !1 === n.initial;
        u = u || !1 === o;
        const d = u ? s : o;
        if (d && "boolean" !== typeof d && !w(d)) {
          (Array.isArray(d) ? d : [d]).forEach((t) => {
            const n = He(e, t);
            if (!n) return;
            const { transitionEnd: i, transition: a, ...o } = n;
            for (const e in o) {
              let t = o[e];
              if (Array.isArray(t)) {
                t = t[u ? t.length - 1 : 0];
              }
              null !== t && (r[e] = t);
            }
            for (const e in i) r[e] = i[e];
          });
        }
        return r;
      }
      const {
        schedule: Ze,
        cancel: Je,
        state: Qe,
        steps: $e,
      } = b(
        "undefined" !== typeof requestAnimationFrame
          ? requestAnimationFrame
          : i,
        !0
      ),
        et = {
          useVisualState: qe({
            scrapeMotionValuesFromProps: Ve,
            createRenderState: De,
            onMount: (e, t, n) => {
              let { renderState: i, latestValues: r } = n;
              Ze.read(() => {
                try {
                  i.dimensions =
                    "function" === typeof t.getBBox
                      ? t.getBBox()
                      : t.getBoundingClientRect();
                } catch (e) {
                  i.dimensions = { x: 0, y: 0, width: 0, height: 0 };
                }
              }),
                Ze.render(() => {
                  Ne(
                    i,
                    r,
                    { enableHardwareAcceleration: !1 },
                    Ue(t.tagName),
                    e.transformTemplate
                  ),
                    ze(t, i);
                });
            },
          }),
        },
        tt = {
          useVisualState: qe({
            scrapeMotionValuesFromProps: Be,
            createRenderState: be,
          }),
        };
      function nt(e, t, n) {
        let i =
          arguments.length > 3 && void 0 !== arguments[3]
            ? arguments[3]
            : { passive: !0 };
        return e.addEventListener(t, n, i), () => e.removeEventListener(t, n);
      }
      const it = (e) =>
        "mouse" === e.pointerType
          ? "number" !== typeof e.button || e.button <= 0
          : !1 !== e.isPrimary;
      function rt(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1]
            ? arguments[1]
            : "page";
        return { point: { x: e[t + "X"], y: e[t + "Y"] } };
      }
      const at = (e) => (t) => it(t) && e(t, rt(t));
      function ot(e, t, n, i) {
        return nt(e, t, at(n), i);
      }
      const st = (e, t) => (n) => t(e(n)),
        lt = function () {
          for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
            t[n] = arguments[n];
          return t.reduce(st);
        };
      function ct(e) {
        let t = null;
        return () => {
          const n = () => {
            t = null;
          };
          return null === t && ((t = e), n);
        };
      }
      const ut = ct("dragHorizontal"),
        dt = ct("dragVertical");
      function ht(e) {
        let t = !1;
        if ("y" === e) t = dt();
        else if ("x" === e) t = ut();
        else {
          const e = ut(),
            n = dt();
          e && n
            ? (t = () => {
              e(), n();
            })
            : (e && e(), n && n());
        }
        return t;
      }
      function pt() {
        const e = ht(!0);
        return !e || (e(), !1);
      }
      class ft {
        constructor(e) {
          (this.isMounted = !1), (this.node = e);
        }
        update() { }
      }
      function mt(e, t) {
        const n = "pointer" + (t ? "enter" : "leave"),
          i = "onHover" + (t ? "Start" : "End");
        return ot(
          e.current,
          n,
          (n, r) => {
            if ("touch" === n.pointerType || pt()) return;
            const a = e.getProps();
            e.animationState &&
              a.whileHover &&
              e.animationState.setActive("whileHover", t),
              a[i] && Ze.update(() => a[i](n, r));
          },
          { passive: !e.getProps()[i] }
        );
      }
      const gt = (e, t) => !!t && (e === t || gt(e, t.parentElement));
      function vt(e, t) {
        if (!t) return;
        const n = new PointerEvent("pointer" + e);
        t(n, rt(n));
      }
      const _t = new WeakMap(),
        yt = new WeakMap(),
        xt = (e) => {
          const t = _t.get(e.target);
          t && t(e);
        },
        bt = (e) => {
          e.forEach(xt);
        };
      function St(e, t, n) {
        const i = (function (e) {
          let { root: t, ...n } = e;
          const i = t || document;
          yt.has(i) || yt.set(i, {});
          const r = yt.get(i),
            a = JSON.stringify(n);
          return (
            r[a] || (r[a] = new IntersectionObserver(bt, { root: t, ...n })),
            r[a]
          );
        })(t);
        return (
          _t.set(e, n),
          i.observe(e),
          () => {
            _t.delete(e), i.unobserve(e);
          }
        );
      }
      const Et = { some: 0, all: 1 };
      const Mt = {
        inView: {
          Feature: class extends ft {
            constructor() {
              super(...arguments),
                (this.hasEnteredView = !1),
                (this.isInView = !1);
            }
            startObserver() {
              this.unmount();
              const { viewport: e = {} } = this.node.getProps(),
                { root: t, margin: n, amount: i = "some", once: r } = e,
                a = {
                  root: t ? t.current : void 0,
                  rootMargin: n,
                  threshold: "number" === typeof i ? i : Et[i],
                };
              return St(this.node.current, a, (e) => {
                const { isIntersecting: t } = e;
                if (this.isInView === t) return;
                if (((this.isInView = t), r && !t && this.hasEnteredView))
                  return;
                t && (this.hasEnteredView = !0),
                  this.node.animationState &&
                  this.node.animationState.setActive("whileInView", t);
                const { onViewportEnter: n, onViewportLeave: i } =
                  this.node.getProps(),
                  a = t ? n : i;
                a && a(e);
              });
            }
            mount() {
              this.startObserver();
            }
            update() {
              if ("undefined" === typeof IntersectionObserver) return;
              const { props: e, prevProps: t } = this.node,
                n = ["amount", "margin", "root"].some(
                  (function (e) {
                    let { viewport: t = {} } = e,
                      { viewport: n = {} } =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : {};
                    return (e) => t[e] !== n[e];
                  })(e, t)
                );
              n && this.startObserver();
            }
            unmount() { }
          },
        },
        tap: {
          Feature: class extends ft {
            constructor() {
              super(...arguments),
                (this.removeStartListeners = i),
                (this.removeEndListeners = i),
                (this.removeAccessibleListeners = i),
                (this.startPointerPress = (e, t) => {
                  if (this.isPressing) return;
                  this.removeEndListeners();
                  const n = this.node.getProps(),
                    i = ot(
                      window,
                      "pointerup",
                      (e, t) => {
                        if (!this.checkPressEnd()) return;
                        const {
                          onTap: n,
                          onTapCancel: i,
                          globalTapTarget: r,
                        } = this.node.getProps();
                        Ze.update(() => {
                          r || gt(this.node.current, e.target)
                            ? n && n(e, t)
                            : i && i(e, t);
                        });
                      },
                      { passive: !(n.onTap || n.onPointerUp) }
                    ),
                    r = ot(
                      window,
                      "pointercancel",
                      (e, t) => this.cancelPress(e, t),
                      { passive: !(n.onTapCancel || n.onPointerCancel) }
                    );
                  (this.removeEndListeners = lt(i, r)), this.startPress(e, t);
                }),
                (this.startAccessiblePress = () => {
                  const e = nt(this.node.current, "keydown", (e) => {
                    if ("Enter" !== e.key || this.isPressing) return;
                    this.removeEndListeners(),
                      (this.removeEndListeners = nt(
                        this.node.current,
                        "keyup",
                        (e) => {
                          "Enter" === e.key &&
                            this.checkPressEnd() &&
                            vt("up", (e, t) => {
                              const { onTap: n } = this.node.getProps();
                              n && Ze.update(() => n(e, t));
                            });
                        }
                      )),
                      vt("down", (e, t) => {
                        this.startPress(e, t);
                      });
                  }),
                    t = nt(this.node.current, "blur", () => {
                      this.isPressing &&
                        vt("cancel", (e, t) => this.cancelPress(e, t));
                    });
                  this.removeAccessibleListeners = lt(e, t);
                });
            }
            startPress(e, t) {
              this.isPressing = !0;
              const { onTapStart: n, whileTap: i } = this.node.getProps();
              i &&
                this.node.animationState &&
                this.node.animationState.setActive("whileTap", !0),
                n && Ze.update(() => n(e, t));
            }
            checkPressEnd() {
              this.removeEndListeners(), (this.isPressing = !1);
              return (
                this.node.getProps().whileTap &&
                this.node.animationState &&
                this.node.animationState.setActive("whileTap", !1),
                !pt()
              );
            }
            cancelPress(e, t) {
              if (!this.checkPressEnd()) return;
              const { onTapCancel: n } = this.node.getProps();
              n && Ze.update(() => n(e, t));
            }
            mount() {
              const e = this.node.getProps(),
                t = ot(
                  e.globalTapTarget ? window : this.node.current,
                  "pointerdown",
                  this.startPointerPress,
                  { passive: !(e.onTapStart || e.onPointerStart) }
                ),
                n = nt(this.node.current, "focus", this.startAccessiblePress);
              this.removeStartListeners = lt(t, n);
            }
            unmount() {
              this.removeStartListeners(),
                this.removeEndListeners(),
                this.removeAccessibleListeners();
            }
          },
        },
        focus: {
          Feature: class extends ft {
            constructor() {
              super(...arguments), (this.isActive = !1);
            }
            onFocus() {
              let e = !1;
              try {
                e = this.node.current.matches(":focus-visible");
              } catch (t) {
                e = !0;
              }
              e &&
                this.node.animationState &&
                (this.node.animationState.setActive("whileFocus", !0),
                  (this.isActive = !0));
            }
            onBlur() {
              this.isActive &&
                this.node.animationState &&
                (this.node.animationState.setActive("whileFocus", !1),
                  (this.isActive = !1));
            }
            mount() {
              this.unmount = lt(
                nt(this.node.current, "focus", () => this.onFocus()),
                nt(this.node.current, "blur", () => this.onBlur())
              );
            }
            unmount() { }
          },
        },
        hover: {
          Feature: class extends ft {
            mount() {
              this.unmount = lt(mt(this.node, !0), mt(this.node, !1));
            }
            unmount() { }
          },
        },
      };
      function Tt(e, t) {
        if (!Array.isArray(t)) return !1;
        const n = t.length;
        if (n !== e.length) return !1;
        for (let i = 0; i < n; i++) if (t[i] !== e[i]) return !1;
        return !0;
      }
      function wt(e, t, n) {
        const i = e.getProps();
        return He(
          i,
          t,
          void 0 !== n ? n : i.custom,
          (function (e) {
            const t = {};
            return e.values.forEach((e, n) => (t[n] = e.get())), t;
          })(e),
          (function (e) {
            const t = {};
            return e.values.forEach((e, n) => (t[n] = e.getVelocity())), t;
          })(e)
        );
      }
      const At = (e) => 1e3 * e,
        Rt = (e) => e / 1e3,
        Ct = !1,
        Pt = (e) => Array.isArray(e) && "number" === typeof e[0];
      function Lt(e) {
        return Boolean(
          !e ||
          ("string" === typeof e && Dt[e]) ||
          Pt(e) ||
          (Array.isArray(e) && e.every(Lt))
        );
      }
      const Nt = (e) => {
        let [t, n, i, r] = e;
        return "cubic-bezier("
          .concat(t, ", ")
          .concat(n, ", ")
          .concat(i, ", ")
          .concat(r, ")");
      },
        Dt = {
          linear: "linear",
          ease: "ease",
          easeIn: "ease-in",
          easeOut: "ease-out",
          easeInOut: "ease-in-out",
          circIn: Nt([0, 0.65, 0.55, 1]),
          circOut: Nt([0.55, 0, 1, 0.45]),
          backIn: Nt([0.31, 0.01, 0.66, -0.59]),
          backOut: Nt([0.33, 1.53, 0.69, 0.99]),
        };
      function Ut(e) {
        if (e) return Pt(e) ? Nt(e) : Array.isArray(e) ? e.map(Ut) : Dt[e];
      }
      const It = (e, t, n) =>
        (((1 - 3 * n + 3 * t) * e + (3 * n - 6 * t)) * e + 3 * t) * e,
        Ot = 1e-7,
        kt = 12;
      function Ft(e, t, n, r) {
        if (e === t && n === r) return i;
        const a = (t) =>
          (function (e, t, n, i, r) {
            let a,
              o,
              s = 0;
            do {
              (o = t + (n - t) / 2),
                (a = It(o, i, r) - e),
                a > 0 ? (n = o) : (t = o);
            } while (Math.abs(a) > Ot && ++s < kt);
            return o;
          })(t, 0, 1, e, n);
        return (e) => (0 === e || 1 === e ? e : It(a(e), t, r));
      }
      const zt = Ft(0.42, 0, 1, 1),
        Bt = Ft(0, 0, 0.58, 1),
        Vt = Ft(0.42, 0, 0.58, 1),
        Ht = (e) => Array.isArray(e) && "number" !== typeof e[0],
        Gt = (e) => (t) => t <= 0.5 ? e(2 * t) / 2 : (2 - e(2 * (1 - t))) / 2,
        Wt = (e) => (t) => 1 - e(1 - t),
        jt = (e) => 1 - Math.sin(Math.acos(e)),
        Xt = Wt(jt),
        Yt = Gt(jt),
        qt = Ft(0.33, 1.53, 0.69, 0.99),
        Kt = Wt(qt),
        Zt = Gt(Kt),
        Jt = {
          linear: i,
          easeIn: zt,
          easeInOut: Vt,
          easeOut: Bt,
          circIn: jt,
          circInOut: Yt,
          circOut: Xt,
          backIn: Kt,
          backInOut: Zt,
          backOut: qt,
          anticipate: (e) =>
            (e *= 2) < 1 ? 0.5 * Kt(e) : 0.5 * (2 - Math.pow(2, -10 * (e - 1))),
        },
        Qt = (e) => {
          if (Array.isArray(e)) {
            a(
              4 === e.length,
              "Cubic bezier arrays must contain four numerical values."
            );
            const [t, n, i, r] = e;
            return Ft(t, n, i, r);
          }
          return "string" === typeof e
            ? (a(void 0 !== Jt[e], "Invalid easing type '".concat(e, "'")),
              Jt[e])
            : e;
        },
        $t = (e, t, n) => {
          const i = t - e;
          return 0 === i ? 1 : (n - e) / i;
        },
        en = (e, t, n) => e + (t - e) * n;
      function tn(e, t, n) {
        return (
          n < 0 && (n += 1),
          n > 1 && (n -= 1),
          n < 1 / 6
            ? e + 6 * (t - e) * n
            : n < 0.5
              ? t
              : n < 2 / 3
                ? e + (t - e) * (2 / 3 - n) * 6
                : e
        );
      }
      const nn = (e, t) => (n) =>
        Boolean(
          (ue(n) && ce.test(n) && n.startsWith(e)) ||
          (t && Object.prototype.hasOwnProperty.call(n, t))
        ),
        rn = (e, t, n) => (i) => {
          if (!ue(i)) return i;
          const [r, a, o, s] = i.match(se);
          return {
            [e]: parseFloat(r),
            [t]: parseFloat(a),
            [n]: parseFloat(o),
            alpha: void 0 !== s ? parseFloat(s) : 1,
          };
        },
        an = { ...ie, transform: (e) => Math.round(((e) => ne(0, 255, e))(e)) },
        on = {
          test: nn("rgb", "red"),
          parse: rn("red", "green", "blue"),
          transform: (e) => {
            let { red: t, green: n, blue: i, alpha: r = 1 } = e;
            return (
              "rgba(" +
              an.transform(t) +
              ", " +
              an.transform(n) +
              ", " +
              an.transform(i) +
              ", " +
              oe(re.transform(r)) +
              ")"
            );
          },
        };
      const sn = {
        test: nn("#"),
        parse: function (e) {
          let t = "",
            n = "",
            i = "",
            r = "";
          return (
            e.length > 5
              ? ((t = e.substring(1, 3)),
                (n = e.substring(3, 5)),
                (i = e.substring(5, 7)),
                (r = e.substring(7, 9)))
              : ((t = e.substring(1, 2)),
                (n = e.substring(2, 3)),
                (i = e.substring(3, 4)),
                (r = e.substring(4, 5)),
                (t += t),
                (n += n),
                (i += i),
                (r += r)),
            {
              red: parseInt(t, 16),
              green: parseInt(n, 16),
              blue: parseInt(i, 16),
              alpha: r ? parseInt(r, 16) / 255 : 1,
            }
          );
        },
        transform: on.transform,
      },
        ln = {
          test: nn("hsl", "hue"),
          parse: rn("hue", "saturation", "lightness"),
          transform: (e) => {
            let { hue: t, saturation: n, lightness: i, alpha: r = 1 } = e;
            return (
              "hsla(" +
              Math.round(t) +
              ", " +
              pe.transform(oe(n)) +
              ", " +
              pe.transform(oe(i)) +
              ", " +
              oe(re.transform(r)) +
              ")"
            );
          },
        },
        cn = (e, t, n) => {
          const i = e * e,
            r = n * (t * t - i) + i;
          return r < 0 ? 0 : Math.sqrt(r);
        },
        un = [sn, on, ln];
      function dn(e) {
        const t = ((e) => un.find((t) => t.test(e)))(e);
        a(
          Boolean(t),
          "'".concat(
            e,
            "' is not an animatable color. Use the equivalent color code instead."
          )
        );
        let n = t.parse(e);
        return (
          t === ln &&
          (n = (function (e) {
            let { hue: t, saturation: n, lightness: i, alpha: r } = e;
            (t /= 360), (n /= 100), (i /= 100);
            let a = 0,
              o = 0,
              s = 0;
            if (n) {
              const e = i < 0.5 ? i * (1 + n) : i + n - i * n,
                r = 2 * i - e;
              (a = tn(r, e, t + 1 / 3)),
                (o = tn(r, e, t)),
                (s = tn(r, e, t - 1 / 3));
            } else a = o = s = i;
            return {
              red: Math.round(255 * a),
              green: Math.round(255 * o),
              blue: Math.round(255 * s),
              alpha: r,
            };
          })(n)),
          n
        );
      }
      const hn = (e, t) => {
        const n = dn(e),
          i = dn(t),
          r = { ...n };
        return (e) => (
          (r.red = cn(n.red, i.red, e)),
          (r.green = cn(n.green, i.green, e)),
          (r.blue = cn(n.blue, i.blue, e)),
          (r.alpha = en(n.alpha, i.alpha, e)),
          on.transform(r)
        );
      },
        pn = {
          test: (e) => on.test(e) || sn.test(e) || ln.test(e),
          parse: (e) =>
            on.test(e) ? on.parse(e) : ln.test(e) ? ln.parse(e) : sn.parse(e),
          transform: (e) =>
            ue(e)
              ? e
              : e.hasOwnProperty("red")
                ? on.transform(e)
                : ln.transform(e),
        };
      const fn = "number",
        mn = "color",
        gn = "var",
        vn = "var(",
        _n = "${}",
        yn =
          /(var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\))|(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))|((-)?([\d]*\.?[\d])+)/gi;
      function xn(e) {
        const t = e.toString(),
          n = t.match(yn) || [],
          i = [],
          r = { color: [], number: [], var: [] },
          a = [];
        for (let o = 0; o < n.length; o++) {
          const e = n[o];
          pn.test(e)
            ? (r.color.push(o), a.push(mn), i.push(pn.parse(e)))
            : e.startsWith(vn)
              ? (r.var.push(o), a.push(gn), i.push(e))
              : (r.number.push(o), a.push(fn), i.push(parseFloat(e)));
        }
        return {
          values: i,
          split: t.replace(yn, _n).split(_n),
          indexes: r,
          types: a,
        };
      }
      function bn(e) {
        return xn(e).values;
      }
      function Sn(e) {
        const { split: t, types: n } = xn(e),
          i = t.length;
        return (e) => {
          let r = "";
          for (let a = 0; a < i; a++)
            if (((r += t[a]), void 0 !== e[a])) {
              const t = n[a];
              r += t === fn ? oe(e[a]) : t === mn ? pn.transform(e[a]) : e[a];
            }
          return r;
        };
      }
      const En = (e) => ("number" === typeof e ? 0 : e);
      const Mn = {
        test: function (e) {
          var t, n;
          return (
            isNaN(e) &&
            ue(e) &&
            ((null === (t = e.match(se)) || void 0 === t ? void 0 : t.length) ||
              0) +
            ((null === (n = e.match(le)) || void 0 === n
              ? void 0
              : n.length) || 0) >
            0
          );
        },
        parse: bn,
        createTransformer: Sn,
        getAnimatableNone: function (e) {
          const t = bn(e);
          return Sn(e)(t.map(En));
        },
      };
      function Tn(e, t) {
        return (n) => (n > 0 ? t : e);
      }
      function wn(e, t) {
        return (n) => en(e, t, n);
      }
      function An(e) {
        return "number" === typeof e
          ? wn
          : "string" === typeof e
            ? $(e)
              ? Tn
              : pn.test(e)
                ? hn
                : Pn
            : Array.isArray(e)
              ? Rn
              : "object" === typeof e
                ? pn.test(e)
                  ? hn
                  : Cn
                : Tn;
      }
      function Rn(e, t) {
        const n = [...e],
          i = n.length,
          r = e.map((e, n) => An(e)(e, t[n]));
        return (e) => {
          for (let t = 0; t < i; t++) n[t] = r[t](e);
          return n;
        };
      }
      function Cn(e, t) {
        const n = { ...e, ...t },
          i = {};
        for (const r in n)
          void 0 !== e[r] && void 0 !== t[r] && (i[r] = An(e[r])(e[r], t[r]));
        return (e) => {
          for (const t in i) n[t] = i[t](e);
          return n;
        };
      }
      const Pn = (e, t) => {
        const n = Mn.createTransformer(t),
          i = xn(e),
          a = xn(t);
        return i.indexes.var.length === a.indexes.var.length &&
          i.indexes.color.length === a.indexes.color.length &&
          i.indexes.number.length >= a.indexes.number.length
          ? lt(
            Rn(
              (function (e, t) {
                var n;
                const i = [],
                  r = { color: 0, var: 0, number: 0 };
                for (let a = 0; a < t.values.length; a++) {
                  const o = t.types[a],
                    s = e.indexes[o][r[o]],
                    l = null !== (n = e.values[s]) && void 0 !== n ? n : 0;
                  (i[a] = l), r[o]++;
                }
                return i;
              })(i, a),
              a.values
            ),
            n
          )
          : (r(
            !0,
            "Complex values '"
              .concat(e, "' and '")
              .concat(
                t,
                "' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition."
              )
          ),
            Tn(e, t));
      };
      function Ln(e, t, n) {
        if (
          "number" === typeof e &&
          "number" === typeof t &&
          "number" === typeof n
        )
          return en(e, t, n);
        return An(e)(e, t);
      }
      function Nn(e, t) {
        let {
          clamp: n = !0,
          ease: r,
          mixer: o,
        } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        const s = e.length;
        if (
          (a(
            s === t.length,
            "Both input and output ranges must be the same length"
          ),
            1 === s)
        )
          return () => t[0];
        e[0] > e[s - 1] && ((e = [...e].reverse()), (t = [...t].reverse()));
        const l = (function (e, t, n) {
          const r = [],
            a = n || Ln,
            o = e.length - 1;
          for (let s = 0; s < o; s++) {
            let n = a(e[s], e[s + 1]);
            if (t) {
              const e = Array.isArray(t) ? t[s] || i : t;
              n = lt(e, n);
            }
            r.push(n);
          }
          return r;
        })(t, r, o),
          c = l.length,
          u = (t) => {
            let n = 0;
            if (c > 1) for (; n < e.length - 2 && !(t < e[n + 1]); n++);
            const i = $t(e[n], e[n + 1], t);
            return l[n](i);
          };
        return n ? (t) => u(ne(e[0], e[s - 1], t)) : u;
      }
      function Dn(e) {
        const t = [0];
        return (
          (function (e, t) {
            const n = e[e.length - 1];
            for (let i = 1; i <= t; i++) {
              const r = $t(0, t, i);
              e.push(en(n, 1, r));
            }
          })(t, e.length - 1),
          t
        );
      }
      function Un(e) {
        let {
          duration: t = 300,
          keyframes: n,
          times: i,
          ease: r = "easeInOut",
        } = e;
        const a = Ht(r) ? r.map(Qt) : Qt(r),
          o = { done: !1, value: n[0] },
          s = (function (e, t) {
            return e.map((e) => e * t);
          })(i && i.length === n.length ? i : Dn(n), t),
          l = Nn(s, n, {
            ease: Array.isArray(a)
              ? a
              : ((c = n),
                (u = a),
                c.map(() => u || Vt).splice(0, c.length - 1)),
          });
        var c, u;
        return {
          calculatedDuration: t,
          next: (e) => ((o.value = l(e)), (o.done = e >= t), o),
        };
      }
      function In(e, t) {
        return t ? e * (1e3 / t) : 0;
      }
      const On = 5;
      function kn(e, t, n) {
        const i = Math.max(t - On, 0);
        return In(n - e(i), t - i);
      }
      const Fn = 0.001,
        zn = 0.01,
        Bn = 10,
        Vn = 0.05,
        Hn = 1;
      function Gn(e) {
        let t,
          n,
          {
            duration: i = 800,
            bounce: a = 0.25,
            velocity: o = 0,
            mass: s = 1,
          } = e;
        r(i <= At(Bn), "Spring duration must be 10 seconds or less");
        let l = 1 - a;
        (l = ne(Vn, Hn, l)),
          (i = ne(zn, Bn, Rt(i))),
          l < 1
            ? ((t = (e) => {
              const t = e * l,
                n = t * i,
                r = t - o,
                a = jn(e, l),
                s = Math.exp(-n);
              return Fn - (r / a) * s;
            }),
              (n = (e) => {
                const n = e * l * i,
                  r = n * o + o,
                  a = Math.pow(l, 2) * Math.pow(e, 2) * i,
                  s = Math.exp(-n),
                  c = jn(Math.pow(e, 2), l);
                return ((-t(e) + Fn > 0 ? -1 : 1) * ((r - a) * s)) / c;
              }))
            : ((t = (e) => Math.exp(-e * i) * ((e - o) * i + 1) - Fn),
              (n = (e) => Math.exp(-e * i) * (i * i * (o - e))));
        const c = (function (e, t, n) {
          let i = n;
          for (let r = 1; r < Wn; r++) i -= e(i) / t(i);
          return i;
        })(t, n, 5 / i);
        if (((i = At(i)), isNaN(c)))
          return { stiffness: 100, damping: 10, duration: i };
        {
          const e = Math.pow(c, 2) * s;
          return {
            stiffness: e,
            damping: 2 * l * Math.sqrt(s * e),
            duration: i,
          };
        }
      }
      const Wn = 12;
      function jn(e, t) {
        return e * Math.sqrt(1 - t * t);
      }
      const Xn = ["duration", "bounce"],
        Yn = ["stiffness", "damping", "mass"];
      function qn(e, t) {
        return t.some((t) => void 0 !== e[t]);
      }
      function Kn(e) {
        let { keyframes: t, restDelta: n, restSpeed: i, ...r } = e;
        const a = t[0],
          o = t[t.length - 1],
          s = { done: !1, value: a },
          {
            stiffness: l,
            damping: c,
            mass: u,
            duration: d,
            velocity: h,
            isResolvedFromDuration: p,
          } = (function (e) {
            let t = {
              velocity: 0,
              stiffness: 100,
              damping: 10,
              mass: 1,
              isResolvedFromDuration: !1,
              ...e,
            };
            if (!qn(e, Yn) && qn(e, Xn)) {
              const n = Gn(e);
              (t = { ...t, ...n, mass: 1 }), (t.isResolvedFromDuration = !0);
            }
            return t;
          })({ ...r, velocity: -Rt(r.velocity || 0) }),
          f = h || 0,
          m = c / (2 * Math.sqrt(l * u)),
          g = o - a,
          v = Rt(Math.sqrt(l / u)),
          _ = Math.abs(g) < 5;
        let y;
        if ((i || (i = _ ? 0.01 : 2), n || (n = _ ? 0.005 : 0.5), m < 1)) {
          const e = jn(v, m);
          y = (t) => {
            const n = Math.exp(-m * v * t);
            return (
              o -
              n *
              (((f + m * v * g) / e) * Math.sin(e * t) + g * Math.cos(e * t))
            );
          };
        } else if (1 === m)
          y = (e) => o - Math.exp(-v * e) * (g + (f + v * g) * e);
        else {
          const e = v * Math.sqrt(m * m - 1);
          y = (t) => {
            const n = Math.exp(-m * v * t),
              i = Math.min(e * t, 300);
            return (
              o -
              (n * ((f + m * v * g) * Math.sinh(i) + e * g * Math.cosh(i))) / e
            );
          };
        }
        return {
          calculatedDuration: (p && d) || null,
          next: (e) => {
            const t = y(e);
            if (p) s.done = e >= d;
            else {
              let r = f;
              0 !== e && (r = m < 1 ? kn(y, e, t) : 0);
              const a = Math.abs(r) <= i,
                l = Math.abs(o - t) <= n;
              s.done = a && l;
            }
            return (s.value = s.done ? o : t), s;
          },
        };
      }
      function Zn(e) {
        let {
          keyframes: t,
          velocity: n = 0,
          power: i = 0.8,
          timeConstant: r = 325,
          bounceDamping: a = 10,
          bounceStiffness: o = 500,
          modifyTarget: s,
          min: l,
          max: c,
          restDelta: u = 0.5,
          restSpeed: d,
        } = e;
        const h = t[0],
          p = { done: !1, value: h },
          f = (e) =>
            void 0 === l
              ? c
              : void 0 === c || Math.abs(l - e) < Math.abs(c - e)
                ? l
                : c;
        let m = i * n;
        const g = h + m,
          v = void 0 === s ? g : s(g);
        v !== g && (m = v - h);
        const _ = (e) => -m * Math.exp(-e / r),
          y = (e) => v + _(e),
          x = (e) => {
            const t = _(e),
              n = y(e);
            (p.done = Math.abs(t) <= u), (p.value = p.done ? v : n);
          };
        let b, S;
        const E = (e) => {
          ((e) => (void 0 !== l && e < l) || (void 0 !== c && e > c))(
            p.value
          ) &&
            ((b = e),
              (S = Kn({
                keyframes: [p.value, f(p.value)],
                velocity: kn(y, e, p.value),
                damping: a,
                stiffness: o,
                restDelta: u,
                restSpeed: d,
              })));
        };
        return (
          E(0),
          {
            calculatedDuration: null,
            next: (e) => {
              let t = !1;
              return (
                S || void 0 !== b || ((t = !0), x(e), E(e)),
                void 0 !== b && e > b ? S.next(e - b) : (!t && x(e), p)
              );
            },
          }
        );
      }
      let Jn;
      function Qn() {
        Jn = void 0;
      }
      const $n = {
        now: () => (
          void 0 === Jn &&
          $n.set(Qe.isProcessing || _ ? Qe.timestamp : performance.now()),
          Jn
        ),
        set: (e) => {
          (Jn = e), queueMicrotask(Qn);
        },
      },
        ei = (e) => {
          const t = (t) => {
            let { timestamp: n } = t;
            return e(n);
          };
          return {
            start: () => Ze.update(t, !0),
            stop: () => Je(t),
            now: () => (Qe.isProcessing ? Qe.timestamp : $n.now()),
          };
        },
        ti = 2e4;
      function ni(e) {
        let t = 0;
        let n = e.next(t);
        for (; !n.done && t < ti;) (t += 50), (n = e.next(t));
        return t >= ti ? 1 / 0 : t;
      }
      const ii = {
        decay: Zn,
        inertia: Zn,
        tween: Un,
        keyframes: Un,
        spring: Kn,
      },
        ri = (e) => e / 100;
      function ai(e) {
        let t,
          n,
          {
            autoplay: i = !0,
            delay: r = 0,
            driver: a = ei,
            keyframes: o,
            type: s = "keyframes",
            repeat: l = 0,
            repeatDelay: c = 0,
            repeatType: u = "loop",
            onPlay: d,
            onStop: h,
            onComplete: p,
            onUpdate: f,
            ...m
          } = e,
          g = 1,
          v = !1;
        const _ = () => {
          n = new Promise((e) => {
            t = e;
          });
        };
        let y;
        _();
        const x = ii[s] || Un;
        let b;
        x !== Un &&
          "number" !== typeof o[0] &&
          ((b = lt(ri, Ln(o[0], o[1]))), (o = [0, 100]));
        const S = x({ ...m, keyframes: o });
        let E;
        "mirror" === u &&
          (E = x({
            ...m,
            keyframes: [...o].reverse(),
            velocity: -(m.velocity || 0),
          }));
        let M = "idle",
          T = null,
          w = null,
          A = null;
        null === S.calculatedDuration && l && (S.calculatedDuration = ni(S));
        const { calculatedDuration: R } = S;
        let C = 1 / 0,
          P = 1 / 0;
        null !== R && ((C = R + c), (P = C * (l + 1) - c));
        let L = 0;
        const N = (e) => {
          if (null === w) return;
          g > 0 && (w = Math.min(w, e)),
            g < 0 && (w = Math.min(e - P / g, w)),
            (L = null !== T ? T : Math.round(e - w) * g);
          const t = L - r * (g >= 0 ? 1 : -1),
            n = g >= 0 ? t < 0 : t > P;
          (L = Math.max(t, 0)), "finished" === M && null === T && (L = P);
          let i = L,
            a = S;
          if (l) {
            const e = Math.min(L, P) / C;
            let t = Math.floor(e),
              n = e % 1;
            !n && e >= 1 && (n = 1), 1 === n && t--, (t = Math.min(t, l + 1));
            Boolean(t % 2) &&
              ("reverse" === u
                ? ((n = 1 - n), c && (n -= c / C))
                : "mirror" === u && (a = E)),
              (i = ne(0, 1, n) * C);
          }
          const s = n ? { done: !1, value: o[0] } : a.next(i);
          b && (s.value = b(s.value));
          let { done: d } = s;
          n || null === R || (d = g >= 0 ? L >= P : L <= 0);
          const h =
            null === T && ("finished" === M || ("running" === M && d));
          return f && f(s.value), h && I(), s;
        },
          D = () => {
            y && y.stop(), (y = void 0);
          },
          U = () => {
            (M = "idle"), D(), t(), _(), (w = A = null);
          },
          I = () => {
            (M = "finished"), p && p(), D(), t();
          },
          O = () => {
            if (v) return;
            y || (y = a(N));
            const e = y.now();
            d && d(),
              null !== T ? (w = e - T) : (w && "finished" !== M) || (w = e),
              "finished" === M && _(),
              (A = w),
              (T = null),
              (M = "running"),
              y.start();
          };
        i && O();
        const k = {
          then: (e, t) => n.then(e, t),
          get time() {
            return Rt(L);
          },
          set time(e) {
            (e = At(e)),
              (L = e),
              null === T && y && 0 !== g ? (w = y.now() - e / g) : (T = e);
          },
          get duration() {
            const e =
              null === S.calculatedDuration ? ni(S) : S.calculatedDuration;
            return Rt(e);
          },
          get speed() {
            return g;
          },
          set speed(e) {
            e !== g && y && ((g = e), (k.time = Rt(L)));
          },
          get state() {
            return M;
          },
          play: O,
          pause: () => {
            (M = "paused"), (T = L);
          },
          stop: () => {
            (v = !0), "idle" !== M && ((M = "idle"), h && h(), U());
          },
          cancel: () => {
            null !== A && N(A), U();
          },
          complete: () => {
            M = "finished";
          },
          sample: (e) => ((w = 0), N(e)),
        };
        return k;
      }
      const oi = (function (e) {
        let t;
        return () => (void 0 === t && (t = e()), t);
      })(() => Object.hasOwnProperty.call(Element.prototype, "animate")),
        si = new Set(["opacity", "clipPath", "filter", "transform"]);
      function li(e, t, n) {
        let { onUpdate: r, onComplete: a, ...o } = n;
        if (
          !(
            oi() &&
            si.has(t) &&
            !o.repeatDelay &&
            "mirror" !== o.repeatType &&
            0 !== o.damping &&
            "inertia" !== o.type
          )
        )
          return !1;
        let s,
          l,
          c = !1,
          u = !1;
        const d = () => {
          l = new Promise((e) => {
            s = e;
          });
        };
        d();
        let { keyframes: h, duration: p = 300, ease: f, times: m } = o;
        if (
          ((e, t) =>
            "spring" === t.type || "backgroundColor" === e || !Lt(t.ease))(t, o)
        ) {
          const e = ai({ ...o, repeat: 0, delay: 0 });
          let t = { done: !1, value: h[0] };
          const n = [];
          let i = 0;
          for (; !t.done && i < 2e4;)
            (t = e.sample(i)), n.push(t.value), (i += 10);
          (m = void 0), (h = n), (p = i - 10), (f = "linear");
        }
        const g = (function (e, t, n) {
          let {
            delay: i = 0,
            duration: r,
            repeat: a = 0,
            repeatType: o = "loop",
            ease: s,
            times: l,
          } = arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : {};
          const c = { [t]: n };
          l && (c.offset = l);
          const u = Ut(s);
          return (
            Array.isArray(u) && (c.easing = u),
            e.animate(c, {
              delay: i,
              duration: r,
              easing: Array.isArray(u) ? "linear" : u,
              fill: "both",
              iterations: a + 1,
              direction: "reverse" === o ? "alternate" : "normal",
            })
          );
        })(e.owner.current, t, h, { ...o, duration: p, ease: f, times: m }),
          v = () => {
            (u = !1), g.cancel();
          },
          _ = () => {
            (u = !0), Ze.update(v), s(), d();
          };
        g.onfinish = () => {
          u ||
            (e.set(
              (function (e, t) {
                let { repeat: n, repeatType: i = "loop" } = t;
                return e[n && "loop" !== i && n % 2 === 1 ? 0 : e.length - 1];
              })(h, o)
            ),
              a && a(),
              _());
        };
        return {
          then: (e, t) => l.then(e, t),
          attachTimeline: (e) => ((g.timeline = e), (g.onfinish = null), i),
          get time() {
            return Rt(g.currentTime || 0);
          },
          set time(e) {
            g.currentTime = At(e);
          },
          get speed() {
            return g.playbackRate;
          },
          set speed(e) {
            g.playbackRate = e;
          },
          get duration() {
            return Rt(p);
          },
          play: () => {
            c || (g.play(), Je(v));
          },
          pause: () => g.pause(),
          stop: () => {
            if (((c = !0), "idle" === g.playState)) return;
            const { currentTime: t } = g;
            if (t) {
              const n = ai({ ...o, autoplay: !1 });
              e.setWithVelocity(n.sample(t - 10).value, n.sample(t).value, 10);
            }
            _();
          },
          complete: () => {
            u || g.finish();
          },
          cancel: _,
        };
      }
      const ci = { type: "spring", stiffness: 500, damping: 25, restSpeed: 10 },
        ui = { type: "keyframes", duration: 0.8 },
        di = { type: "keyframes", ease: [0.25, 0.1, 0.35, 1], duration: 0.3 },
        hi = (e, t) => {
          let { keyframes: n } = t;
          return n.length > 2
            ? ui
            : j.has(e)
              ? e.startsWith("scale")
                ? {
                  type: "spring",
                  stiffness: 550,
                  damping: 0 === n[1] ? 2 * Math.sqrt(550) : 30,
                  restSpeed: 10,
                }
                : ci
              : di;
        },
        pi = (e, t) =>
          "zIndex" !== e &&
          (!("number" !== typeof t && !Array.isArray(t)) ||
            !(
              "string" !== typeof t ||
              (!Mn.test(t) && "0" !== t) ||
              t.startsWith("url(")
            )),
        fi = new Set(["brightness", "contrast", "saturate", "opacity"]);
      function mi(e) {
        const [t, n] = e.slice(0, -1).split("(");
        if ("drop-shadow" === t) return e;
        const [i] = n.match(se) || [];
        if (!i) return e;
        const r = n.replace(i, "");
        let a = fi.has(t) ? 1 : 0;
        return i !== n && (a *= 100), t + "(" + a + r + ")";
      }
      const gi = /([a-z-]*)\(.*?\)/g,
        vi = {
          ...Mn,
          getAnimatableNone: (e) => {
            const t = e.match(gi);
            return t ? t.map(mi).join(" ") : e;
          },
        },
        _i = {
          ...ye,
          color: pn,
          backgroundColor: pn,
          outlineColor: pn,
          fill: pn,
          stroke: pn,
          borderColor: pn,
          borderTopColor: pn,
          borderRightColor: pn,
          borderBottomColor: pn,
          borderLeftColor: pn,
          filter: vi,
          WebkitFilter: vi,
        },
        yi = (e) => _i[e];
      function xi(e, t) {
        let n = yi(e);
        return (
          n !== vi && (n = Mn),
          n.getAnimatableNone ? n.getAnimatableNone(t) : void 0
        );
      }
      const bi = (e) => /^0[^.\s]+$/.test(e);
      function Si(e) {
        return "number" === typeof e
          ? 0 === e
          : null !== e
            ? "none" === e || "0" === e || bi(e)
            : void 0;
      }
      function Ei(e, t) {
        return e[t] || e.default || e;
      }
      const Mi = function (e, t, n) {
        let a =
          arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
        return (o) => {
          const s = Ei(a, e) || {},
            l = s.delay || a.delay || 0;
          let { elapsed: c = 0 } = a;
          c -= At(l);
          const u = (function (e, t, n, i) {
            const r = pi(t, n);
            let a;
            a = Array.isArray(n) ? [...n] : [null, n];
            const o = void 0 !== i.from ? i.from : e.get();
            let s;
            const l = [];
            for (let c = 0; c < a.length; c++)
              null === a[c] && (a[c] = 0 === c ? o : a[c - 1]),
                Si(a[c]) && l.push(c),
                "string" === typeof a[c] &&
                "none" !== a[c] &&
                "0" !== a[c] &&
                (s = a[c]);
            if (r && l.length && s)
              for (let c = 0; c < l.length; c++) a[l[c]] = xi(t, s);
            return a;
          })(t, e, n, s),
            d = u[0],
            h = u[u.length - 1],
            p = pi(e, d),
            f = pi(e, h);
          r(
            p === f,
            "You are trying to animate "
              .concat(e, ' from "')
              .concat(d, '" to "')
              .concat(h, '". ')
              .concat(
                d,
                " is not an animatable value - to enable this animation set "
              )
              .concat(d, " to a value animatable to ")
              .concat(h, " via the `style` property.")
          );
          let m = {
            keyframes: u,
            velocity: t.getVelocity(),
            ease: "easeOut",
            ...s,
            delay: -c,
            onUpdate: (e) => {
              t.set(e), s.onUpdate && s.onUpdate(e);
            },
            onComplete: () => {
              o(), s.onComplete && s.onComplete();
            },
          };
          if (
            ((function (e) {
              let {
                when: t,
                delay: n,
                delayChildren: i,
                staggerChildren: r,
                staggerDirection: a,
                repeat: o,
                repeatType: s,
                repeatDelay: l,
                from: c,
                elapsed: u,
                ...d
              } = e;
              return !!Object.keys(d).length;
            })(s) || (m = { ...m, ...hi(e, m) }),
              m.duration && (m.duration = At(m.duration)),
              m.repeatDelay && (m.repeatDelay = At(m.repeatDelay)),
              !p || !f || Ct || !1 === s.type || v)
          )
            return (function (e) {
              let { keyframes: t, delay: n, onUpdate: r, onComplete: a } = e;
              const o = () => (
                r && r(t[t.length - 1]),
                a && a(),
                {
                  time: 0,
                  speed: 1,
                  duration: 0,
                  play: i,
                  pause: i,
                  stop: i,
                  then: (e) => (e(), Promise.resolve()),
                  cancel: i,
                  complete: i,
                }
              );
              return n
                ? ai({
                  keyframes: [0, 1],
                  duration: 0,
                  delay: n,
                  onComplete: o,
                })
                : o();
            })(Ct ? { ...m, delay: 0 } : m);
          if (
            !a.isHandoff &&
            t.owner &&
            t.owner.current instanceof HTMLElement &&
            !t.owner.getProps().onUpdate
          ) {
            const n = li(t, e, m);
            if (n) return n;
          }
          return ai(m);
        };
      };
      function Ti(e) {
        return Boolean(Y(e) && e.add);
      }
      const wi = (e) => /^\-?\d*\.?\d+$/.test(e);
      function Ai(e, t) {
        -1 === e.indexOf(t) && e.push(t);
      }
      function Ri(e, t) {
        const n = e.indexOf(t);
        n > -1 && e.splice(n, 1);
      }
      class Ci {
        constructor() {
          this.subscriptions = [];
        }
        add(e) {
          return Ai(this.subscriptions, e), () => Ri(this.subscriptions, e);
        }
        notify(e, t, n) {
          const i = this.subscriptions.length;
          if (i)
            if (1 === i) this.subscriptions[0](e, t, n);
            else
              for (let r = 0; r < i; r++) {
                const i = this.subscriptions[r];
                i && i(e, t, n);
              }
        }
        getSize() {
          return this.subscriptions.length;
        }
        clear() {
          this.subscriptions.length = 0;
        }
      }
      const Pi = { current: void 0 };
      class Li {
        constructor(e) {
          var t = this;
          let n =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          var i;
          (this.version = "11.0.6"),
            (this.canTrackVelocity = !1),
            (this.events = {}),
            (this.updateAndNotify = function (e) {
              let n =
                !(arguments.length > 1 && void 0 !== arguments[1]) ||
                arguments[1];
              const i = $n.now();
              t.updatedAt !== i && t.setPrevFrameValue(),
                (t.prev = t.current),
                t.setCurrent(e),
                t.current !== t.prev &&
                t.events.change &&
                t.events.change.notify(t.current),
                n &&
                t.events.renderRequest &&
                t.events.renderRequest.notify(t.current);
            }),
            (this.hasAnimated = !1),
            this.setCurrent(e),
            (this.canTrackVelocity =
              ((i = this.current), !isNaN(parseFloat(i)))),
            (this.owner = n.owner);
        }
        setCurrent(e) {
          (this.current = e), (this.updatedAt = $n.now());
        }
        setPrevFrameValue() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : this.current;
          (this.prevFrameValue = e), (this.prevUpdatedAt = this.updatedAt);
        }
        onChange(e) {
          return this.on("change", e);
        }
        on(e, t) {
          this.events[e] || (this.events[e] = new Ci());
          const n = this.events[e].add(t);
          return "change" === e
            ? () => {
              n(),
                Ze.read(() => {
                  this.events.change.getSize() || this.stop();
                });
            }
            : n;
        }
        clearListeners() {
          for (const e in this.events) this.events[e].clear();
        }
        attach(e, t) {
          (this.passiveEffect = e), (this.stopPassiveEffect = t);
        }
        set(e) {
          let t =
            !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          t && this.passiveEffect
            ? this.passiveEffect(e, this.updateAndNotify)
            : this.updateAndNotify(e, t);
        }
        setWithVelocity(e, t, n) {
          this.set(t),
            (this.prev = void 0),
            (this.prevFrameValue = e),
            (this.prevUpdatedAt = this.updatedAt - n);
        }
        jump(e) {
          this.updateAndNotify(e),
            (this.prev = e),
            (this.prevUpdatedAt = this.prevFrameValue = void 0),
            this.stop(),
            this.stopPassiveEffect && this.stopPassiveEffect();
        }
        get() {
          return Pi.current && Pi.current.push(this), this.current;
        }
        getPrevious() {
          return this.prev;
        }
        getVelocity() {
          const e = $n.now();
          if (
            !this.canTrackVelocity ||
            void 0 === this.prevFrameValue ||
            e - this.updatedAt > 30
          )
            return 0;
          const t = Math.min(this.updatedAt - this.prevUpdatedAt, 30);
          return In(
            parseFloat(this.current) - parseFloat(this.prevFrameValue),
            t
          );
        }
        start(e) {
          return (
            this.stop(),
            new Promise((t) => {
              (this.hasAnimated = !0),
                (this.animation = e(t)),
                this.events.animationStart &&
                this.events.animationStart.notify();
            }).then(() => {
              this.events.animationComplete &&
                this.events.animationComplete.notify(),
                this.clearAnimation();
            })
          );
        }
        stop() {
          this.animation &&
            (this.animation.stop(),
              this.events.animationCancel &&
              this.events.animationCancel.notify()),
            this.clearAnimation();
        }
        isAnimating() {
          return !!this.animation;
        }
        clearAnimation() {
          delete this.animation;
        }
        destroy() {
          this.clearListeners(),
            this.stop(),
            this.stopPassiveEffect && this.stopPassiveEffect();
        }
      }
      function Ni(e, t) {
        return new Li(e, t);
      }
      const Di = (e) => (t) => t.test(e),
        Ui = [
          ie,
          fe,
          pe,
          he,
          ge,
          me,
          { test: (e) => "auto" === e, parse: (e) => e },
        ],
        Ii = (e) => Ui.find(Di(e)),
        Oi = [...Ui, pn, Mn],
        ki = (e) => Oi.find(Di(e));
      function Fi(e, t, n) {
        e.hasValue(t) ? e.getValue(t).set(n) : e.addValue(t, Ni(n));
      }
      function zi(e, t) {
        const n = wt(e, t);
        let {
          transitionEnd: i = {},
          transition: r = {},
          ...a
        } = n ? e.makeTargetAnimatable(n, !1) : {};
        a = { ...a, ...i };
        for (const o in a) {
          Fi(e, o, Xe(a[o]));
        }
      }
      function Bi(e, t) {
        if (!t) return;
        return (t[e] || t.default || t).from;
      }
      function Vi(e, t) {
        let { protectedKeys: n, needsAnimating: i } = e;
        const r = n.hasOwnProperty(t) && !0 !== i[t];
        return (i[t] = !1), r;
      }
      function Hi(e, t) {
        const n = e.get();
        if (!Array.isArray(t)) return n !== t;
        for (let i = 0; i < t.length; i++) if (t[i] !== n) return !0;
      }
      function Gi(e, t) {
        let {
          delay: n = 0,
          transitionOverride: i,
          type: r,
        } = arguments.length > 2 && void 0 !== arguments[2]
            ? arguments[2]
            : {},
          {
            transition: a = e.getDefaultTransition(),
            transitionEnd: o,
            ...s
          } = e.makeTargetAnimatable(t);
        const l = e.getValue("willChange");
        i && (a = i);
        const c = [],
          u = r && e.animationState && e.animationState.getState()[r];
        for (const d in s) {
          const t = e.getValue(d),
            i = s[d];
          if (!t || void 0 === i || (u && Vi(u, d))) continue;
          const r = { delay: n, elapsed: 0, ...Ei(a || {}, d) };
          if (window.HandoffAppearAnimations) {
            const n = e.getProps()[g];
            if (n) {
              const e = window.HandoffAppearAnimations(n, d, t, Ze);
              null !== e && ((r.elapsed = e), (r.isHandoff = !0));
            }
          }
          let o = !r.isHandoff && !Hi(t, i);
          if (
            ("spring" === r.type && (t.getVelocity() || r.velocity) && (o = !1),
              t.animation && (o = !1),
              o)
          )
            continue;
          t.start(
            Mi(d, t, i, e.shouldReduceMotion && j.has(d) ? { type: !1 } : r)
          );
          const h = t.animation;
          Ti(l) && (l.add(d), h.then(() => l.remove(d))), c.push(h);
        }
        return (
          o &&
          Promise.all(c).then(() => {
            o && zi(e, o);
          }),
          c
        );
      }
      function Wi(e, t) {
        let n =
          arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        const i = wt(e, t, n.custom);
        let { transition: r = e.getDefaultTransition() || {} } = i || {};
        n.transitionOverride && (r = n.transitionOverride);
        const a = i ? () => Promise.all(Gi(e, i, n)) : () => Promise.resolve(),
          o =
            e.variantChildren && e.variantChildren.size
              ? function () {
                let i =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : 0;
                const {
                  delayChildren: a = 0,
                  staggerChildren: o,
                  staggerDirection: s,
                } = r;
                return (function (e, t) {
                  let n =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : 0,
                    i =
                      arguments.length > 3 && void 0 !== arguments[3]
                        ? arguments[3]
                        : 0,
                    r =
                      arguments.length > 4 && void 0 !== arguments[4]
                        ? arguments[4]
                        : 1,
                    a = arguments.length > 5 ? arguments[5] : void 0;
                  const o = [],
                    s = (e.variantChildren.size - 1) * i,
                    l =
                      1 === r
                        ? function () {
                          return (
                            (arguments.length > 0 && void 0 !== arguments[0]
                              ? arguments[0]
                              : 0) * i
                          );
                        }
                        : function () {
                          return (
                            s -
                            (arguments.length > 0 && void 0 !== arguments[0]
                              ? arguments[0]
                              : 0) *
                            i
                          );
                        };
                  return (
                    Array.from(e.variantChildren)
                      .sort(ji)
                      .forEach((e, i) => {
                        e.notify("AnimationStart", t),
                          o.push(
                            Wi(e, t, { ...a, delay: n + l(i) }).then(() =>
                              e.notify("AnimationComplete", t)
                            )
                          );
                      }),
                    Promise.all(o)
                  );
                })(e, t, a + i, o, s, n);
              }
              : () => Promise.resolve(),
          { when: s } = r;
        if (s) {
          const [e, t] = "beforeChildren" === s ? [a, o] : [o, a];
          return e().then(() => t());
        }
        return Promise.all([a(), o(n.delay)]);
      }
      function ji(e, t) {
        return e.sortNodePosition(t);
      }
      const Xi = [...A].reverse(),
        Yi = A.length;
      function qi(e) {
        return (t) =>
          Promise.all(
            t.map((t) => {
              let { animation: n, options: i } = t;
              return (function (e, t) {
                let n,
                  i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : {};
                if ((e.notify("AnimationStart", t), Array.isArray(t))) {
                  const r = t.map((t) => Wi(e, t, i));
                  n = Promise.all(r);
                } else if ("string" === typeof t) n = Wi(e, t, i);
                else {
                  const r = "function" === typeof t ? wt(e, t, i.custom) : t;
                  n = Promise.all(Gi(e, r, i));
                }
                return n.then(() => e.notify("AnimationComplete", t));
              })(e, n, i);
            })
          );
      }
      function Ki(e) {
        let t = qi(e);
        const n = {
          animate: Ji(!0),
          whileInView: Ji(),
          whileHover: Ji(),
          whileTap: Ji(),
          whileDrag: Ji(),
          whileFocus: Ji(),
          exit: Ji(),
        };
        let i = !0;
        const r = (t, n) => {
          const i = wt(e, n);
          if (i) {
            const { transition: e, transitionEnd: n, ...r } = i;
            t = { ...t, ...r, ...n };
          }
          return t;
        };
        function a(a, o) {
          const s = e.getProps(),
            l = e.getVariantContext(!0) || {},
            c = [],
            u = new Set();
          let d = {},
            h = 1 / 0;
          for (let t = 0; t < Yi; t++) {
            const p = Xi[t],
              f = n[p],
              m = void 0 !== s[p] ? s[p] : l[p],
              g = T(m),
              v = p === o ? f.isActive : null;
            !1 === v && (h = t);
            let _ = m === l[p] && m !== s[p] && g;
            if (
              (_ && i && e.manuallyAnimateOnMount && (_ = !1),
                (f.protectedKeys = { ...d }),
                (!f.isActive && null === v) ||
                (!m && !f.prevProp) ||
                w(m) ||
                "boolean" === typeof m)
            )
              continue;
            let y =
              Zi(f.prevProp, m) ||
              (p === o && f.isActive && !_ && g) ||
              (t > h && g),
              x = !1;
            const b = Array.isArray(m) ? m : [m];
            let S = b.reduce(r, {});
            !1 === v && (S = {});
            const { prevResolvedValues: E = {} } = f,
              M = { ...E, ...S },
              A = (e) => {
                (y = !0),
                  u.has(e) && ((x = !0), u.delete(e)),
                  (f.needsAnimating[e] = !0);
              };
            for (const e in M) {
              const t = S[e],
                n = E[e];
              if (d.hasOwnProperty(e)) continue;
              let i = !1;
              (i = We(t) && We(n) ? !Tt(t, n) : t !== n),
                i
                  ? void 0 !== t
                    ? A(e)
                    : u.add(e)
                  : void 0 !== t && u.has(e)
                    ? A(e)
                    : (f.protectedKeys[e] = !0);
            }
            (f.prevProp = m),
              (f.prevResolvedValues = S),
              f.isActive && (d = { ...d, ...S }),
              i && e.blockInitialAnimation && (y = !1),
              !y ||
              (_ && !x) ||
              c.push(
                ...b.map((e) => ({
                  animation: e,
                  options: { type: p, ...a },
                }))
              );
          }
          if (u.size) {
            const t = {};
            u.forEach((n) => {
              const i = e.getBaseTarget(n);
              void 0 !== i && (t[n] = i);
            }),
              c.push({ animation: t });
          }
          let p = Boolean(c.length);
          return (
            !i ||
            (!1 !== s.initial && s.initial !== s.animate) ||
            e.manuallyAnimateOnMount ||
            (p = !1),
            (i = !1),
            p ? t(c) : Promise.resolve()
          );
        }
        return {
          animateChanges: a,
          setActive: function (t, i, r) {
            var o;
            if (n[t].isActive === i) return Promise.resolve();
            null === (o = e.variantChildren) ||
              void 0 === o ||
              o.forEach((e) => {
                var n;
                return null === (n = e.animationState) || void 0 === n
                  ? void 0
                  : n.setActive(t, i);
              }),
              (n[t].isActive = i);
            const s = a(r, t);
            for (const e in n) n[e].protectedKeys = {};
            return s;
          },
          setAnimateFunction: function (n) {
            t = n(e);
          },
          getState: () => n,
        };
      }
      function Zi(e, t) {
        return "string" === typeof t
          ? t !== e
          : !!Array.isArray(t) && !Tt(t, e);
      }
      function Ji() {
        return {
          isActive:
            arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
          protectedKeys: {},
          needsAnimating: {},
          prevResolvedValues: {},
        };
      }
      let Qi = 0;
      const $i = {
        animation: {
          Feature: class extends ft {
            constructor(e) {
              super(e), e.animationState || (e.animationState = Ki(e));
            }
            updateAnimationControlsSubscription() {
              const { animate: e } = this.node.getProps();
              this.unmount(), w(e) && (this.unmount = e.subscribe(this.node));
            }
            mount() {
              this.updateAnimationControlsSubscription();
            }
            update() {
              const { animate: e } = this.node.getProps(),
                { animate: t } = this.node.prevProps || {};
              e !== t && this.updateAnimationControlsSubscription();
            }
            unmount() { }
          },
        },
        exit: {
          Feature: class extends ft {
            constructor() {
              super(...arguments), (this.id = Qi++);
            }
            update() {
              if (!this.node.presenceContext) return;
              const {
                isPresent: e,
                onExitComplete: t,
                custom: n,
              } = this.node.presenceContext,
                { isPresent: i } = this.node.prevPresenceContext || {};
              if (!this.node.animationState || e === i) return;
              const r = this.node.animationState.setActive("exit", !e, {
                custom:
                  null !== n && void 0 !== n
                    ? n
                    : this.node.getProps().custom,
              });
              t && !e && r.then(() => t(this.id));
            }
            mount() {
              const { register: e } = this.node.presenceContext || {};
              e && (this.unmount = e(this.id));
            }
            unmount() { }
          },
        },
      },
        er = (e, t) => Math.abs(e - t);
      class tr {
        constructor(e, t) {
          let {
            transformPagePoint: n,
            contextWindow: i,
            dragSnapToOrigin: r = !1,
          } = arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : {};
          if (
            ((this.startEvent = null),
              (this.lastMoveEvent = null),
              (this.lastMoveEventInfo = null),
              (this.handlers = {}),
              (this.contextWindow = window),
              (this.updatePoint = () => {
                if (!this.lastMoveEvent || !this.lastMoveEventInfo) return;
                const e = rr(this.lastMoveEventInfo, this.history),
                  t = null !== this.startEvent,
                  n =
                    (function (e, t) {
                      const n = er(e.x, t.x),
                        i = er(e.y, t.y);
                      return Math.sqrt(n ** 2 + i ** 2);
                    })(e.offset, { x: 0, y: 0 }) >= 3;
                if (!t && !n) return;
                const { point: i } = e,
                  { timestamp: r } = Qe;
                this.history.push({ ...i, timestamp: r });
                const { onStart: a, onMove: o } = this.handlers;
                t ||
                  (a && a(this.lastMoveEvent, e),
                    (this.startEvent = this.lastMoveEvent)),
                  o && o(this.lastMoveEvent, e);
              }),
              (this.handlePointerMove = (e, t) => {
                (this.lastMoveEvent = e),
                  (this.lastMoveEventInfo = nr(t, this.transformPagePoint)),
                  Ze.update(this.updatePoint, !0);
              }),
              (this.handlePointerUp = (e, t) => {
                this.end();
                const {
                  onEnd: n,
                  onSessionEnd: i,
                  resumeAnimation: r,
                } = this.handlers;
                if (
                  (this.dragSnapToOrigin && r && r(),
                    !this.lastMoveEvent || !this.lastMoveEventInfo)
                )
                  return;
                const a = rr(
                  "pointercancel" === e.type
                    ? this.lastMoveEventInfo
                    : nr(t, this.transformPagePoint),
                  this.history
                );
                this.startEvent && n && n(e, a), i && i(e, a);
              }),
              !it(e))
          )
            return;
          (this.dragSnapToOrigin = r),
            (this.handlers = t),
            (this.transformPagePoint = n),
            (this.contextWindow = i || window);
          const a = nr(rt(e), this.transformPagePoint),
            { point: o } = a,
            { timestamp: s } = Qe;
          this.history = [{ ...o, timestamp: s }];
          const { onSessionStart: l } = t;
          l && l(e, rr(a, this.history)),
            (this.removeListeners = lt(
              ot(this.contextWindow, "pointermove", this.handlePointerMove),
              ot(this.contextWindow, "pointerup", this.handlePointerUp),
              ot(this.contextWindow, "pointercancel", this.handlePointerUp)
            ));
        }
        updateHandlers(e) {
          this.handlers = e;
        }
        end() {
          this.removeListeners && this.removeListeners(), Je(this.updatePoint);
        }
      }
      function nr(e, t) {
        return t ? { point: t(e.point) } : e;
      }
      function ir(e, t) {
        return { x: e.x - t.x, y: e.y - t.y };
      }
      function rr(e, t) {
        let { point: n } = e;
        return {
          point: n,
          delta: ir(n, or(t)),
          offset: ir(n, ar(t)),
          velocity: sr(t, 0.1),
        };
      }
      function ar(e) {
        return e[0];
      }
      function or(e) {
        return e[e.length - 1];
      }
      function sr(e, t) {
        if (e.length < 2) return { x: 0, y: 0 };
        let n = e.length - 1,
          i = null;
        const r = or(e);
        for (; n >= 0 && ((i = e[n]), !(r.timestamp - i.timestamp > At(t)));)
          n--;
        if (!i) return { x: 0, y: 0 };
        const a = Rt(r.timestamp - i.timestamp);
        if (0 === a) return { x: 0, y: 0 };
        const o = { x: (r.x - i.x) / a, y: (r.y - i.y) / a };
        return o.x === 1 / 0 && (o.x = 0), o.y === 1 / 0 && (o.y = 0), o;
      }
      function lr(e) {
        return e.max - e.min;
      }
      function cr(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
          n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : 0.01;
        return Math.abs(e - t) <= n;
      }
      function ur(e, t, n) {
        let i =
          arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.5;
        (e.origin = i),
          (e.originPoint = en(t.min, t.max, e.origin)),
          (e.scale = lr(n) / lr(t)),
          (cr(e.scale, 1, 1e-4) || isNaN(e.scale)) && (e.scale = 1),
          (e.translate = en(n.min, n.max, e.origin) - e.originPoint),
          (cr(e.translate) || isNaN(e.translate)) && (e.translate = 0);
      }
      function dr(e, t, n, i) {
        ur(e.x, t.x, n.x, i ? i.originX : void 0),
          ur(e.y, t.y, n.y, i ? i.originY : void 0);
      }
      function hr(e, t, n) {
        (e.min = n.min + t.min), (e.max = e.min + lr(t));
      }
      function pr(e, t, n) {
        (e.min = t.min - n.min), (e.max = e.min + lr(t));
      }
      function fr(e, t, n) {
        pr(e.x, t.x, n.x), pr(e.y, t.y, n.y);
      }
      function mr(e, t, n) {
        return {
          min: void 0 !== t ? e.min + t : void 0,
          max: void 0 !== n ? e.max + n - (e.max - e.min) : void 0,
        };
      }
      function gr(e, t) {
        let n = t.min - e.min,
          i = t.max - e.max;
        return (
          t.max - t.min < e.max - e.min && ([n, i] = [i, n]), { min: n, max: i }
        );
      }
      const vr = 0.35;
      function _r(e, t, n) {
        return { min: yr(e, t), max: yr(e, n) };
      }
      function yr(e, t) {
        return "number" === typeof e ? e : e[t] || 0;
      }
      const xr = () => ({
        x: { translate: 0, scale: 1, origin: 0, originPoint: 0 },
        y: { translate: 0, scale: 1, origin: 0, originPoint: 0 },
      }),
        br = () => ({ x: { min: 0, max: 0 }, y: { min: 0, max: 0 } });
      function Sr(e) {
        return [e("x"), e("y")];
      }
      function Er(e) {
        let { top: t, left: n, right: i, bottom: r } = e;
        return { x: { min: n, max: i }, y: { min: t, max: r } };
      }
      function Mr(e) {
        return void 0 === e || 1 === e;
      }
      function Tr(e) {
        let { scale: t, scaleX: n, scaleY: i } = e;
        return !Mr(t) || !Mr(n) || !Mr(i);
      }
      function wr(e) {
        return Tr(e) || Ar(e) || e.z || e.rotate || e.rotateX || e.rotateY;
      }
      function Ar(e) {
        return Rr(e.x) || Rr(e.y);
      }
      function Rr(e) {
        return e && "0%" !== e;
      }
      function Cr(e, t, n) {
        return n + t * (e - n);
      }
      function Pr(e, t, n, i, r) {
        return void 0 !== r && (e = Cr(e, r, i)), Cr(e, n, i) + t;
      }
      function Lr(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
          n =
            arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1,
          i = arguments.length > 3 ? arguments[3] : void 0,
          r = arguments.length > 4 ? arguments[4] : void 0;
        (e.min = Pr(e.min, t, n, i, r)), (e.max = Pr(e.max, t, n, i, r));
      }
      function Nr(e, t) {
        let { x: n, y: i } = t;
        Lr(e.x, n.translate, n.scale, n.originPoint),
          Lr(e.y, i.translate, i.scale, i.originPoint);
      }
      function Dr(e) {
        return Number.isInteger(e) || e > 1.0000000000001 || e < 0.999999999999
          ? e
          : 1;
      }
      function Ur(e, t) {
        (e.min = e.min + t), (e.max = e.max + t);
      }
      function Ir(e, t, n) {
        let [i, r, a] = n;
        const o = void 0 !== t[a] ? t[a] : 0.5,
          s = en(e.min, e.max, o);
        Lr(e, t[i], t[r], s, t.scale);
      }
      const Or = ["x", "scaleX", "originX"],
        kr = ["y", "scaleY", "originY"];
      function Fr(e, t) {
        Ir(e.x, t, Or), Ir(e.y, t, kr);
      }
      function zr(e, t) {
        return Er(
          (function (e, t) {
            if (!t) return e;
            const n = t({ x: e.left, y: e.top }),
              i = t({ x: e.right, y: e.bottom });
            return { top: n.y, left: n.x, bottom: i.y, right: i.x };
          })(e.getBoundingClientRect(), t)
        );
      }
      const Br = (e) => {
        let { current: t } = e;
        return t ? t.ownerDocument.defaultView : null;
      },
        Vr = new WeakMap();
      class Hr {
        constructor(e) {
          (this.openGlobalLock = null),
            (this.isDragging = !1),
            (this.currentDirection = null),
            (this.originPoint = { x: 0, y: 0 }),
            (this.constraints = !1),
            (this.hasMutatedConstraints = !1),
            (this.elastic = br()),
            (this.visualElement = e);
        }
        start(e) {
          let { snapToCursor: t = !1 } =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          const { presenceContext: n } = this.visualElement;
          if (n && !1 === n.isPresent) return;
          const { dragSnapToOrigin: i } = this.getProps();
          this.panSession = new tr(
            e,
            {
              onSessionStart: (e) => {
                const { dragSnapToOrigin: n } = this.getProps();
                n ? this.pauseAnimation() : this.stopAnimation(),
                  t && this.snapToCursor(rt(e, "page").point);
              },
              onStart: (e, t) => {
                const {
                  drag: n,
                  dragPropagation: i,
                  onDragStart: r,
                } = this.getProps();
                if (
                  n &&
                  !i &&
                  (this.openGlobalLock && this.openGlobalLock(),
                    (this.openGlobalLock = ht(n)),
                    !this.openGlobalLock)
                )
                  return;
                (this.isDragging = !0),
                  (this.currentDirection = null),
                  this.resolveConstraints(),
                  this.visualElement.projection &&
                  ((this.visualElement.projection.isAnimationBlocked = !0),
                    (this.visualElement.projection.target = void 0)),
                  Sr((e) => {
                    let t = this.getAxisMotionValue(e).get() || 0;
                    if (pe.test(t)) {
                      const { projection: n } = this.visualElement;
                      if (n && n.layout) {
                        const i = n.layout.layoutBox[e];
                        if (i) {
                          t = lr(i) * (parseFloat(t) / 100);
                        }
                      }
                    }
                    this.originPoint[e] = t;
                  }),
                  r && Ze.update(() => r(e, t), !1, !0);
                const { animationState: a } = this.visualElement;
                a && a.setActive("whileDrag", !0);
              },
              onMove: (e, t) => {
                const {
                  dragPropagation: n,
                  dragDirectionLock: i,
                  onDirectionLock: r,
                  onDrag: a,
                } = this.getProps();
                if (!n && !this.openGlobalLock) return;
                const { offset: o } = t;
                if (i && null === this.currentDirection)
                  return (
                    (this.currentDirection = (function (e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : 10,
                        n = null;
                      Math.abs(e.y) > t
                        ? (n = "y")
                        : Math.abs(e.x) > t && (n = "x");
                      return n;
                    })(o)),
                    void (
                      null !== this.currentDirection &&
                      r &&
                      r(this.currentDirection)
                    )
                  );
                this.updateAxis("x", t.point, o),
                  this.updateAxis("y", t.point, o),
                  this.visualElement.render(),
                  a && a(e, t);
              },
              onSessionEnd: (e, t) => this.stop(e, t),
              resumeAnimation: () =>
                Sr((e) => {
                  var t;
                  return (
                    "paused" === this.getAnimationState(e) &&
                    (null === (t = this.getAxisMotionValue(e).animation) ||
                      void 0 === t
                      ? void 0
                      : t.play())
                  );
                }),
            },
            {
              transformPagePoint: this.visualElement.getTransformPagePoint(),
              dragSnapToOrigin: i,
              contextWindow: Br(this.visualElement),
            }
          );
        }
        stop(e, t) {
          const n = this.isDragging;
          if ((this.cancel(), !n)) return;
          const { velocity: i } = t;
          this.startAnimation(i);
          const { onDragEnd: r } = this.getProps();
          r && Ze.update(() => r(e, t));
        }
        cancel() {
          this.isDragging = !1;
          const { projection: e, animationState: t } = this.visualElement;
          e && (e.isAnimationBlocked = !1),
            this.panSession && this.panSession.end(),
            (this.panSession = void 0);
          const { dragPropagation: n } = this.getProps();
          !n &&
            this.openGlobalLock &&
            (this.openGlobalLock(), (this.openGlobalLock = null)),
            t && t.setActive("whileDrag", !1);
        }
        updateAxis(e, t, n) {
          const { drag: i } = this.getProps();
          if (!n || !Gr(e, i, this.currentDirection)) return;
          const r = this.getAxisMotionValue(e);
          let a = this.originPoint[e] + n[e];
          this.constraints &&
            this.constraints[e] &&
            (a = (function (e, t, n) {
              let { min: i, max: r } = t;
              return (
                void 0 !== i && e < i
                  ? (e = n ? en(i, e, n.min) : Math.max(e, i))
                  : void 0 !== r &&
                  e > r &&
                  (e = n ? en(r, e, n.max) : Math.min(e, r)),
                e
              );
            })(a, this.constraints[e], this.elastic[e])),
            r.set(a);
        }
        resolveConstraints() {
          var e;
          const { dragConstraints: t, dragElastic: n } = this.getProps(),
            i =
              this.visualElement.projection &&
                !this.visualElement.projection.layout
                ? this.visualElement.projection.measure(!1)
                : null === (e = this.visualElement.projection) || void 0 === e
                  ? void 0
                  : e.layout,
            r = this.constraints;
          t && M(t)
            ? this.constraints ||
            (this.constraints = this.resolveRefConstraints())
            : (this.constraints =
              !(!t || !i) &&
              (function (e, t) {
                let { top: n, left: i, bottom: r, right: a } = t;
                return { x: mr(e.x, i, a), y: mr(e.y, n, r) };
              })(i.layoutBox, t)),
            (this.elastic = (function () {
              let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : vr;
              return (
                !1 === e ? (e = 0) : !0 === e && (e = vr),
                { x: _r(e, "left", "right"), y: _r(e, "top", "bottom") }
              );
            })(n)),
            r !== this.constraints &&
            i &&
            this.constraints &&
            !this.hasMutatedConstraints &&
            Sr((e) => {
              this.getAxisMotionValue(e) &&
                (this.constraints[e] = (function (e, t) {
                  const n = {};
                  return (
                    void 0 !== t.min && (n.min = t.min - e.min),
                    void 0 !== t.max && (n.max = t.max - e.min),
                    n
                  );
                })(i.layoutBox[e], this.constraints[e]));
            });
        }
        resolveRefConstraints() {
          const { dragConstraints: e, onMeasureDragConstraints: t } =
            this.getProps();
          if (!e || !M(e)) return !1;
          const n = e.current;
          a(
            null !== n,
            "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop."
          );
          const { projection: i } = this.visualElement;
          if (!i || !i.layout) return !1;
          const r = (function (e, t, n) {
            const i = zr(e, n),
              { scroll: r } = t;
            return r && (Ur(i.x, r.offset.x), Ur(i.y, r.offset.y)), i;
          })(n, i.root, this.visualElement.getTransformPagePoint());
          let o = (function (e, t) {
            return { x: gr(e.x, t.x), y: gr(e.y, t.y) };
          })(i.layout.layoutBox, r);
          if (t) {
            const e = t(
              (function (e) {
                let { x: t, y: n } = e;
                return { top: n.min, right: t.max, bottom: n.max, left: t.min };
              })(o)
            );
            (this.hasMutatedConstraints = !!e), e && (o = Er(e));
          }
          return o;
        }
        startAnimation(e) {
          const {
            drag: t,
            dragMomentum: n,
            dragElastic: i,
            dragTransition: r,
            dragSnapToOrigin: a,
            onDragTransitionEnd: o,
          } = this.getProps(),
            s = this.constraints || {},
            l = Sr((o) => {
              if (!Gr(o, t, this.currentDirection)) return;
              let l = (s && s[o]) || {};
              a && (l = { min: 0, max: 0 });
              const c = i ? 200 : 1e6,
                u = i ? 40 : 1e7,
                d = {
                  type: "inertia",
                  velocity: n ? e[o] : 0,
                  bounceStiffness: c,
                  bounceDamping: u,
                  timeConstant: 750,
                  restDelta: 1,
                  restSpeed: 10,
                  ...r,
                  ...l,
                };
              return this.startAxisValueAnimation(o, d);
            });
          return Promise.all(l).then(o);
        }
        startAxisValueAnimation(e, t) {
          const n = this.getAxisMotionValue(e);
          return n.start(Mi(e, n, 0, t));
        }
        stopAnimation() {
          Sr((e) => this.getAxisMotionValue(e).stop());
        }
        pauseAnimation() {
          Sr((e) => {
            var t;
            return null === (t = this.getAxisMotionValue(e).animation) ||
              void 0 === t
              ? void 0
              : t.pause();
          });
        }
        getAnimationState(e) {
          var t;
          return null === (t = this.getAxisMotionValue(e).animation) ||
            void 0 === t
            ? void 0
            : t.state;
        }
        getAxisMotionValue(e) {
          const t = "_drag" + e.toUpperCase(),
            n = this.visualElement.getProps(),
            i = n[t];
          return (
            i ||
            this.visualElement.getValue(
              e,
              (n.initial ? n.initial[e] : void 0) || 0
            )
          );
        }
        snapToCursor(e) {
          Sr((t) => {
            const { drag: n } = this.getProps();
            if (!Gr(t, n, this.currentDirection)) return;
            const { projection: i } = this.visualElement,
              r = this.getAxisMotionValue(t);
            if (i && i.layout) {
              const { min: n, max: a } = i.layout.layoutBox[t];
              r.set(e[t] - en(n, a, 0.5));
            }
          });
        }
        scalePositionWithinConstraints() {
          if (!this.visualElement.current) return;
          const { drag: e, dragConstraints: t } = this.getProps(),
            { projection: n } = this.visualElement;
          if (!M(t) || !n || !this.constraints) return;
          this.stopAnimation();
          const i = { x: 0, y: 0 };
          Sr((e) => {
            const t = this.getAxisMotionValue(e);
            if (t) {
              const n = t.get();
              i[e] = (function (e, t) {
                let n = 0.5;
                const i = lr(e),
                  r = lr(t);
                return (
                  r > i
                    ? (n = $t(t.min, t.max - i, e.min))
                    : i > r && (n = $t(e.min, e.max - r, t.min)),
                  ne(0, 1, n)
                );
              })({ min: n, max: n }, this.constraints[e]);
            }
          });
          const { transformTemplate: r } = this.visualElement.getProps();
          (this.visualElement.current.style.transform = r ? r({}, "") : "none"),
            n.root && n.root.updateScroll(),
            n.updateLayout(),
            this.resolveConstraints(),
            Sr((t) => {
              if (!Gr(t, e, null)) return;
              const n = this.getAxisMotionValue(t),
                { min: r, max: a } = this.constraints[t];
              n.set(en(r, a, i[t]));
            });
        }
        addListeners() {
          if (!this.visualElement.current) return;
          Vr.set(this.visualElement, this);
          const e = ot(this.visualElement.current, "pointerdown", (e) => {
            const { drag: t, dragListener: n = !0 } = this.getProps();
            t && n && this.start(e);
          }),
            t = () => {
              const { dragConstraints: e } = this.getProps();
              M(e) && (this.constraints = this.resolveRefConstraints());
            },
            { projection: n } = this.visualElement,
            i = n.addEventListener("measure", t);
          n && !n.layout && (n.root && n.root.updateScroll(), n.updateLayout()),
            t();
          const r = nt(window, "resize", () =>
            this.scalePositionWithinConstraints()
          ),
            a = n.addEventListener("didUpdate", (e) => {
              let { delta: t, hasLayoutChanged: n } = e;
              this.isDragging &&
                n &&
                (Sr((e) => {
                  const n = this.getAxisMotionValue(e);
                  n &&
                    ((this.originPoint[e] += t[e].translate),
                      n.set(n.get() + t[e].translate));
                }),
                  this.visualElement.render());
            });
          return () => {
            r(), e(), i(), a && a();
          };
        }
        getProps() {
          const e = this.visualElement.getProps(),
            {
              drag: t = !1,
              dragDirectionLock: n = !1,
              dragPropagation: i = !1,
              dragConstraints: r = !1,
              dragElastic: a = vr,
              dragMomentum: o = !0,
            } = e;
          return {
            ...e,
            drag: t,
            dragDirectionLock: n,
            dragPropagation: i,
            dragConstraints: r,
            dragElastic: a,
            dragMomentum: o,
          };
        }
      }
      function Gr(e, t, n) {
        return (!0 === t || t === e) && (null === n || n === e);
      }
      const Wr = (e) => (t, n) => {
        e && Ze.update(() => e(t, n));
      };
      const jr = { hasAnimatedSinceResize: !0, hasEverUpdated: !1 };
      function Xr(e, t) {
        return t.max === t.min ? 0 : (e / (t.max - t.min)) * 100;
      }
      const Yr = {
        correct: (e, t) => {
          if (!t.target) return e;
          if ("string" === typeof e) {
            if (!fe.test(e)) return e;
            e = parseFloat(e);
          }
          const n = Xr(e, t.target.x),
            i = Xr(e, t.target.y);
          return "".concat(n, "% ").concat(i, "%");
        },
      },
        qr = {
          correct: (e, t) => {
            let { treeScale: n, projectionDelta: i } = t;
            const r = e,
              a = Mn.parse(e);
            if (a.length > 5) return r;
            const o = Mn.createTransformer(e),
              s = "number" !== typeof a[0] ? 1 : 0,
              l = i.x.scale * n.x,
              c = i.y.scale * n.y;
            (a[0 + s] /= l), (a[1 + s] /= c);
            const u = en(l, c, 0.5);
            return (
              "number" === typeof a[2 + s] && (a[2 + s] /= u),
              "number" === typeof a[3 + s] && (a[3 + s] /= u),
              o(a)
            );
          },
        };
      class Kr extends e.Component {
        componentDidMount() {
          const {
            visualElement: e,
            layoutGroup: t,
            switchLayoutGroup: n,
            layoutId: i,
          } = this.props,
            { projection: r } = e;
          var a;
          (a = Jr),
            Object.assign(G, a),
            r &&
            (t.group && t.group.add(r),
              n && n.register && i && n.register(r),
              r.root.didUpdate(),
              r.addEventListener("animationComplete", () => {
                this.safeToRemove();
              }),
              r.setOptions({
                ...r.options,
                onExitComplete: () => this.safeToRemove(),
              })),
            (jr.hasEverUpdated = !0);
        }
        getSnapshotBeforeUpdate(e) {
          const {
            layoutDependency: t,
            visualElement: n,
            drag: i,
            isPresent: r,
          } = this.props,
            a = n.projection;
          return a
            ? ((a.isPresent = r),
              i || e.layoutDependency !== t || void 0 === t
                ? a.willUpdate()
                : this.safeToRemove(),
              e.isPresent !== r &&
              (r
                ? a.promote()
                : a.relegate() ||
                Ze.postRender(() => {
                  const e = a.getStack();
                  (e && e.members.length) || this.safeToRemove();
                })),
              null)
            : null;
        }
        componentDidUpdate() {
          const { projection: e } = this.props.visualElement;
          e &&
            (e.root.didUpdate(),
              S.postRender(() => {
                !e.currentAnimation && e.isLead() && this.safeToRemove();
              }));
        }
        componentWillUnmount() {
          const {
            visualElement: e,
            layoutGroup: t,
            switchLayoutGroup: n,
          } = this.props,
            { projection: i } = e;
          i &&
            (i.scheduleCheckAfterUnmount(),
              t && t.group && t.group.remove(i),
              n && n.deregister && n.deregister(i));
        }
        safeToRemove() {
          const { safeToRemove: e } = this.props;
          e && e();
        }
        render() {
          return null;
        }
      }
      function Zr(t) {
        const [n, i] = (function () {
          const t = (0, e.useContext)(d);
          if (null === t) return [!0, null];
          const { isPresent: n, onExitComplete: i, register: r } = t,
            a = (0, e.useId)();
          return (
            (0, e.useEffect)(() => r(a), []),
            !n && i ? [!1, () => i && i(a)] : [!0]
          );
        })(),
          r = (0, e.useContext)(I);
        return e.createElement(Kr, {
          ...t,
          layoutGroup: r,
          switchLayoutGroup: (0, e.useContext)(O),
          isPresent: n,
          safeToRemove: i,
        });
      }
      const Jr = {
        borderRadius: {
          ...Yr,
          applyTo: [
            "borderTopLeftRadius",
            "borderTopRightRadius",
            "borderBottomLeftRadius",
            "borderBottomRightRadius",
          ],
        },
        borderTopLeftRadius: Yr,
        borderTopRightRadius: Yr,
        borderBottomLeftRadius: Yr,
        borderBottomRightRadius: Yr,
        boxShadow: qr,
      },
        Qr = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"],
        $r = Qr.length,
        ea = (e) => ("string" === typeof e ? parseFloat(e) : e),
        ta = (e) => "number" === typeof e || fe.test(e);
      function na(e, t) {
        return void 0 !== e[t] ? e[t] : e.borderRadius;
      }
      const ia = aa(0, 0.5, Xt),
        ra = aa(0.5, 0.95, i);
      function aa(e, t, n) {
        return (i) => (i < e ? 0 : i > t ? 1 : n($t(e, t, i)));
      }
      function oa(e, t) {
        (e.min = t.min), (e.max = t.max);
      }
      function sa(e, t) {
        oa(e.x, t.x), oa(e.y, t.y);
      }
      function la(e, t, n, i, r) {
        return (
          (e = Cr((e -= t), 1 / n, i)), void 0 !== r && (e = Cr(e, 1 / r, i)), e
        );
      }
      function ca(e, t, n, i, r) {
        let [a, o, s] = n;
        !(function (e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : 0,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 1,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : 0.5,
            r = arguments.length > 4 ? arguments[4] : void 0,
            a =
              arguments.length > 5 && void 0 !== arguments[5]
                ? arguments[5]
                : e,
            o =
              arguments.length > 6 && void 0 !== arguments[6]
                ? arguments[6]
                : e;
          pe.test(t) &&
            ((t = parseFloat(t)), (t = en(o.min, o.max, t / 100) - o.min));
          if ("number" !== typeof t) return;
          let s = en(a.min, a.max, i);
          e === a && (s -= t),
            (e.min = la(e.min, t, n, s, r)),
            (e.max = la(e.max, t, n, s, r));
        })(e, t[a], t[o], t[s], t.scale, i, r);
      }
      const ua = ["x", "scaleX", "originX"],
        da = ["y", "scaleY", "originY"];
      function ha(e, t, n, i) {
        ca(e.x, t, ua, n ? n.x : void 0, i ? i.x : void 0),
          ca(e.y, t, da, n ? n.y : void 0, i ? i.y : void 0);
      }
      function pa(e) {
        return 0 === e.translate && 1 === e.scale;
      }
      function fa(e) {
        return pa(e.x) && pa(e.y);
      }
      function ma(e, t) {
        return (
          Math.round(e.x.min) === Math.round(t.x.min) &&
          Math.round(e.x.max) === Math.round(t.x.max) &&
          Math.round(e.y.min) === Math.round(t.y.min) &&
          Math.round(e.y.max) === Math.round(t.y.max)
        );
      }
      function ga(e) {
        return lr(e.x) / lr(e.y);
      }
      class va {
        constructor() {
          this.members = [];
        }
        add(e) {
          Ai(this.members, e), e.scheduleRender();
        }
        remove(e) {
          if (
            (Ri(this.members, e),
              e === this.prevLead && (this.prevLead = void 0),
              e === this.lead)
          ) {
            const e = this.members[this.members.length - 1];
            e && this.promote(e);
          }
        }
        relegate(e) {
          const t = this.members.findIndex((t) => e === t);
          if (0 === t) return !1;
          let n;
          for (let i = t; i >= 0; i--) {
            const e = this.members[i];
            if (!1 !== e.isPresent) {
              n = e;
              break;
            }
          }
          return !!n && (this.promote(n), !0);
        }
        promote(e, t) {
          const n = this.lead;
          if (e !== n && ((this.prevLead = n), (this.lead = e), e.show(), n)) {
            n.instance && n.scheduleRender(),
              e.scheduleRender(),
              (e.resumeFrom = n),
              t && (e.resumeFrom.preserveOpacity = !0),
              n.snapshot &&
              ((e.snapshot = n.snapshot),
                (e.snapshot.latestValues =
                  n.animationValues || n.latestValues)),
              e.root && e.root.isUpdating && (e.isLayoutDirty = !0);
            const { crossfade: i } = e.options;
            !1 === i && n.hide();
          }
        }
        exitAnimationComplete() {
          this.members.forEach((e) => {
            const { options: t, resumingFrom: n } = e;
            t.onExitComplete && t.onExitComplete(),
              n && n.options.onExitComplete && n.options.onExitComplete();
          });
        }
        scheduleRender() {
          this.members.forEach((e) => {
            e.instance && e.scheduleRender(!1);
          });
        }
        removeLeadSnapshot() {
          this.lead && this.lead.snapshot && (this.lead.snapshot = void 0);
        }
      }
      function _a(e, t, n) {
        let i = "";
        const r = e.x.translate / t.x,
          a = e.y.translate / t.y;
        if (
          ((r || a) &&
            (i = "translate3d(".concat(r, "px, ").concat(a, "px, 0) ")),
            (1 === t.x && 1 === t.y) ||
            (i += "scale(".concat(1 / t.x, ", ").concat(1 / t.y, ") ")),
            n)
        ) {
          const { rotate: e, rotateX: t, rotateY: r } = n;
          e && (i += "rotate(".concat(e, "deg) ")),
            t && (i += "rotateX(".concat(t, "deg) ")),
            r && (i += "rotateY(".concat(r, "deg) "));
        }
        const o = e.x.scale * t.x,
          s = e.y.scale * t.y;
        return (
          (1 === o && 1 === s) ||
          (i += "scale(".concat(o, ", ").concat(s, ")")),
          i || "none"
        );
      }
      const ya = (e, t) => e.depth - t.depth;
      class xa {
        constructor() {
          (this.children = []), (this.isDirty = !1);
        }
        add(e) {
          Ai(this.children, e), (this.isDirty = !0);
        }
        remove(e) {
          Ri(this.children, e), (this.isDirty = !0);
        }
        forEach(e) {
          this.isDirty && this.children.sort(ya),
            (this.isDirty = !1),
            this.children.forEach(e);
        }
      }
      const ba = ["", "X", "Y", "Z"],
        Sa = { visibility: "hidden" };
      let Ea = 0;
      const Ma = {
        type: "projectionFrame",
        totalNodes: 0,
        resolvedTargetDeltas: 0,
        recalculatedProjection: 0,
      };
      function Ta(e) {
        let {
          attachResizeListener: t,
          defaultParent: n,
          measureScroll: i,
          checkIsScrollRoot: r,
          resetTransform: a,
        } = e;
        return class {
          constructor() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {},
              t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : null === n || void 0 === n
                    ? void 0
                    : n();
            (this.id = Ea++),
              (this.animationId = 0),
              (this.children = new Set()),
              (this.options = {}),
              (this.isTreeAnimating = !1),
              (this.isAnimationBlocked = !1),
              (this.isLayoutDirty = !1),
              (this.isProjectionDirty = !1),
              (this.isSharedProjectionDirty = !1),
              (this.isTransformDirty = !1),
              (this.updateManuallyBlocked = !1),
              (this.updateBlockedByResize = !1),
              (this.isUpdating = !1),
              (this.isSVG = !1),
              (this.needsReset = !1),
              (this.shouldResetTransform = !1),
              (this.treeScale = { x: 1, y: 1 }),
              (this.eventHandlers = new Map()),
              (this.hasTreeAnimated = !1),
              (this.updateScheduled = !1),
              (this.projectionUpdateScheduled = !1),
              (this.checkUpdateFailed = () => {
                this.isUpdating &&
                  ((this.isUpdating = !1), this.clearAllSnapshots());
              }),
              (this.updateProjection = () => {
                var e;
                (this.projectionUpdateScheduled = !1),
                  (Ma.totalNodes =
                    Ma.resolvedTargetDeltas =
                    Ma.recalculatedProjection =
                    0),
                  this.nodes.forEach(Ra),
                  this.nodes.forEach(Ia),
                  this.nodes.forEach(Oa),
                  this.nodes.forEach(Ca),
                  (e = Ma),
                  window.MotionDebug && window.MotionDebug.record(e);
              }),
              (this.hasProjected = !1),
              (this.isVisible = !0),
              (this.animationProgress = 0),
              (this.sharedNodes = new Map()),
              (this.latestValues = e),
              (this.root = t ? t.root || t : this),
              (this.path = t ? [...t.path, t] : []),
              (this.parent = t),
              (this.depth = t ? t.depth + 1 : 0);
            for (let n = 0; n < this.path.length; n++)
              this.path[n].shouldResetTransform = !0;
            this.root === this && (this.nodes = new xa());
          }
          addEventListener(e, t) {
            return (
              this.eventHandlers.has(e) || this.eventHandlers.set(e, new Ci()),
              this.eventHandlers.get(e).add(t)
            );
          }
          notifyListeners(e) {
            const t = this.eventHandlers.get(e);
            for (
              var n = arguments.length, i = new Array(n > 1 ? n - 1 : 0), r = 1;
              r < n;
              r++
            )
              i[r - 1] = arguments[r];
            t && t.notify(...i);
          }
          hasListeners(e) {
            return this.eventHandlers.has(e);
          }
          mount(e) {
            let n =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : this.root.hasTreeAnimated;
            if (this.instance) return;
            var i;
            (this.isSVG = (i = e) instanceof SVGElement && "svg" !== i.tagName),
              (this.instance = e);
            const { layoutId: r, layout: a, visualElement: o } = this.options;
            if (
              (o && !o.current && o.mount(e),
                this.root.nodes.add(this),
                this.parent && this.parent.children.add(this),
                n && (a || r) && (this.isLayoutDirty = !0),
                t)
            ) {
              let n;
              const i = () => (this.root.updateBlockedByResize = !1);
              t(e, () => {
                (this.root.updateBlockedByResize = !0),
                  n && n(),
                  (n = (function (e, t) {
                    const n = $n.now(),
                      i = (r) => {
                        let { timestamp: a } = r;
                        const o = a - n;
                        o >= t && (Je(i), e(o - t));
                      };
                    return Ze.read(i, !0), () => Je(i);
                  })(i, 250)),
                  jr.hasAnimatedSinceResize &&
                  ((jr.hasAnimatedSinceResize = !1), this.nodes.forEach(Ua));
              });
            }
            r && this.root.registerSharedNode(r, this),
              !1 !== this.options.animate &&
              o &&
              (r || a) &&
              this.addEventListener("didUpdate", (e) => {
                let {
                  delta: t,
                  hasLayoutChanged: n,
                  hasRelativeTargetChanged: i,
                  layout: r,
                } = e;
                if (this.isTreeAnimationBlocked())
                  return (
                    (this.target = void 0),
                    void (this.relativeTarget = void 0)
                  );
                const a =
                  this.options.transition || o.getDefaultTransition() || Ha,
                  {
                    onLayoutAnimationStart: s,
                    onLayoutAnimationComplete: l,
                  } = o.getProps(),
                  c = !this.targetLayout || !ma(this.targetLayout, r) || i,
                  u = !n && i;
                if (
                  this.options.layoutRoot ||
                  (this.resumeFrom && this.resumeFrom.instance) ||
                  u ||
                  (n && (c || !this.currentAnimation))
                ) {
                  this.resumeFrom &&
                    ((this.resumingFrom = this.resumeFrom),
                      (this.resumingFrom.resumingFrom = void 0)),
                    this.setAnimationOrigin(t, u);
                  const e = { ...Ei(a, "layout"), onPlay: s, onComplete: l };
                  (o.shouldReduceMotion || this.options.layoutRoot) &&
                    ((e.delay = 0), (e.type = !1)),
                    this.startAnimation(e);
                } else
                  n || Ua(this),
                    this.isLead() &&
                    this.options.onExitComplete &&
                    this.options.onExitComplete();
                this.targetLayout = r;
              });
          }
          unmount() {
            this.options.layoutId && this.willUpdate(),
              this.root.nodes.remove(this);
            const e = this.getStack();
            e && e.remove(this),
              this.parent && this.parent.children.delete(this),
              (this.instance = void 0),
              Je(this.updateProjection);
          }
          blockUpdate() {
            this.updateManuallyBlocked = !0;
          }
          unblockUpdate() {
            this.updateManuallyBlocked = !1;
          }
          isUpdateBlocked() {
            return this.updateManuallyBlocked || this.updateBlockedByResize;
          }
          isTreeAnimationBlocked() {
            return (
              this.isAnimationBlocked ||
              (this.parent && this.parent.isTreeAnimationBlocked()) ||
              !1
            );
          }
          startUpdate() {
            this.isUpdateBlocked() ||
              ((this.isUpdating = !0),
                this.nodes && this.nodes.forEach(ka),
                this.animationId++);
          }
          getTransformTemplate() {
            const { visualElement: e } = this.options;
            return e && e.getProps().transformTemplate;
          }
          willUpdate() {
            let e =
              !(arguments.length > 0 && void 0 !== arguments[0]) ||
              arguments[0];
            if (((this.root.hasTreeAnimated = !0), this.root.isUpdateBlocked()))
              return void (
                this.options.onExitComplete && this.options.onExitComplete()
              );
            if (
              (!this.root.isUpdating && this.root.startUpdate(),
                this.isLayoutDirty)
            )
              return;
            this.isLayoutDirty = !0;
            for (let r = 0; r < this.path.length; r++) {
              const e = this.path[r];
              (e.shouldResetTransform = !0),
                e.updateScroll("snapshot"),
                e.options.layoutRoot && e.willUpdate(!1);
            }
            const { layoutId: t, layout: n } = this.options;
            if (void 0 === t && !n) return;
            const i = this.getTransformTemplate();
            (this.prevTransformTemplateValue = i
              ? i(this.latestValues, "")
              : void 0),
              this.updateSnapshot(),
              e && this.notifyListeners("willUpdate");
          }
          update() {
            this.updateScheduled = !1;
            if (this.isUpdateBlocked())
              return (
                this.unblockUpdate(),
                this.clearAllSnapshots(),
                void this.nodes.forEach(La)
              );
            this.isUpdating || this.nodes.forEach(Na),
              (this.isUpdating = !1),
              this.nodes.forEach(Da),
              this.nodes.forEach(wa),
              this.nodes.forEach(Aa),
              this.clearAllSnapshots();
            const e = $n.now();
            (Qe.delta = ne(0, 1e3 / 60, e - Qe.timestamp)),
              (Qe.timestamp = e),
              (Qe.isProcessing = !0),
              $e.update.process(Qe),
              $e.preRender.process(Qe),
              $e.render.process(Qe),
              (Qe.isProcessing = !1);
          }
          didUpdate() {
            this.updateScheduled ||
              ((this.updateScheduled = !0), S.read(() => this.update()));
          }
          clearAllSnapshots() {
            this.nodes.forEach(Pa), this.sharedNodes.forEach(Fa);
          }
          scheduleUpdateProjection() {
            this.projectionUpdateScheduled ||
              ((this.projectionUpdateScheduled = !0),
                Ze.preRender(this.updateProjection, !1, !0));
          }
          scheduleCheckAfterUnmount() {
            Ze.postRender(() => {
              this.isLayoutDirty
                ? this.root.didUpdate()
                : this.root.checkUpdateFailed();
            });
          }
          updateSnapshot() {
            !this.snapshot && this.instance && (this.snapshot = this.measure());
          }
          updateLayout() {
            if (!this.instance) return;
            if (
              (this.updateScroll(),
                (!this.options.alwaysMeasureLayout || !this.isLead()) &&
                !this.isLayoutDirty)
            )
              return;
            if (this.resumeFrom && !this.resumeFrom.instance)
              for (let n = 0; n < this.path.length; n++) {
                this.path[n].updateScroll();
              }
            const e = this.layout;
            (this.layout = this.measure(!1)),
              (this.layoutCorrected = br()),
              (this.isLayoutDirty = !1),
              (this.projectionDelta = void 0),
              this.notifyListeners("measure", this.layout.layoutBox);
            const { visualElement: t } = this.options;
            t &&
              t.notify(
                "LayoutMeasure",
                this.layout.layoutBox,
                e ? e.layoutBox : void 0
              );
          }
          updateScroll() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "measure",
              t = Boolean(this.options.layoutScroll && this.instance);
            this.scroll &&
              this.scroll.animationId === this.root.animationId &&
              this.scroll.phase === e &&
              (t = !1),
              t &&
              (this.scroll = {
                animationId: this.root.animationId,
                phase: e,
                isRoot: r(this.instance),
                offset: i(this.instance),
              });
          }
          resetTransform() {
            if (!a) return;
            const e = this.isLayoutDirty || this.shouldResetTransform,
              t = this.projectionDelta && !fa(this.projectionDelta),
              n = this.getTransformTemplate(),
              i = n ? n(this.latestValues, "") : void 0,
              r = i !== this.prevTransformTemplateValue;
            e &&
              (t || wr(this.latestValues) || r) &&
              (a(this.instance, i),
                (this.shouldResetTransform = !1),
                this.scheduleRender());
          }
          measure() {
            let e =
              !(arguments.length > 0 && void 0 !== arguments[0]) ||
              arguments[0];
            const t = this.measurePageBox();
            let n = this.removeElementScroll(t);
            var i;
            return (
              e && (n = this.removeTransform(n)),
              ja((i = n).x),
              ja(i.y),
              {
                animationId: this.root.animationId,
                measuredBox: t,
                layoutBox: n,
                latestValues: {},
                source: this.id,
              }
            );
          }
          measurePageBox() {
            const { visualElement: e } = this.options;
            if (!e) return br();
            const t = e.measureViewportBox(),
              { scroll: n } = this.root;
            return n && (Ur(t.x, n.offset.x), Ur(t.y, n.offset.y)), t;
          }
          removeElementScroll(e) {
            const t = br();
            sa(t, e);
            for (let n = 0; n < this.path.length; n++) {
              const i = this.path[n],
                { scroll: r, options: a } = i;
              if (i !== this.root && r && a.layoutScroll) {
                if (r.isRoot) {
                  sa(t, e);
                  const { scroll: n } = this.root;
                  n && (Ur(t.x, -n.offset.x), Ur(t.y, -n.offset.y));
                }
                Ur(t.x, r.offset.x), Ur(t.y, r.offset.y);
              }
            }
            return t;
          }
          applyTransform(e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            const n = br();
            sa(n, e);
            for (let i = 0; i < this.path.length; i++) {
              const e = this.path[i];
              !t &&
                e.options.layoutScroll &&
                e.scroll &&
                e !== e.root &&
                Fr(n, { x: -e.scroll.offset.x, y: -e.scroll.offset.y }),
                wr(e.latestValues) && Fr(n, e.latestValues);
            }
            return wr(this.latestValues) && Fr(n, this.latestValues), n;
          }
          removeTransform(e) {
            const t = br();
            sa(t, e);
            for (let n = 0; n < this.path.length; n++) {
              const e = this.path[n];
              if (!e.instance) continue;
              if (!wr(e.latestValues)) continue;
              Tr(e.latestValues) && e.updateSnapshot();
              const i = br();
              sa(i, e.measurePageBox()),
                ha(
                  t,
                  e.latestValues,
                  e.snapshot ? e.snapshot.layoutBox : void 0,
                  i
                );
            }
            return wr(this.latestValues) && ha(t, this.latestValues), t;
          }
          setTargetDelta(e) {
            (this.targetDelta = e),
              this.root.scheduleUpdateProjection(),
              (this.isProjectionDirty = !0);
          }
          setOptions(e) {
            this.options = {
              ...this.options,
              ...e,
              crossfade: void 0 === e.crossfade || e.crossfade,
            };
          }
          clearMeasurements() {
            (this.scroll = void 0),
              (this.layout = void 0),
              (this.snapshot = void 0),
              (this.prevTransformTemplateValue = void 0),
              (this.targetDelta = void 0),
              (this.target = void 0),
              (this.isLayoutDirty = !1);
          }
          forceRelativeParentToResolveTarget() {
            this.relativeParent &&
              this.relativeParent.resolvedRelativeTargetAt !== Qe.timestamp &&
              this.relativeParent.resolveTargetDelta(!0);
          }
          resolveTargetDelta() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            var t;
            const n = this.getLead();
            this.isProjectionDirty ||
              (this.isProjectionDirty = n.isProjectionDirty),
              this.isTransformDirty ||
              (this.isTransformDirty = n.isTransformDirty),
              this.isSharedProjectionDirty ||
              (this.isSharedProjectionDirty = n.isSharedProjectionDirty);
            const i = Boolean(this.resumingFrom) || this !== n;
            if (
              !(
                e ||
                (i && this.isSharedProjectionDirty) ||
                this.isProjectionDirty ||
                (null === (t = this.parent) || void 0 === t
                  ? void 0
                  : t.isProjectionDirty) ||
                this.attemptToResolveRelativeTarget
              )
            )
              return;
            const { layout: r, layoutId: a } = this.options;
            if (this.layout && (r || a)) {
              if (
                ((this.resolvedRelativeTargetAt = Qe.timestamp),
                  !this.targetDelta && !this.relativeTarget)
              ) {
                const e = this.getClosestProjectingParent();
                e && e.layout && 1 !== this.animationProgress
                  ? ((this.relativeParent = e),
                    this.forceRelativeParentToResolveTarget(),
                    (this.relativeTarget = br()),
                    (this.relativeTargetOrigin = br()),
                    fr(
                      this.relativeTargetOrigin,
                      this.layout.layoutBox,
                      e.layout.layoutBox
                    ),
                    sa(this.relativeTarget, this.relativeTargetOrigin))
                  : (this.relativeParent = this.relativeTarget = void 0);
              }
              if (this.relativeTarget || this.targetDelta) {
                var o, s, l;
                if (
                  (this.target ||
                    ((this.target = br()), (this.targetWithTransforms = br())),
                    this.relativeTarget &&
                      this.relativeTargetOrigin &&
                      this.relativeParent &&
                      this.relativeParent.target
                      ? (this.forceRelativeParentToResolveTarget(),
                        (o = this.target),
                        (s = this.relativeTarget),
                        (l = this.relativeParent.target),
                        hr(o.x, s.x, l.x),
                        hr(o.y, s.y, l.y))
                      : this.targetDelta
                        ? (Boolean(this.resumingFrom)
                          ? (this.target = this.applyTransform(
                            this.layout.layoutBox
                          ))
                          : sa(this.target, this.layout.layoutBox),
                          Nr(this.target, this.targetDelta))
                        : sa(this.target, this.layout.layoutBox),
                    this.attemptToResolveRelativeTarget)
                ) {
                  this.attemptToResolveRelativeTarget = !1;
                  const e = this.getClosestProjectingParent();
                  e &&
                    Boolean(e.resumingFrom) === Boolean(this.resumingFrom) &&
                    !e.options.layoutScroll &&
                    e.target &&
                    1 !== this.animationProgress
                    ? ((this.relativeParent = e),
                      this.forceRelativeParentToResolveTarget(),
                      (this.relativeTarget = br()),
                      (this.relativeTargetOrigin = br()),
                      fr(this.relativeTargetOrigin, this.target, e.target),
                      sa(this.relativeTarget, this.relativeTargetOrigin))
                    : (this.relativeParent = this.relativeTarget = void 0);
                }
                Ma.resolvedTargetDeltas++;
              }
            }
          }
          getClosestProjectingParent() {
            if (
              this.parent &&
              !Tr(this.parent.latestValues) &&
              !Ar(this.parent.latestValues)
            )
              return this.parent.isProjecting()
                ? this.parent
                : this.parent.getClosestProjectingParent();
          }
          isProjecting() {
            return Boolean(
              (this.relativeTarget ||
                this.targetDelta ||
                this.options.layoutRoot) &&
              this.layout
            );
          }
          calcProjection() {
            var e;
            const t = this.getLead(),
              n = Boolean(this.resumingFrom) || this !== t;
            let i = !0;
            if (
              ((this.isProjectionDirty ||
                (null === (e = this.parent) || void 0 === e
                  ? void 0
                  : e.isProjectionDirty)) &&
                (i = !1),
                n &&
                (this.isSharedProjectionDirty || this.isTransformDirty) &&
                (i = !1),
                this.resolvedRelativeTargetAt === Qe.timestamp && (i = !1),
                i)
            )
              return;
            const { layout: r, layoutId: a } = this.options;
            if (
              ((this.isTreeAnimating = Boolean(
                (this.parent && this.parent.isTreeAnimating) ||
                this.currentAnimation ||
                this.pendingAnimation
              )),
                this.isTreeAnimating ||
                (this.targetDelta = this.relativeTarget = void 0),
                !this.layout || (!r && !a))
            )
              return;
            sa(this.layoutCorrected, this.layout.layoutBox);
            const o = this.treeScale.x,
              s = this.treeScale.y;
            !(function (e, t, n) {
              let i =
                arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
              const r = n.length;
              if (!r) return;
              let a, o;
              t.x = t.y = 1;
              for (let s = 0; s < r; s++) {
                (a = n[s]), (o = a.projectionDelta);
                const r = a.instance;
                (r && r.style && "contents" === r.style.display) ||
                  (i &&
                    a.options.layoutScroll &&
                    a.scroll &&
                    a !== a.root &&
                    Fr(e, { x: -a.scroll.offset.x, y: -a.scroll.offset.y }),
                    o && ((t.x *= o.x.scale), (t.y *= o.y.scale), Nr(e, o)),
                    i && wr(a.latestValues) && Fr(e, a.latestValues));
              }
              (t.x = Dr(t.x)), (t.y = Dr(t.y));
            })(this.layoutCorrected, this.treeScale, this.path, n),
              !t.layout ||
              t.target ||
              (1 === this.treeScale.x && 1 === this.treeScale.y) ||
              ((t.target = t.layout.layoutBox),
                (t.targetWithTransforms = br()));
            const { target: l } = t;
            if (!l)
              return void (
                this.projectionTransform &&
                ((this.projectionDelta = xr()),
                  (this.projectionTransform = "none"),
                  this.scheduleRender())
              );
            this.projectionDelta ||
              ((this.projectionDelta = xr()),
                (this.projectionDeltaWithTransform = xr()));
            const c = this.projectionTransform;
            dr(
              this.projectionDelta,
              this.layoutCorrected,
              l,
              this.latestValues
            ),
              (this.projectionTransform = _a(
                this.projectionDelta,
                this.treeScale
              )),
              (this.projectionTransform === c &&
                this.treeScale.x === o &&
                this.treeScale.y === s) ||
              ((this.hasProjected = !0),
                this.scheduleRender(),
                this.notifyListeners("projectionUpdate", l)),
              Ma.recalculatedProjection++;
          }
          hide() {
            this.isVisible = !1;
          }
          show() {
            this.isVisible = !0;
          }
          scheduleRender() {
            let e =
              !(arguments.length > 0 && void 0 !== arguments[0]) ||
              arguments[0];
            if (
              (this.options.scheduleRender && this.options.scheduleRender(), e)
            ) {
              const e = this.getStack();
              e && e.scheduleRender();
            }
            this.resumingFrom &&
              !this.resumingFrom.instance &&
              (this.resumingFrom = void 0);
          }
          setAnimationOrigin(e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            const n = this.snapshot,
              i = n ? n.latestValues : {},
              r = { ...this.latestValues },
              a = xr();
            (this.relativeParent && this.relativeParent.options.layoutRoot) ||
              (this.relativeTarget = this.relativeTargetOrigin = void 0),
              (this.attemptToResolveRelativeTarget = !t);
            const o = br(),
              s =
                (n ? n.source : void 0) !==
                (this.layout ? this.layout.source : void 0),
              l = this.getStack(),
              c = !l || l.members.length <= 1,
              u = Boolean(
                s && !c && !0 === this.options.crossfade && !this.path.some(Va)
              );
            let d;
            (this.animationProgress = 0),
              (this.mixTargetDelta = (t) => {
                const n = t / 1e3;
                za(a.x, e.x, n),
                  za(a.y, e.y, n),
                  this.setTargetDelta(a),
                  this.relativeTarget &&
                  this.relativeTargetOrigin &&
                  this.layout &&
                  this.relativeParent &&
                  this.relativeParent.layout &&
                  (fr(
                    o,
                    this.layout.layoutBox,
                    this.relativeParent.layout.layoutBox
                  ),
                    (function (e, t, n, i) {
                      Ba(e.x, t.x, n.x, i), Ba(e.y, t.y, n.y, i);
                    })(this.relativeTarget, this.relativeTargetOrigin, o, n),
                    d &&
                    (function (e, t) {
                      return (
                        e.x.min === t.x.min &&
                        e.x.max === t.x.max &&
                        e.y.min === t.y.min &&
                        e.y.max === t.y.max
                      );
                    })(this.relativeTarget, d) &&
                    (this.isProjectionDirty = !1),
                    d || (d = br()),
                    sa(d, this.relativeTarget)),
                  s &&
                  ((this.animationValues = r),
                    (function (e, t, n, i, r, a) {
                      r
                        ? ((e.opacity = en(
                          0,
                          void 0 !== n.opacity ? n.opacity : 1,
                          ia(i)
                        )),
                          (e.opacityExit = en(
                            void 0 !== t.opacity ? t.opacity : 1,
                            0,
                            ra(i)
                          )))
                        : a &&
                        (e.opacity = en(
                          void 0 !== t.opacity ? t.opacity : 1,
                          void 0 !== n.opacity ? n.opacity : 1,
                          i
                        ));
                      for (let o = 0; o < $r; o++) {
                        const r = "border".concat(Qr[o], "Radius");
                        let a = na(t, r),
                          s = na(n, r);
                        (void 0 === a && void 0 === s) ||
                          (a || (a = 0),
                            s || (s = 0),
                            0 === a || 0 === s || ta(a) === ta(s)
                              ? ((e[r] = Math.max(en(ea(a), ea(s), i), 0)),
                                (pe.test(s) || pe.test(a)) && (e[r] += "%"))
                              : (e[r] = s));
                      }
                      (t.rotate || n.rotate) &&
                        (e.rotate = en(t.rotate || 0, n.rotate || 0, i));
                    })(r, i, this.latestValues, n, u, c)),
                  this.root.scheduleUpdateProjection(),
                  this.scheduleRender(),
                  (this.animationProgress = n);
              }),
              this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
          }
          startAnimation(e) {
            this.notifyListeners("animationStart"),
              this.currentAnimation && this.currentAnimation.stop(),
              this.resumingFrom &&
              this.resumingFrom.currentAnimation &&
              this.resumingFrom.currentAnimation.stop(),
              this.pendingAnimation &&
              (Je(this.pendingAnimation), (this.pendingAnimation = void 0)),
              (this.pendingAnimation = Ze.update(() => {
                (jr.hasAnimatedSinceResize = !0),
                  (this.currentAnimation = (function (e, t, n) {
                    const i = Y(e) ? e : Ni(e);
                    return i.start(Mi("", i, t, n)), i.animation;
                  })(0, 1e3, {
                    ...e,
                    onUpdate: (t) => {
                      this.mixTargetDelta(t), e.onUpdate && e.onUpdate(t);
                    },
                    onComplete: () => {
                      e.onComplete && e.onComplete(), this.completeAnimation();
                    },
                  })),
                  this.resumingFrom &&
                  (this.resumingFrom.currentAnimation =
                    this.currentAnimation),
                  (this.pendingAnimation = void 0);
              }));
          }
          completeAnimation() {
            this.resumingFrom &&
              ((this.resumingFrom.currentAnimation = void 0),
                (this.resumingFrom.preserveOpacity = void 0));
            const e = this.getStack();
            e && e.exitAnimationComplete(),
              (this.resumingFrom =
                this.currentAnimation =
                this.animationValues =
                void 0),
              this.notifyListeners("animationComplete");
          }
          finishAnimation() {
            this.currentAnimation &&
              (this.mixTargetDelta && this.mixTargetDelta(1e3),
                this.currentAnimation.stop()),
              this.completeAnimation();
          }
          applyTransformsToTarget() {
            const e = this.getLead();
            let {
              targetWithTransforms: t,
              target: n,
              layout: i,
              latestValues: r,
            } = e;
            if (t && n && i) {
              if (
                this !== e &&
                this.layout &&
                i &&
                Xa(
                  this.options.animationType,
                  this.layout.layoutBox,
                  i.layoutBox
                )
              ) {
                n = this.target || br();
                const t = lr(this.layout.layoutBox.x);
                (n.x.min = e.target.x.min), (n.x.max = n.x.min + t);
                const i = lr(this.layout.layoutBox.y);
                (n.y.min = e.target.y.min), (n.y.max = n.y.min + i);
              }
              sa(t, n),
                Fr(t, r),
                dr(
                  this.projectionDeltaWithTransform,
                  this.layoutCorrected,
                  t,
                  r
                );
            }
          }
          registerSharedNode(e, t) {
            this.sharedNodes.has(e) || this.sharedNodes.set(e, new va());
            this.sharedNodes.get(e).add(t);
            const n = t.options.initialPromotionConfig;
            t.promote({
              transition: n ? n.transition : void 0,
              preserveFollowOpacity:
                n && n.shouldPreserveFollowOpacity
                  ? n.shouldPreserveFollowOpacity(t)
                  : void 0,
            });
          }
          isLead() {
            const e = this.getStack();
            return !e || e.lead === this;
          }
          getLead() {
            var e;
            const { layoutId: t } = this.options;
            return (
              (t &&
                (null === (e = this.getStack()) || void 0 === e
                  ? void 0
                  : e.lead)) ||
              this
            );
          }
          getPrevLead() {
            var e;
            const { layoutId: t } = this.options;
            return t
              ? null === (e = this.getStack()) || void 0 === e
                ? void 0
                : e.prevLead
              : void 0;
          }
          getStack() {
            const { layoutId: e } = this.options;
            if (e) return this.root.sharedNodes.get(e);
          }
          promote() {
            let {
              needsReset: e,
              transition: t,
              preserveFollowOpacity: n,
            } = arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {};
            const i = this.getStack();
            i && i.promote(this, n),
              e && ((this.projectionDelta = void 0), (this.needsReset = !0)),
              t && this.setOptions({ transition: t });
          }
          relegate() {
            const e = this.getStack();
            return !!e && e.relegate(this);
          }
          resetRotation() {
            const { visualElement: e } = this.options;
            if (!e) return;
            let t = !1;
            const { latestValues: n } = e;
            if (
              ((n.rotate || n.rotateX || n.rotateY || n.rotateZ) && (t = !0),
                !t)
            )
              return;
            const i = {};
            for (let r = 0; r < ba.length; r++) {
              const t = "rotate" + ba[r];
              n[t] && ((i[t] = n[t]), e.setStaticValue(t, 0));
            }
            e.render();
            for (const r in i) e.setStaticValue(r, i[r]);
            e.scheduleRender();
          }
          getProjectionStyles(e) {
            var t, n;
            if (!this.instance || this.isSVG) return;
            if (!this.isVisible) return Sa;
            const i = { visibility: "" },
              r = this.getTransformTemplate();
            if (this.needsReset)
              return (
                (this.needsReset = !1),
                (i.opacity = ""),
                (i.pointerEvents =
                  Ye(null === e || void 0 === e ? void 0 : e.pointerEvents) ||
                  ""),
                (i.transform = r ? r(this.latestValues, "") : "none"),
                i
              );
            const a = this.getLead();
            if (!this.projectionDelta || !this.layout || !a.target) {
              const t = {};
              return (
                this.options.layoutId &&
                ((t.opacity =
                  void 0 !== this.latestValues.opacity
                    ? this.latestValues.opacity
                    : 1),
                  (t.pointerEvents =
                    Ye(null === e || void 0 === e ? void 0 : e.pointerEvents) ||
                    "")),
                this.hasProjected &&
                !wr(this.latestValues) &&
                ((t.transform = r ? r({}, "") : "none"),
                  (this.hasProjected = !1)),
                t
              );
            }
            const o = a.animationValues || a.latestValues;
            this.applyTransformsToTarget(),
              (i.transform = _a(
                this.projectionDeltaWithTransform,
                this.treeScale,
                o
              )),
              r && (i.transform = r(o, i.transform));
            const { x: s, y: l } = this.projectionDelta;
            (i.transformOrigin = ""
              .concat(100 * s.origin, "% ")
              .concat(100 * l.origin, "% 0")),
              a.animationValues
                ? (i.opacity =
                  a === this
                    ? null !==
                      (n =
                        null !== (t = o.opacity) && void 0 !== t
                          ? t
                          : this.latestValues.opacity) && void 0 !== n
                      ? n
                      : 1
                    : this.preserveOpacity
                      ? this.latestValues.opacity
                      : o.opacityExit)
                : (i.opacity =
                  a === this
                    ? void 0 !== o.opacity
                      ? o.opacity
                      : ""
                    : void 0 !== o.opacityExit
                      ? o.opacityExit
                      : 0);
            for (const c in G) {
              if (void 0 === o[c]) continue;
              const { correct: e, applyTo: t } = G[c],
                n = "none" === i.transform ? o[c] : e(o[c], a);
              if (t) {
                const e = t.length;
                for (let r = 0; r < e; r++) i[t[r]] = n;
              } else i[c] = n;
            }
            return (
              this.options.layoutId &&
              (i.pointerEvents =
                a === this
                  ? Ye(
                    null === e || void 0 === e ? void 0 : e.pointerEvents
                  ) || ""
                  : "none"),
              i
            );
          }
          clearSnapshot() {
            this.resumeFrom = this.snapshot = void 0;
          }
          resetTree() {
            this.root.nodes.forEach((e) => {
              var t;
              return null === (t = e.currentAnimation) || void 0 === t
                ? void 0
                : t.stop();
            }),
              this.root.nodes.forEach(La),
              this.root.sharedNodes.clear();
          }
        };
      }
      function wa(e) {
        e.updateLayout();
      }
      function Aa(e) {
        var t;
        const n =
          (null === (t = e.resumeFrom) || void 0 === t ? void 0 : t.snapshot) ||
          e.snapshot;
        if (e.isLead() && e.layout && n && e.hasListeners("didUpdate")) {
          const { layoutBox: t, measuredBox: i } = e.layout,
            { animationType: r } = e.options,
            a = n.source !== e.layout.source;
          "size" === r
            ? Sr((e) => {
              const i = a ? n.measuredBox[e] : n.layoutBox[e],
                r = lr(i);
              (i.min = t[e].min), (i.max = i.min + r);
            })
            : Xa(r, n.layoutBox, t) &&
            Sr((i) => {
              const r = a ? n.measuredBox[i] : n.layoutBox[i],
                o = lr(t[i]);
              (r.max = r.min + o),
                e.relativeTarget &&
                !e.currentAnimation &&
                ((e.isProjectionDirty = !0),
                  (e.relativeTarget[i].max = e.relativeTarget[i].min + o));
            });
          const o = xr();
          dr(o, t, n.layoutBox);
          const s = xr();
          a
            ? dr(s, e.applyTransform(i, !0), n.measuredBox)
            : dr(s, t, n.layoutBox);
          const l = !fa(o);
          let c = !1;
          if (!e.resumeFrom) {
            const i = e.getClosestProjectingParent();
            if (i && !i.resumeFrom) {
              const { snapshot: r, layout: a } = i;
              if (r && a) {
                const o = br();
                fr(o, n.layoutBox, r.layoutBox);
                const s = br();
                fr(s, t, a.layoutBox),
                  ma(o, s) || (c = !0),
                  i.options.layoutRoot &&
                  ((e.relativeTarget = s),
                    (e.relativeTargetOrigin = o),
                    (e.relativeParent = i));
              }
            }
          }
          e.notifyListeners("didUpdate", {
            layout: t,
            snapshot: n,
            delta: s,
            layoutDelta: o,
            hasLayoutChanged: l,
            hasRelativeTargetChanged: c,
          });
        } else if (e.isLead()) {
          const { onExitComplete: t } = e.options;
          t && t();
        }
        e.options.transition = void 0;
      }
      function Ra(e) {
        Ma.totalNodes++,
          e.parent &&
          (e.isProjecting() ||
            (e.isProjectionDirty = e.parent.isProjectionDirty),
            e.isSharedProjectionDirty ||
            (e.isSharedProjectionDirty = Boolean(
              e.isProjectionDirty ||
              e.parent.isProjectionDirty ||
              e.parent.isSharedProjectionDirty
            )),
            e.isTransformDirty ||
            (e.isTransformDirty = e.parent.isTransformDirty));
      }
      function Ca(e) {
        e.isProjectionDirty =
          e.isSharedProjectionDirty =
          e.isTransformDirty =
          !1;
      }
      function Pa(e) {
        e.clearSnapshot();
      }
      function La(e) {
        e.clearMeasurements();
      }
      function Na(e) {
        e.isLayoutDirty = !1;
      }
      function Da(e) {
        const { visualElement: t } = e.options;
        t &&
          t.getProps().onBeforeLayoutMeasure &&
          t.notify("BeforeLayoutMeasure"),
          e.resetTransform();
      }
      function Ua(e) {
        e.finishAnimation(),
          (e.targetDelta = e.relativeTarget = e.target = void 0),
          (e.isProjectionDirty = !0);
      }
      function Ia(e) {
        e.resolveTargetDelta();
      }
      function Oa(e) {
        e.calcProjection();
      }
      function ka(e) {
        e.resetRotation();
      }
      function Fa(e) {
        e.removeLeadSnapshot();
      }
      function za(e, t, n) {
        (e.translate = en(t.translate, 0, n)),
          (e.scale = en(t.scale, 1, n)),
          (e.origin = t.origin),
          (e.originPoint = t.originPoint);
      }
      function Ba(e, t, n, i) {
        (e.min = en(t.min, n.min, i)), (e.max = en(t.max, n.max, i));
      }
      function Va(e) {
        return e.animationValues && void 0 !== e.animationValues.opacityExit;
      }
      const Ha = { duration: 0.45, ease: [0.4, 0, 0.1, 1] },
        Ga = (e) =>
          "undefined" !== typeof navigator &&
          navigator.userAgent &&
          navigator.userAgent.toLowerCase().includes(e),
        Wa = Ga("applewebkit/") && !Ga("chrome/") ? Math.round : i;
      function ja(e) {
        (e.min = Wa(e.min)), (e.max = Wa(e.max));
      }
      function Xa(e, t, n) {
        return (
          "position" === e ||
          ("preserve-aspect" === e && !cr(ga(t), ga(n), 0.2))
        );
      }
      const Ya = Ta({
        attachResizeListener: (e, t) => nt(e, "resize", t),
        measureScroll: () => ({
          x: document.documentElement.scrollLeft || document.body.scrollLeft,
          y: document.documentElement.scrollTop || document.body.scrollTop,
        }),
        checkIsScrollRoot: () => !0,
      }),
        qa = { current: void 0 },
        Ka = Ta({
          measureScroll: (e) => ({ x: e.scrollLeft, y: e.scrollTop }),
          defaultParent: () => {
            if (!qa.current) {
              const e = new Ya({});
              e.mount(window),
                e.setOptions({ layoutScroll: !0 }),
                (qa.current = e);
            }
            return qa.current;
          },
          resetTransform: (e, t) => {
            e.style.transform = void 0 !== t ? t : "none";
          },
          checkIsScrollRoot: (e) =>
            Boolean("fixed" === window.getComputedStyle(e).position),
        }),
        Za = {
          pan: {
            Feature: class extends ft {
              constructor() {
                super(...arguments), (this.removePointerDownListener = i);
              }
              onPointerDown(e) {
                this.session = new tr(e, this.createPanHandlers(), {
                  transformPagePoint: this.node.getTransformPagePoint(),
                  contextWindow: Br(this.node),
                });
              }
              createPanHandlers() {
                const {
                  onPanSessionStart: e,
                  onPanStart: t,
                  onPan: n,
                  onPanEnd: i,
                } = this.node.getProps();
                return {
                  onSessionStart: Wr(e),
                  onStart: Wr(t),
                  onMove: n,
                  onEnd: (e, t) => {
                    delete this.session, i && Ze.update(() => i(e, t));
                  },
                };
              }
              mount() {
                this.removePointerDownListener = ot(
                  this.node.current,
                  "pointerdown",
                  (e) => this.onPointerDown(e)
                );
              }
              update() {
                this.session &&
                  this.session.updateHandlers(this.createPanHandlers());
              }
              unmount() {
                this.removePointerDownListener(),
                  this.session && this.session.end();
              }
            },
          },
          drag: {
            Feature: class extends ft {
              constructor(e) {
                super(e),
                  (this.removeGroupControls = i),
                  (this.removeListeners = i),
                  (this.controls = new Hr(e));
              }
              mount() {
                const { dragControls: e } = this.node.getProps();
                e && (this.removeGroupControls = e.subscribe(this.controls)),
                  (this.removeListeners = this.controls.addListeners() || i);
              }
              unmount() {
                this.removeGroupControls(), this.removeListeners();
              }
            },
            ProjectionNode: Ka,
            MeasureLayout: Zr,
          },
        },
        Ja = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
      const Qa = 4;
      function $a(e, t) {
        let n =
          arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
        a(
          n <= Qa,
          'Max CSS variable fallback depth detected in property "'.concat(
            e,
            '". This may indicate a circular fallback dependency.'
          )
        );
        const [i, r] = (function (e) {
          const t = Ja.exec(e);
          if (!t) return [,];
          const [, n, i] = t;
          return [n, i];
        })(e);
        if (!i) return;
        const o = window.getComputedStyle(t).getPropertyValue(i);
        if (o) {
          const e = o.trim();
          return wi(e) ? parseFloat(e) : e;
        }
        return $(r) ? $a(r, t, n + 1) : r;
      }
      const eo = new Set([
        "width",
        "height",
        "top",
        "left",
        "right",
        "bottom",
        "x",
        "y",
        "translateX",
        "translateY",
      ]),
        to = (e) => eo.has(e),
        no = (e) => e === ie || e === fe,
        io = (e, t) => parseFloat(e.split(", ")[t]),
        ro = (e, t) => (n, i) => {
          let { transform: r } = i;
          if ("none" === r || !r) return 0;
          const a = r.match(/^matrix3d\((.+)\)$/);
          if (a) return io(a[1], t);
          {
            const t = r.match(/^matrix\((.+)\)$/);
            return t ? io(t[1], e) : 0;
          }
        },
        ao = new Set(["x", "y", "z"]),
        oo = W.filter((e) => !ao.has(e));
      const so = {
        width: (e, t) => {
          let { x: n } = e,
            { paddingLeft: i = "0", paddingRight: r = "0" } = t;
          return n.max - n.min - parseFloat(i) - parseFloat(r);
        },
        height: (e, t) => {
          let { y: n } = e,
            { paddingTop: i = "0", paddingBottom: r = "0" } = t;
          return n.max - n.min - parseFloat(i) - parseFloat(r);
        },
        top: (e, t) => {
          let { top: n } = t;
          return parseFloat(n);
        },
        left: (e, t) => {
          let { left: n } = t;
          return parseFloat(n);
        },
        bottom: (e, t) => {
          let { y: n } = e,
            { top: i } = t;
          return parseFloat(i) + (n.max - n.min);
        },
        right: (e, t) => {
          let { x: n } = e,
            { left: i } = t;
          return parseFloat(i) + (n.max - n.min);
        },
        x: ro(4, 13),
        y: ro(5, 14),
      };
      (so.translateX = so.x), (so.translateY = so.y);
      const lo = function (e, t) {
        let n =
          arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
          i =
            arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
        (t = { ...t }), (i = { ...i });
        const r = Object.keys(t).filter(to);
        let o = [],
          s = !1;
        const l = [];
        if (
          (r.forEach((r) => {
            const c = e.getValue(r);
            if (!e.hasValue(r)) return;
            let u = n[r],
              d = Ii(u);
            const h = t[r];
            let p;
            if (We(h)) {
              const e = h.length,
                t = null === h[0] ? 1 : 0;
              (u = h[t]), (d = Ii(u));
              for (let n = t; n < e && null !== h[n]; n++)
                p
                  ? a(Ii(h[n]) === p, "All keyframes must be of the same type")
                  : ((p = Ii(h[n])),
                    a(
                      p === d || (no(d) && no(p)),
                      "Keyframes must be of the same dimension as the current value"
                    ));
            } else p = Ii(h);
            if (d !== p)
              if (no(d) && no(p)) {
                const e = c.get();
                "string" === typeof e && c.set(parseFloat(e)),
                  "string" === typeof h
                    ? (t[r] = parseFloat(h))
                    : Array.isArray(h) &&
                    p === fe &&
                    (t[r] = h.map(parseFloat));
              } else
                (null === d || void 0 === d ? void 0 : d.transform) &&
                  (null === p || void 0 === p ? void 0 : p.transform) &&
                  (0 === u || 0 === h)
                  ? 0 === u
                    ? c.set(p.transform(u))
                    : (t[r] = d.transform(h))
                  : (s ||
                    ((o = (function (e) {
                      const t = [];
                      return (
                        oo.forEach((n) => {
                          const i = e.getValue(n);
                          void 0 !== i &&
                            (t.push([n, i.get()]),
                              i.set(n.startsWith("scale") ? 1 : 0));
                        }),
                        t.length && e.render(),
                        t
                      );
                    })(e)),
                      (s = !0)),
                    l.push(r),
                    (i[r] = void 0 !== i[r] ? i[r] : t[r]),
                    c.jump(h));
          }),
            l.length)
        ) {
          const n = l.indexOf("height") >= 0 ? window.pageYOffset : null,
            r = ((e, t, n) => {
              const i = t.measureViewportBox(),
                r = t.current,
                a = getComputedStyle(r),
                { display: o } = a,
                s = {};
              "none" === o && t.setStaticValue("display", e.display || "block"),
                n.forEach((e) => {
                  s[e] = so[e](i, a);
                }),
                t.render();
              const l = t.measureViewportBox();
              return (
                n.forEach((n) => {
                  const i = t.getValue(n);
                  i && i.jump(s[n]), (e[n] = so[n](l, a));
                }),
                e
              );
            })(t, e, l);
          return (
            o.length &&
            o.forEach((t) => {
              let [n, i] = t;
              e.getValue(n).set(i);
            }),
            e.render(),
            h && null !== n && window.scrollTo({ top: n }),
            { target: r, transitionEnd: i }
          );
        }
        return { target: t, transitionEnd: i };
      };
      function co(e, t, n, i) {
        return ((e) => Object.keys(e).some(to))(t)
          ? lo(e, t, n, i)
          : { target: t, transitionEnd: i };
      }
      const uo = (e, t, n, i) => {
        const r = (function (e, t, n) {
          let { ...i } = t;
          const r = e.current;
          if (!(r instanceof Element)) return { target: i, transitionEnd: n };
          n && (n = { ...n }),
            e.values.forEach((e) => {
              const t = e.get();
              if (!$(t)) return;
              const n = $a(t, r);
              n && e.set(n);
            });
          for (const a in i) {
            const e = i[a];
            if (!$(e)) continue;
            const t = $a(e, r);
            t && ((i[a] = t), n || (n = {}), void 0 === n[a] && (n[a] = e));
          }
          return { target: i, transitionEnd: n };
        })(e, t, i);
        return co(e, (t = r.target), n, (i = r.transitionEnd));
      },
        ho = { current: null },
        po = { current: !1 };
      const fo = new WeakMap(),
        mo = Object.keys(U),
        go = mo.length,
        vo = [
          "AnimationStart",
          "AnimationComplete",
          "Update",
          "BeforeLayoutMeasure",
          "LayoutMeasure",
          "LayoutAnimationStart",
          "LayoutAnimationComplete",
        ],
        _o = R.length;
      class yo {
        constructor(e) {
          let {
            parent: t,
            props: n,
            presenceContext: i,
            reducedMotionConfig: r,
            visualState: a,
          } = e,
            o =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : {};
          (this.current = null),
            (this.children = new Set()),
            (this.isVariantNode = !1),
            (this.isControllingVariants = !1),
            (this.shouldReduceMotion = null),
            (this.values = new Map()),
            (this.features = {}),
            (this.valueSubscriptions = new Map()),
            (this.prevMotionValues = {}),
            (this.events = {}),
            (this.propEventSubscriptions = {}),
            (this.notifyUpdate = () =>
              this.notify("Update", this.latestValues)),
            (this.render = () => {
              this.current &&
                (this.triggerBuild(),
                  this.renderInstance(
                    this.current,
                    this.renderState,
                    this.props.style,
                    this.projection
                  ));
            }),
            (this.scheduleRender = () => Ze.render(this.render, !1, !0));
          const { latestValues: s, renderState: l } = a;
          (this.latestValues = s),
            (this.baseTarget = { ...s }),
            (this.initialValues = n.initial ? { ...s } : {}),
            (this.renderState = l),
            (this.parent = t),
            (this.props = n),
            (this.presenceContext = i),
            (this.depth = t ? t.depth + 1 : 0),
            (this.reducedMotionConfig = r),
            (this.options = o),
            (this.isControllingVariants = C(n)),
            (this.isVariantNode = P(n)),
            this.isVariantNode && (this.variantChildren = new Set()),
            (this.manuallyAnimateOnMount = Boolean(t && t.current));
          const { willChange: c, ...u } = this.scrapeMotionValuesFromProps(
            n,
            {}
          );
          for (const d in u) {
            const e = u[d];
            void 0 !== s[d] && Y(e) && (e.set(s[d], !1), Ti(c) && c.add(d));
          }
        }
        scrapeMotionValuesFromProps(e, t) {
          return {};
        }
        mount(e) {
          (this.current = e),
            fo.set(e, this),
            this.projection &&
            !this.projection.instance &&
            this.projection.mount(e),
            this.parent &&
            this.isVariantNode &&
            !this.isControllingVariants &&
            (this.removeFromVariantTree = this.parent.addVariantChild(this)),
            this.values.forEach((e, t) => this.bindToMotionValue(t, e)),
            po.current ||
            (function () {
              if (((po.current = !0), h))
                if (window.matchMedia) {
                  const e = window.matchMedia("(prefers-reduced-motion)"),
                    t = () => (ho.current = e.matches);
                  e.addListener(t), t();
                } else ho.current = !1;
            })(),
            (this.shouldReduceMotion =
              "never" !== this.reducedMotionConfig &&
              ("always" === this.reducedMotionConfig || ho.current)),
            this.parent && this.parent.children.add(this),
            this.update(this.props, this.presenceContext);
        }
        unmount() {
          fo.delete(this.current),
            this.projection && this.projection.unmount(),
            Je(this.notifyUpdate),
            Je(this.render),
            this.valueSubscriptions.forEach((e) => e()),
            this.removeFromVariantTree && this.removeFromVariantTree(),
            this.parent && this.parent.children.delete(this);
          for (const e in this.events) this.events[e].clear();
          for (const e in this.features) this.features[e].unmount();
          this.current = null;
        }
        bindToMotionValue(e, t) {
          const n = j.has(e),
            i = t.on("change", (t) => {
              (this.latestValues[e] = t),
                this.props.onUpdate && Ze.update(this.notifyUpdate, !1, !0),
                n && this.projection && (this.projection.isTransformDirty = !0);
            }),
            r = t.on("renderRequest", this.scheduleRender);
          this.valueSubscriptions.set(e, () => {
            i(), r();
          });
        }
        sortNodePosition(e) {
          return this.current &&
            this.sortInstanceNodePosition &&
            this.type === e.type
            ? this.sortInstanceNodePosition(this.current, e.current)
            : 0;
        }
        loadFeatures(e, t, n, i) {
          let r,
            a,
            { children: o, ...s } = e;
          for (let l = 0; l < go; l++) {
            const e = mo[l],
              {
                isEnabled: t,
                Feature: n,
                ProjectionNode: i,
                MeasureLayout: o,
              } = U[e];
            i && (r = i),
              t(s) &&
              (!this.features[e] && n && (this.features[e] = new n(this)),
                o && (a = o));
          }
          if (
            ("html" === this.type || "svg" === this.type) &&
            !this.projection &&
            r
          ) {
            this.projection = new r(
              this.latestValues,
              this.parent && this.parent.projection
            );
            const {
              layoutId: e,
              layout: t,
              drag: n,
              dragConstraints: a,
              layoutScroll: o,
              layoutRoot: l,
            } = s;
            this.projection.setOptions({
              layoutId: e,
              layout: t,
              alwaysMeasureLayout: Boolean(n) || (a && M(a)),
              visualElement: this,
              scheduleRender: () => this.scheduleRender(),
              animationType: "string" === typeof t ? t : "both",
              initialPromotionConfig: i,
              layoutScroll: o,
              layoutRoot: l,
            });
          }
          return a;
        }
        updateFeatures() {
          for (const e in this.features) {
            const t = this.features[e];
            t.isMounted ? t.update() : (t.mount(), (t.isMounted = !0));
          }
        }
        triggerBuild() {
          this.build(
            this.renderState,
            this.latestValues,
            this.options,
            this.props
          );
        }
        measureViewportBox() {
          return this.current
            ? this.measureInstanceViewportBox(this.current, this.props)
            : br();
        }
        getStaticValue(e) {
          return this.latestValues[e];
        }
        setStaticValue(e, t) {
          this.latestValues[e] = t;
        }
        makeTargetAnimatable(e) {
          let t =
            !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          return this.makeTargetAnimatableFromInstance(e, t);
        }
        update(e, t) {
          (e.transformTemplate || this.props.transformTemplate) &&
            this.scheduleRender(),
            (this.prevProps = this.props),
            (this.props = e),
            (this.prevPresenceContext = this.presenceContext),
            (this.presenceContext = t);
          for (let n = 0; n < vo.length; n++) {
            const t = vo[n];
            this.propEventSubscriptions[t] &&
              (this.propEventSubscriptions[t](),
                delete this.propEventSubscriptions[t]);
            const i = e["on" + t];
            i && (this.propEventSubscriptions[t] = this.on(t, i));
          }
          (this.prevMotionValues = (function (e, t, n) {
            const { willChange: i } = t;
            for (const r in t) {
              const a = t[r],
                o = n[r];
              if (Y(a)) e.addValue(r, a), Ti(i) && i.add(r);
              else if (Y(o))
                e.addValue(r, Ni(a, { owner: e })), Ti(i) && i.remove(r);
              else if (o !== a)
                if (e.hasValue(r)) {
                  const t = e.getValue(r);
                  !t.hasAnimated && t.set(a);
                } else {
                  const t = e.getStaticValue(r);
                  e.addValue(r, Ni(void 0 !== t ? t : a, { owner: e }));
                }
            }
            for (const r in n) void 0 === t[r] && e.removeValue(r);
            return t;
          })(
            this,
            this.scrapeMotionValuesFromProps(e, this.prevProps),
            this.prevMotionValues
          )),
            this.handleChildMotionValue && this.handleChildMotionValue();
        }
        getProps() {
          return this.props;
        }
        getVariant(e) {
          return this.props.variants ? this.props.variants[e] : void 0;
        }
        getDefaultTransition() {
          return this.props.transition;
        }
        getTransformPagePoint() {
          return this.props.transformPagePoint;
        }
        getClosestVariantNode() {
          return this.isVariantNode
            ? this
            : this.parent
              ? this.parent.getClosestVariantNode()
              : void 0;
        }
        getVariantContext() {
          if (arguments.length > 0 && void 0 !== arguments[0] && arguments[0])
            return this.parent ? this.parent.getVariantContext() : void 0;
          if (!this.isControllingVariants) {
            const e = (this.parent && this.parent.getVariantContext()) || {};
            return (
              void 0 !== this.props.initial && (e.initial = this.props.initial),
              e
            );
          }
          const e = {};
          for (let t = 0; t < _o; t++) {
            const n = R[t],
              i = this.props[n];
            (T(i) || !1 === i) && (e[n] = i);
          }
          return e;
        }
        addVariantChild(e) {
          const t = this.getClosestVariantNode();
          if (t)
            return (
              t.variantChildren && t.variantChildren.add(e),
              () => t.variantChildren.delete(e)
            );
        }
        addValue(e, t) {
          t !== this.values.get(e) &&
            (this.removeValue(e), this.bindToMotionValue(e, t)),
            this.values.set(e, t),
            (this.latestValues[e] = t.get());
        }
        removeValue(e) {
          this.values.delete(e);
          const t = this.valueSubscriptions.get(e);
          t && (t(), this.valueSubscriptions.delete(e)),
            delete this.latestValues[e],
            this.removeValueFromRenderState(e, this.renderState);
        }
        hasValue(e) {
          return this.values.has(e);
        }
        getValue(e, t) {
          if (this.props.values && this.props.values[e])
            return this.props.values[e];
          let n = this.values.get(e);
          return (
            void 0 === n &&
            void 0 !== t &&
            ((n = Ni(t, { owner: this })), this.addValue(e, n)),
            n
          );
        }
        readValue(e) {
          var t;
          return void 0 === this.latestValues[e] && this.current
            ? null !== (t = this.getBaseTargetFromProps(this.props, e)) &&
              void 0 !== t
              ? t
              : this.readValueFromInstance(this.current, e, this.options)
            : this.latestValues[e];
        }
        setBaseTarget(e, t) {
          this.baseTarget[e] = t;
        }
        getBaseTarget(e) {
          var t;
          const { initial: n } = this.props,
            i =
              "string" === typeof n || "object" === typeof n
                ? null === (t = He(this.props, n)) || void 0 === t
                  ? void 0
                  : t[e]
                : void 0;
          if (n && void 0 !== i) return i;
          const r = this.getBaseTargetFromProps(this.props, e);
          return void 0 === r || Y(r)
            ? void 0 !== this.initialValues[e] && void 0 === i
              ? void 0
              : this.baseTarget[e]
            : r;
        }
        on(e, t) {
          return (
            this.events[e] || (this.events[e] = new Ci()), this.events[e].add(t)
          );
        }
        notify(e) {
          if (this.events[e]) {
            for (
              var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), i = 1;
              i < t;
              i++
            )
              n[i - 1] = arguments[i];
            this.events[e].notify(...n);
          }
        }
      }
      class xo extends yo {
        sortInstanceNodePosition(e, t) {
          return 2 & e.compareDocumentPosition(t) ? 1 : -1;
        }
        getBaseTargetFromProps(e, t) {
          return e.style ? e.style[t] : void 0;
        }
        removeValueFromRenderState(e, t) {
          let { vars: n, style: i } = t;
          delete n[e], delete i[e];
        }
        makeTargetAnimatableFromInstance(e, t) {
          let { transition: n, transitionEnd: i, ...r } = e;
          const a = (function (e, t, n) {
            const i = {};
            for (const r in e) {
              const e = Bi(r, t);
              if (void 0 !== e) i[r] = e;
              else {
                const e = n.getValue(r);
                e && (i[r] = e.get());
              }
            }
            return i;
          })(r, n || {}, this);
          if (t) {
            !(function (e, t, n) {
              var i, r;
              const a = Object.keys(t).filter((t) => !e.hasValue(t)),
                o = a.length;
              if (o)
                for (let s = 0; s < o; s++) {
                  const o = a[s],
                    l = t[o];
                  let c = null;
                  Array.isArray(l) && (c = l[0]),
                    null === c &&
                    (c =
                      null !==
                        (r =
                          null !== (i = n[o]) && void 0 !== i
                            ? i
                            : e.readValue(o)) && void 0 !== r
                        ? r
                        : t[o]),
                    void 0 !== c &&
                    null !== c &&
                    ("string" === typeof c && (wi(c) || bi(c))
                      ? (c = parseFloat(c))
                      : !ki(c) && Mn.test(l) && (c = xi(o, l)),
                      e.addValue(o, Ni(c, { owner: e })),
                      void 0 === n[o] && (n[o] = c),
                      null !== c && e.setBaseTarget(o, c));
                }
            })(this, r, a);
            const e = uo(this, r, a, i);
            (i = e.transitionEnd), (r = e.target);
          }
          return { transition: n, transitionEnd: i, ...r };
        }
      }
      class bo extends xo {
        constructor() {
          super(...arguments), (this.type = "html");
        }
        readValueFromInstance(e, t) {
          if (j.has(t)) {
            const e = yi(t);
            return (e && e.default) || 0;
          }
          {
            const i = ((n = e), window.getComputedStyle(n)),
              r = (J(t) ? i.getPropertyValue(t) : i[t]) || 0;
            return "string" === typeof r ? r.trim() : r;
          }
          var n;
        }
        measureInstanceViewportBox(e, t) {
          let { transformPagePoint: n } = t;
          return zr(e, n);
        }
        build(e, t, n, i) {
          xe(e, t, n, i.transformTemplate);
        }
        scrapeMotionValuesFromProps(e, t) {
          return Be(e, t);
        }
        handleChildMotionValue() {
          this.childSubscription &&
            (this.childSubscription(), delete this.childSubscription);
          const { children: e } = this.props;
          Y(e) &&
            (this.childSubscription = e.on("change", (e) => {
              this.current && (this.current.textContent = "".concat(e));
            }));
        }
        renderInstance(e, t, n, i) {
          ke(e, t, n, i);
        }
      }
      class So extends xo {
        constructor() {
          super(...arguments), (this.type = "svg"), (this.isSVGTag = !1);
        }
        getBaseTargetFromProps(e, t) {
          return e[t];
        }
        readValueFromInstance(e, t) {
          if (j.has(t)) {
            const e = yi(t);
            return (e && e.default) || 0;
          }
          return (t = Fe.has(t) ? t : m(t)), e.getAttribute(t);
        }
        measureInstanceViewportBox() {
          return br();
        }
        scrapeMotionValuesFromProps(e, t) {
          return Ve(e, t);
        }
        build(e, t, n, i) {
          Ne(e, t, n, this.isSVGTag, i.transformTemplate);
        }
        renderInstance(e, t, n, i) {
          ze(e, t, 0, i);
        }
        mount(e) {
          (this.isSVGTag = Ue(e.tagName)), super.mount(e);
        }
      }
      const Eo = (e, t) =>
        H(e)
          ? new So(t, { enableHardwareAcceleration: !1 })
          : new bo(t, { enableHardwareAcceleration: !0 }),
        Mo = {
          ...$i,
          ...Mt,
          ...Za,
          ...{ layout: { ProjectionNode: Ka, MeasureLayout: Zr } },
        },
        To = B((e, t) =>
          (function (e, t, n, i) {
            let { forwardMotionProps: r = !1 } = t;
            return {
              ...(H(e) ? et : tt),
              preloadedFeatures: n,
              useRender: Oe(r),
              createVisualElement: i,
              Component: e,
            };
          })(e, t, Mo, Eo)
        );
      function wo() {
        const t = (0, e.useRef)(!1);
        return (
          p(
            () => (
              (t.current = !0),
              () => {
                t.current = !1;
              }
            ),
            []
          ),
          t
        );
      }
      class Ao extends e.Component {
        getSnapshotBeforeUpdate(e) {
          const t = this.props.childRef.current;
          if (t && e.isPresent && !this.props.isPresent) {
            const e = this.props.sizeRef.current;
            (e.height = t.offsetHeight || 0),
              (e.width = t.offsetWidth || 0),
              (e.top = t.offsetTop),
              (e.left = t.offsetLeft);
          }
          return null;
        }
        componentDidUpdate() { }
        render() {
          return this.props.children;
        }
      }
      function Ro(t) {
        let { children: n, isPresent: i } = t;
        const r = (0, e.useId)(),
          a = (0, e.useRef)(null),
          o = (0, e.useRef)({ width: 0, height: 0, top: 0, left: 0 });
        return (
          (0, e.useInsertionEffect)(() => {
            const { width: e, height: t, top: n, left: s } = o.current;
            if (i || !a.current || !e || !t) return;
            a.current.dataset.motionPopId = r;
            const l = document.createElement("style");
            return (
              document.head.appendChild(l),
              l.sheet &&
              l.sheet.insertRule(
                '\n          [data-motion-pop-id="'
                  .concat(
                    r,
                    '"] {\n            position: absolute !important;\n            width: '
                  )
                  .concat(e, "px !important;\n            height: ")
                  .concat(t, "px !important;\n            top: ")
                  .concat(n, "px !important;\n            left: ")
                  .concat(s, "px !important;\n          }\n        ")
              ),
              () => {
                document.head.removeChild(l);
              }
            );
          }, [i]),
          e.createElement(
            Ao,
            { isPresent: i, childRef: a, sizeRef: o },
            e.cloneElement(n, { ref: a })
          )
        );
      }
      const Co = (t) => {
        let {
          children: n,
          initial: i,
          isPresent: r,
          onExitComplete: a,
          custom: o,
          presenceAffectsLayout: s,
          mode: l,
        } = t;
        const c = Ge(Po),
          u = (0, e.useId)(),
          h = (0, e.useMemo)(
            () => ({
              id: u,
              initial: i,
              isPresent: r,
              custom: o,
              onExitComplete: (e) => {
                c.set(e, !0);
                for (const t of c.values()) if (!t) return;
                a && a();
              },
              register: (e) => (c.set(e, !1), () => c.delete(e)),
            }),
            s ? void 0 : [r]
          );
        return (
          (0, e.useMemo)(() => {
            c.forEach((e, t) => c.set(t, !1));
          }, [r]),
          e.useEffect(() => {
            !r && !c.size && a && a();
          }, [r]),
          "popLayout" === l && (n = e.createElement(Ro, { isPresent: r }, n)),
          e.createElement(d.Provider, { value: h }, n)
        );
      };
      function Po() {
        return new Map();
      }
      const Lo = (e) => e.key || "";
      const No = (t) => {
        let {
          children: n,
          custom: i,
          initial: r = !0,
          onExitComplete: o,
          exitBeforeEnter: s,
          presenceAffectsLayout: l = !0,
          mode: c = "sync",
        } = t;
        a(!s, "Replace exitBeforeEnter with mode='wait'");
        const u =
          (0, e.useContext)(I).forceRender ||
          (function () {
            const t = wo(),
              [n, i] = (0, e.useState)(0),
              r = (0, e.useCallback)(() => {
                t.current && i(n + 1);
              }, [n]);
            return [(0, e.useCallback)(() => Ze.postRender(r), [r]), n];
          })()[0],
          d = wo(),
          h = (function (t) {
            const n = [];
            return (
              e.Children.forEach(t, (t) => {
                (0, e.isValidElement)(t) && n.push(t);
              }),
              n
            );
          })(n);
        let f = h;
        const m = (0, e.useRef)(new Map()).current,
          g = (0, e.useRef)(f),
          v = (0, e.useRef)(new Map()).current,
          _ = (0, e.useRef)(!0);
        var y;
        if (
          (p(() => {
            (_.current = !1),
              (function (e, t) {
                e.forEach((e) => {
                  const n = Lo(e);
                  t.set(n, e);
                });
              })(h, v),
              (g.current = f);
          }),
            (y = () => {
              (_.current = !0), v.clear(), m.clear();
            }),
            (0, e.useEffect)(() => () => y(), []),
            _.current)
        )
          return e.createElement(
            e.Fragment,
            null,
            f.map((t) =>
              e.createElement(
                Co,
                {
                  key: Lo(t),
                  isPresent: !0,
                  initial: !!r && void 0,
                  presenceAffectsLayout: l,
                  mode: c,
                },
                t
              )
            )
          );
        f = [...f];
        const x = g.current.map(Lo),
          b = h.map(Lo),
          S = x.length;
        for (let e = 0; e < S; e++) {
          const t = x[e];
          -1 !== b.indexOf(t) || m.has(t) || m.set(t, void 0);
        }
        return (
          "wait" === c && m.size && (f = []),
          m.forEach((t, n) => {
            if (-1 !== b.indexOf(n)) return;
            const r = v.get(n);
            if (!r) return;
            const a = x.indexOf(n);
            let s = t;
            if (!s) {
              const t = () => {
                m.delete(n);
                const e = Array.from(v.keys()).filter((e) => !b.includes(e));
                if (
                  (e.forEach((e) => v.delete(e)),
                    (g.current = h.filter((t) => {
                      const i = Lo(t);
                      return i === n || e.includes(i);
                    })),
                    !m.size)
                ) {
                  if (!1 === d.current) return;
                  u(), o && o();
                }
              };
              (s = e.createElement(
                Co,
                {
                  key: Lo(r),
                  isPresent: !1,
                  onExitComplete: t,
                  custom: i,
                  presenceAffectsLayout: l,
                  mode: c,
                },
                r
              )),
                m.set(n, s);
            }
            f.splice(a, 0, s);
          }),
          (f = f.map((t) => {
            const n = t.key;
            return m.has(n)
              ? t
              : e.createElement(
                Co,
                {
                  key: Lo(t),
                  isPresent: !0,
                  presenceAffectsLayout: l,
                  mode: c,
                },
                t
              );
          })),
          e.createElement(
            e.Fragment,
            null,
            m.size ? f : f.map((t) => (0, e.cloneElement)(t))
          )
        );
      };
      var Do = n(579);
      const Uo = (t) => {
        let {
          text: n,
          typingAnimation: i,
          delayOffset: r,
          loadingComplete: a,
        } = t;
        const o = (0, e.useRef)(null),
          s = l(o, { once: !0 }),
          c = { duration: 0.2, ease: [0.075, 0.82, 0.165, 1] },
          u = { initial: { scaleY: 0 }, animate: { scaleY: s && a ? 1 : 0 } },
          d = Array.from(n);
        return (0, Do.jsxs)(To.p, {
          ref: o,
          className: "absolute note",
          ...u,
          style: { transformOrigin: "top" },
          transition: { delay: r },
          children: [
            (0, Do.jsx)(To.span, {
              className: "plus absolute inline-block",
              ...u,
              transition: { ...c, delay: r + 0.25 },
              children: "+",
            }),
            (0, Do.jsx)(To.span, {
              className: "green-line inline-block absolute",
              ...u,
              transition: { ...c, delay: r + 0.5 },
              style: { transformOrigin: "top" },
            }),
            i &&
            (0, Do.jsx)(No, {
              children:
                a &&
                s &&
                (0, Do.jsx)("span", {
                  className: "inner-text inline-block",
                  children: d.map((e, t) =>
                    (0, Do.jsx)(
                      To.span,
                      {
                        initial: { opacity: 0, y: -10 },
                        animate: { opacity: 1, y: 0 },
                        transition: {
                          duration: 0.001,
                          ease: "easeOut",
                          delay: r + 0.75 + 0.01 * t,
                        },
                        children: e,
                      },
                      t
                    )
                  ),
                }),
            }),
            !i &&
            (0, Do.jsx)(To.span, {
              className: "inner-text inline-block",
              initial: { x: -30, opacity: 0 },
              animate: a && s ? { x: 0, opacity: 1 } : {},
              exit: { x: 100, opacity: 0 },
              transition: { ...c, delay: r + 0.75 },
              children: n,
            }),
          ],
        });
      },
        Io = (0, e.createContext)({
          isGunCursor: !1,
          enableGunCursor: () => { },
          disableGunCursor: () => { },
          isPointerCursor: !1,
          enablePointerCursor: () => { },
          disablePointerCursor: () => { },
          showCursor: !0,
          enableCursor: () => { },
          disableCursor: () => { },
          showDrag: !1,
          enableDrag: () => { },
          disableDrag: () => { },
          showGo: !1,
          enableGo: () => { },
          disableGo: () => { },
          showEmail: !1,
          enableEmail: () => { },
          disableEmail: () => { },
          showJump: !1,
          enableJump: () => { },
          disableJump: () => { },
        }),
        Oo = (t) => {
          let { children: n } = t;
          const [i, r] = (0, e.useState)(!1),
            [a, o] = (0, e.useState)(!1),
            [s, l] = (0, e.useState)(!1),
            [c, u] = (0, e.useState)(!1),
            [d, h] = (0, e.useState)(!1),
            [p, f] = (0, e.useState)(!1),
            [m, g] = (0, e.useState)(!1);
          return (0, Do.jsx)(Io.Provider, {
            value: {
              isGunCursor: i,
              enableGunCursor: () => r(!0),
              disableGunCursor: () => r(!1),
              isPointerCursor: a,
              enablePointerCursor: () => o(!0),
              disablePointerCursor: () => o(!1),
              showCursor: s,
              enableCursor: () => l(!0),
              disableCursor: () => l(!1),
              showDrag: c,
              enableDrag: () => u(!0),
              disableDrag: () => u(!1),
              showGo: d,
              enableGo: () => h(!0),
              disableGo: () => h(!1),
              showEmail: p,
              enableEmail: () => f(!0),
              disableEmail: () => f(!1),
              showJump: m,
              enableJump: () => g(!0),
              disableJump: () => g(!1),
            },
            children: n,
          });
        },
        ko = () => (0, e.useContext)(Io),
        Fo = (e) => {
          let { url: t, text: n, isCTA: i } = e;
          const {
            enablePointerCursor: r,
            disablePointerCursor: a,
            enableGo: o,
            disableGo: s,
            enableEmail: l,
            disableEmail: c,
          } = ko();
          return i
            ? (0, Do.jsxs)("a", {
              href: "mailto:aryamaulana1230@gmail.com",
              className: "email inline-block relative overflow-hidden",
              onMouseEnter: () => {
                r(), l();
              },
              onMouseLeave: () => {
                a(), c();
              },
              children: [
                (0, Do.jsx)("span", {
                  className: "plus absolute",
                  children: "+",
                }),
                (0, Do.jsxs)("span", {
                  className: "link-text inline-block",
                  children: [
                    "AryaMaulana",
                    (0, Do.jsx)("br", {}),
                    (0, Do.jsx)("span", {
                      className: "second-line relative",
                      children: "aryamaulana1230@gmail.com",
                    }),
                  ],
                }),
              ],
            })
            : (0, Do.jsxs)("a", {
              href: t,
              onMouseEnter: () => {
                r(), o();
              },
              onMouseLeave: () => {
                a(), s();
              },
              target: "_blank",
              rel: "noreferrer",
              className: "inline-block relative",
              children: [
                (0, Do.jsx)("span", {
                  className: "plus absolute",
                  children: "+",
                }),
                (0, Do.jsx)("span", {
                  className: "border-bottom absolute w-full",
                }),
                (0, Do.jsx)("span", {
                  className: "link-text inline-block",
                  children: n,
                }),
              ],
            });
        },
        // Selected Works
        zo = () => {
          const [t, n] = (0, e.useState)(!1),
            [i, r] = (0, e.useState)(!1),
            [a, o] = (0, e.useState)(!1),
            [s, l] = (0, e.useState)(!1),
            [c, u] = (0, e.useState)(!1),
            d = window.innerWidth < 801,
            h = window.innerWidth < 501;
          return (0, Do.jsx)("div", {
            id: "selected-works",
            className: "uppercase",
            children: (0, Do.jsxs)("div", {
              className: "container",
              children: [
                (0, Do.jsx)("p", {
                  id: "title",
                  className: "text-right",
                  children: "+ Selected works",
                }),
                (0, Do.jsxs)("div", {
                  id: "works-grid",
                  children: [
                    (0, Do.jsxs)("div", {
                      id: "s1t-row",
                      className: "grid",
                      onMouseEnter: () => n(!0),
                      onMouseLeave: () => n(!1),
                      children: [
                        (0, Do.jsxs)("div", {
                          className: "left",
                          children: [
                            (0, Do.jsx)("p", { children: "(Judul)" }),
                            (0, Do.jsx)("h1", { children: "01" }),
                          ],
                        }),
                        (0, Do.jsx)("div", {
                          className: "mid",
                          children: (0, Do.jsxs)("div", {
                            id: "s1t",
                            className:
                              "image-container relative overflow-hidden",
                            children: [
                              !h &&
                              (0, Do.jsxs)("video", {
                                className: "absolute top-0 left-0",
                                autoPlay: !0,
                                muted: !0,
                                loop: !0,
                                children: [
                                  // (0, Do.jsx)("source", {
                                   // src: "#",
                                  //  type: "video/mp4",
                                 // }),
                                 "Your browser does not support the video tag.",
                                ],
                              }),
                              (0, Do.jsx)("img", {
                                src: "https://raw.githubusercontent.com/VoyagerXyroo/aryaPortofolio/main/poject1.png",
                                alt: "",
                                className: "absolute top-0 left-0 w-full",
                              }),
                            ],
                          }),
                        }),
                        (0, Do.jsxs)("div", {
                          className: "right",
                          children: [
                            (0, Do.jsx)("p", {
                              className: "mb-2vw",
                              children: "Year",
                            }),
                            (0, Do.jsx)("h3", { children: "2024" }),
                            (0, Do.jsx)("p", {
                              className: "mb-2vw",
                              children: "Role",
                            }),
                            (0, Do.jsx)("h3", {
                              children: "Full-Stack Developer",
                            }),
                            (0, Do.jsx)("p", { children: "Technologies" }),
                            (0, Do.jsxs)("div", {
                              className: "flex",
                              children: [
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "JavaScript",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "CSS",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "HTML",
                                }),
                              ],
                            }),
                            (0, Do.jsxs)("p", {
                              className: "description flex",
                              children: [
                                (0, Do.jsx)(To.span, {
                                  transition: {
                                    duration: 0.2,
                                    ease: [0.075, 0.82, 0.165, 1],
                                    delay: 0.2,
                                  },
                                  initial: { scaleY: 0 },
                                  animate: !d && t ? { scaleY: 1 } : {},
                                  className: "plus inline-block self-start",
                                  children: "+",
                                }),
                                (0, Do.jsx)(To.span, {
                                  transition: {
                                    duration: 0.2,
                                    ease: [0.075, 0.82, 0.165, 1],
                                    delay: 0.4,
                                  },
                                  initial: { x: -10, opacity: 0 },
                                  animate: !d && t ? { x: 0, opacity: 1 } : {},
                                  className: "inline-block",
                                  children:
                                    "Saya Membuat Website Ini Untuk Dijadikan salah satu contoh projek saya!",
                                }),
                              ],
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, Do.jsxs)("div", {
                      className: "grid",
                      onMouseEnter: () => r(!0),
                      onMouseLeave: () => r(!1),
                      children: [
                        (0, Do.jsxs)("div", {
                          className: "left",
                          children: [
                            (0, Do.jsx)("p", {
                              children: "(Judul)",
                            }),
                            (0, Do.jsx)("h1", { children: "02" }),
                            (0, Do.jsx)(Fo, {
                              url: "#",
                              text: "Visit site",
                              isCTA: !1,
                            }),
                          ],
                        }),
                        (0, Do.jsx)("div", {
                          className: "mid",
                          children: (0, Do.jsx)("div", {
                            id: "history",
                            className:
                              "image-container relative overflow-hidden",
                            children: (0, Do.jsx)("img", {
                              src: "https://raw.githubusercontent.com/VoyagerXyroo/avenna/main/coming%20soon.jpg",
                              alt: "",
                              className: "absolute top-0 left-0 w-full",
                            }),
                          }),
                        }),
                        (0, Do.jsxs)("div", {
                          className: "right",
                          children: [
                            (0, Do.jsx)("p", {
                              className: "mb-2vw",
                              children: "Year",
                            }),
                            (0, Do.jsx)("h3", { children: "(Year)" }),
                            (0, Do.jsx)("p", {
                              className: "mb-2vw",
                              children: "Role",
                            }),
                            (0, Do.jsx)("h3", {
                              children: "(Role)",
                            }),
                            (0, Do.jsx)("p", { children: "Technologies" }),
                            (0, Do.jsxs)("div", {
                              className: "flex",
                              children: [
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "Javascript",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "Photoshop",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "ScrollMagic",
                                }),
                              ],
                            }),
                            (0, Do.jsxs)("p", {
                              className: "description flex",
                              children: [
                                (0, Do.jsx)(To.span, {
                                  transition: {
                                    duration: 0.2,
                                    ease: [0.075, 0.82, 0.165, 1],
                                    delay: 0.2,
                                  },
                                  initial: { scaleY: 0 },
                                  animate: !d && i ? { scaleY: 1 } : {},
                                  className: "plus inline-block self-start",
                                  children: "+",
                                }),
                                (0, Do.jsx)(To.span, {
                                  transition: {
                                    duration: 0.5,
                                    ease: [0.075, 0.82, 0.165, 1],
                                    delay: 0.4,
                                  },
                                  initial: { x: -10, opacity: 0 },
                                  animate: !d && i ? { x: 0, opacity: 1 } : {},
                                  className: "inline-block",
                                  children:
                                    "Lorem ipsum dolor sit amet jamet.",
                                }),
                              ],
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, Do.jsxs)("div", {
                      id: "dev-center-row",
                      className: "grid",
                      onMouseEnter: () => o(!0),
                      onMouseLeave: () => o(!1),
                      children: [
                        (0, Do.jsxs)("div", {
                          className: "left",
                          children: [
                            (0, Do.jsx)("p", {
                              children: "(Judul)",
                            }),
                            (0, Do.jsx)("h1", { children: "03" }),
                          ],
                        }),
                        (0, Do.jsx)("div", {
                          className: "mid",
                          children: (0, Do.jsxs)("div", {
                            id: "devcenter",
                            className:
                              "image-container relative overflow-hidden",
                            children: [
                              !h &&
                              (0, Do.jsxs)("video", {
                                className: "absolute top-0 left-0",
                                autoPlay: !0,
                                muted: !0,
                                loop: !0,
                                children: [
                                  (0, Do.jsx)("source", {
                                    src: "#",
                                    type: "video/mp4",
                                  }),
                                  "Your browser does not support the video tag.",
                                ],
                              }),
                              (0, Do.jsx)("img", {
                                src: "https://raw.githubusercontent.com/VoyagerXyroo/avenna/main/coming%20soon.jpg",
                                alt: "",
                                className: "absolute top-0 left-0 w-full",
                              }),
                            ],
                          }),
                        }),
                        (0, Do.jsxs)("div", {
                          className: "right",
                          children: [
                            (0, Do.jsx)("p", {
                              className: "mb-2vw",
                              children: "Year",
                            }),
                            (0, Do.jsx)("h3", { children: "(Year)" }),
                            (0, Do.jsx)("p", {
                              className: "mb-2vw",
                              children: "Role",
                            }),
                            (0, Do.jsx)("h3", {
                              children: "(Role)",
                            }),
                            (0, Do.jsx)("p", { children: "Technologies" }),
                            (0, Do.jsxs)("div", {
                              className: "flex",
                              children: [
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "Hugo",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "Javascript",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "CSS/SCSS",
                                }),
                              ],
                            }),
                            (0, Do.jsxs)("p", {
                              className: "description flex",
                              children: [
                                (0, Do.jsx)(To.span, {
                                  transition: {
                                    duration: 0.2,
                                    ease: [0.075, 0.82, 0.165, 1],
                                    delay: 0.2,
                                  },
                                  initial: { scaleY: 0 },
                                  animate: !d && a ? { scaleY: 1 } : {},
                                  className: "plus inline-block self-start",
                                  children: "+",
                                }),
                                (0, Do.jsx)(To.span, {
                                  transition: {
                                    duration: 0.5,
                                    ease: [0.075, 0.82, 0.165, 1],
                                    delay: 0.4,
                                  },
                                  initial: { x: -10, opacity: 0 },
                                  animate: !d && a ? { x: 0, opacity: 1 } : {},
                                  className: "inline-block",
                                  children:
                                    "Lorem ipsum dolor sit amet.",
                                }),
                              ],
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, Do.jsxs)("div", {
                      className: "grid",
                      onMouseEnter: () => l(!0),
                      onMouseLeave: () => l(!1),
                      children: [
                        (0, Do.jsxs)("div", {
                          className: "left",
                          children: [
                            (0, Do.jsx)("p", { children: "(Judul)" }),
                            (0, Do.jsx)("h1", { children: "04" }),
                            (0, Do.jsx)(Fo, {
                              url: "#",
                              text: "Visit site",
                              isCTA: !1,
                            }),
                          ],
                        }),
                        (0, Do.jsx)("div", {
                          className: "mid",
                          children: (0, Do.jsx)("div", {
                            id: "spring",
                            className:
                              "image-container relative overflow-hidden",
                            children: (0, Do.jsx)("img", {
                              src: "https://raw.githubusercontent.com/VoyagerXyroo/avenna/main/coming%20soon.jpg",
                              alt: "",
                              className: "absolute top-0 left-0 w-full",
                            }),
                          }),
                        }),
                        (0, Do.jsxs)("div", {
                          className: "right",
                          children: [
                            (0, Do.jsx)("p", {
                              className: "mb-2vw",
                              children: "Year",
                            }),
                            (0, Do.jsx)("h3", { children: "(Year)" }),
                            (0, Do.jsx)("p", {
                              className: "mb-2vw",
                              children: "Role",
                            }),
                            (0, Do.jsx)("h3", {
                              children: "(Role)",
                            }),
                            (0, Do.jsx)("p", { children: "Technologies" }),
                            (0, Do.jsxs)("div", {
                              className: "flex",
                              children: [
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "Javascript",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "CSS/SCSS",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "HTML",
                                }),
                              ],
                            }),
                            (0, Do.jsxs)("p", {
                              className: "description flex",
                              children: [
                                (0, Do.jsx)(To.span, {
                                  transition: {
                                    duration: 0.2,
                                    ease: [0.075, 0.82, 0.165, 1],
                                    delay: 0.2,
                                  },
                                  initial: { scaleY: 0 },
                                  animate: !d && s ? { scaleY: 1 } : {},
                                  className: "plus inline-block self-start",
                                  children: "+",
                                }),
                                (0, Do.jsx)(To.span, {
                                  transition: {
                                    duration: 0.5,
                                    ease: [0.075, 0.82, 0.165, 1],
                                    delay: 0.4,
                                  },
                                  initial: { x: -10, opacity: 0 },
                                  animate: !d && s ? { x: 0, opacity: 1 } : {},
                                  className: "inline-block",
                                  children:
                                    "Lorem Ipsum dolor sir amet",
                                }),
                              ],
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, Do.jsxs)("div", {
                      className: "grid",
                      onMouseEnter: () => u(!0),
                      onMouseLeave: () => u(!1),
                      children: [
                        (0, Do.jsxs)("div", {
                          className: "left",
                          children: [
                            (0, Do.jsx)("p", {
                              children: "(judul)",
                            }),
                            (0, Do.jsx)("h1", { children: "05" }),
                            (0, Do.jsx)(Fo, {
                              url: "#",
                              text: "Visit site",
                              isCTA: !1,
                            }),
                          ],
                        }),
                        (0, Do.jsx)("div", {
                          className: "mid",
                          children: (0, Do.jsxs)("div", {
                            id: "pokemon",
                            className:
                              "image-container relative overflow-hidden",
                            children: [
                              (0, Do.jsx)("div", {
                                className:
                                  "moving-background absolute top-0 left-0 w-full",
                              }),
                              (0, Do.jsx)("img", {
                                src: "https://raw.githubusercontent.com/VoyagerXyroo/avenna/main/coming%20soon.jpg",
                                alt: "",
                                className: "absolute top-0 left-0 w-full",
                              }),
                            ],
                          }),
                        }),
                        (0, Do.jsxs)("div", {
                          className: "right",
                          children: [
                            (0, Do.jsx)("p", {
                              className: "mb-2vw",
                              children: "Year",
                            }),
                            (0, Do.jsx)("h3", { children: "(Year)" }),
                            (0, Do.jsx)("p", {
                              className: "mb-2vw",
                              children: "Role",
                            }),
                            (0, Do.jsx)("h3", {
                              children: "(Role)",
                            }),
                            (0, Do.jsx)("p", { children: "Technologies" }),
                            (0, Do.jsxs)("div", {
                              className: "flex",
                              children: [
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "React",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "Framer",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "Tailwind",
                                }),
                                (0, Do.jsx)("h4", {
                                  className: "pill",
                                  children: "API",
                                }),
                              ],
                            }),
                            (0, Do.jsxs)("p", {
                              className: "description flex",
                              children: [
                                (0, Do.jsx)(To.span, {
                                  transition: {
                                    duration: 0.2,
                                    ease: [0.075, 0.82, 0.165, 1],
                                    delay: 0.2,
                                  },
                                  initial: { scaleY: 0 },
                                  animate: !d && c ? { scaleY: 1 } : {},
                                  className: "plus inline-block self-start",
                                  children: "+",
                                }),
                                (0, Do.jsx)(To.span, {
                                  transition: {
                                    duration: 0.5,
                                    ease: [0.075, 0.82, 0.165, 1],
                                    delay: 0.4,
                                  },
                                  initial: { x: -10, opacity: 0 },
                                  animate: !d && c ? { x: 0, opacity: 1 } : {},
                                  className: "inline-block",
                                  children:
                                    "Lorem ipsum dolor sit amet.",
                                }),
                              ],
                            }),
                          ],
                        }),
                      ],
                    }),
                  ],
                }),
              ],
            }),
          });
        },
// Selected Work End

        Bo = "162",
        Vo = 1,
        Ho = 2,
        Go = 3,
        Wo = 0,
        jo = 1,
        Xo = 100,
        Yo = 0,
        qo = 1,
        Ko = 2,
        Zo = 0,
        Jo = 1,
        Qo = 2,
        $o = 3,
        es = 4,
        ts = 5,
        ns = 6,
        is = 7,
        rs = 301,
        as = 302,
        os = 303,
        ss = 304,
        ls = 306,
        cs = 1e3,
        us = 1001,
        ds = 1002,
        hs = 1003,
        ps = 1004,
        fs = 1005,
        ms = 1006,
        gs = 1007,
        vs = 1008,
        _s = 1009,
        ys = 1012,
        xs = 1013,
        bs = 1014,
        Ss = 1015,
        Es = 1016,
        Ms = 1020,
        Ts = 1023,
        ws = 1026,
        As = 1027,
        Rs = 33776,
        Cs = 33777,
        Ps = 33778,
        Ls = 33779,
        Ns = 36492,
        Ds = 2300,
        Us = 2301,
        Is = 2302,
        Os = 2400,
        ks = 2401,
        Fs = 2402,
        zs = "",
        Bs = "srgb",
        Vs = "srgb-linear",
        Hs = "display-p3",
        Gs = "display-p3-linear",
        Ws = "linear",
        js = "srgb",
        Xs = "rec709",
        Ys = "p3",
        qs = 7680,
        Ks = 35044,
        Zs = "300 es",
        Js = 1035,
        Qs = 2e3,
        $s = 2001;
      class el {
        addEventListener(e, t) {
          void 0 === this._listeners && (this._listeners = {});
          const n = this._listeners;
          void 0 === n[e] && (n[e] = []),
            -1 === n[e].indexOf(t) && n[e].push(t);
        }
        hasEventListener(e, t) {
          if (void 0 === this._listeners) return !1;
          const n = this._listeners;
          return void 0 !== n[e] && -1 !== n[e].indexOf(t);
        }
        removeEventListener(e, t) {
          if (void 0 === this._listeners) return;
          const n = this._listeners[e];
          if (void 0 !== n) {
            const e = n.indexOf(t);
            -1 !== e && n.splice(e, 1);
          }
        }
        dispatchEvent(e) {
          if (void 0 === this._listeners) return;
          const t = this._listeners[e.type];
          if (void 0 !== t) {
            e.target = this;
            const n = t.slice(0);
            for (let t = 0, i = n.length; t < i; t++) n[t].call(this, e);
            e.target = null;
          }
        }
      }
      const tl = [
        "00",
        "01",
        "02",
        "03",
        "04",
        "05",
        "06",
        "07",
        "08",
        "09",
        "0a",
        "0b",
        "0c",
        "0d",
        "0e",
        "0f",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "1a",
        "1b",
        "1c",
        "1d",
        "1e",
        "1f",
        "20",
        "21",
        "22",
        "23",
        "24",
        "25",
        "26",
        "27",
        "28",
        "29",
        "2a",
        "2b",
        "2c",
        "2d",
        "2e",
        "2f",
        "30",
        "31",
        "32",
        "33",
        "34",
        "35",
        "36",
        "37",
        "38",
        "39",
        "3a",
        "3b",
        "3c",
        "3d",
        "3e",
        "3f",
        "40",
        "41",
        "42",
        "43",
        "44",
        "45",
        "46",
        "47",
        "48",
        "49",
        "4a",
        "4b",
        "4c",
        "4d",
        "4e",
        "4f",
        "50",
        "51",
        "52",
        "53",
        "54",
        "55",
        "56",
        "57",
        "58",
        "59",
        "5a",
        "5b",
        "5c",
        "5d",
        "5e",
        "5f",
        "60",
        "61",
        "62",
        "63",
        "64",
        "65",
        "66",
        "67",
        "68",
        "69",
        "6a",
        "6b",
        "6c",
        "6d",
        "6e",
        "6f",
        "70",
        "71",
        "72",
        "73",
        "74",
        "75",
        "76",
        "77",
        "78",
        "79",
        "7a",
        "7b",
        "7c",
        "7d",
        "7e",
        "7f",
        "80",
        "81",
        "82",
        "83",
        "84",
        "85",
        "86",
        "87",
        "88",
        "89",
        "8a",
        "8b",
        "8c",
        "8d",
        "8e",
        "8f",
        "90",
        "91",
        "92",
        "93",
        "94",
        "95",
        "96",
        "97",
        "98",
        "99",
        "9a",
        "9b",
        "9c",
        "9d",
        "9e",
        "9f",
        "a0",
        "a1",
        "a2",
        "a3",
        "a4",
        "a5",
        "a6",
        "a7",
        "a8",
        "a9",
        "aa",
        "ab",
        "ac",
        "ad",
        "ae",
        "af",
        "b0",
        "b1",
        "b2",
        "b3",
        "b4",
        "b5",
        "b6",
        "b7",
        "b8",
        "b9",
        "ba",
        "bb",
        "bc",
        "bd",
        "be",
        "bf",
        "c0",
        "c1",
        "c2",
        "c3",
        "c4",
        "c5",
        "c6",
        "c7",
        "c8",
        "c9",
        "ca",
        "cb",
        "cc",
        "cd",
        "ce",
        "cf",
        "d0",
        "d1",
        "d2",
        "d3",
        "d4",
        "d5",
        "d6",
        "d7",
        "d8",
        "d9",
        "da",
        "db",
        "dc",
        "dd",
        "de",
        "df",
        "e0",
        "e1",
        "e2",
        "e3",
        "e4",
        "e5",
        "e6",
        "e7",
        "e8",
        "e9",
        "ea",
        "eb",
        "ec",
        "ed",
        "ee",
        "ef",
        "f0",
        "f1",
        "f2",
        "f3",
        "f4",
        "f5",
        "f6",
        "f7",
        "f8",
        "f9",
        "fa",
        "fb",
        "fc",
        "fd",
        "fe",
        "ff",
      ];
      const nl = Math.PI / 180,
        il = 180 / Math.PI;
      function rl() {
        const e = (4294967295 * Math.random()) | 0,
          t = (4294967295 * Math.random()) | 0,
          n = (4294967295 * Math.random()) | 0,
          i = (4294967295 * Math.random()) | 0;
        return (
          tl[255 & e] +
          tl[(e >> 8) & 255] +
          tl[(e >> 16) & 255] +
          tl[(e >> 24) & 255] +
          "-" +
          tl[255 & t] +
          tl[(t >> 8) & 255] +
          "-" +
          tl[((t >> 16) & 15) | 64] +
          tl[(t >> 24) & 255] +
          "-" +
          tl[(63 & n) | 128] +
          tl[(n >> 8) & 255] +
          "-" +
          tl[(n >> 16) & 255] +
          tl[(n >> 24) & 255] +
          tl[255 & i] +
          tl[(i >> 8) & 255] +
          tl[(i >> 16) & 255] +
          tl[(i >> 24) & 255]
        ).toLowerCase();
      }
      function al(e, t, n) {
        return Math.max(t, Math.min(n, e));
      }
      function ol(e, t) {
        return ((e % t) + t) % t;
      }
      function sl(e, t, n) {
        return (1 - n) * e + n * t;
      }
      function ll(e) {
        return 0 === (e & (e - 1)) && 0 !== e;
      }
      function cl(e) {
        return Math.pow(2, Math.floor(Math.log(e) / Math.LN2));
      }
      function ul(e, t) {
        switch (t.constructor) {
          case Float32Array:
            return e;
          case Uint32Array:
            return e / 4294967295;
          case Uint16Array:
            return e / 65535;
          case Uint8Array:
            return e / 255;
          case Int32Array:
            return Math.max(e / 2147483647, -1);
          case Int16Array:
            return Math.max(e / 32767, -1);
          case Int8Array:
            return Math.max(e / 127, -1);
          default:
            throw new Error("Invalid component type.");
        }
      }
      function dl(e, t) {
        switch (t.constructor) {
          case Float32Array:
            return e;
          case Uint32Array:
            return Math.round(4294967295 * e);
          case Uint16Array:
            return Math.round(65535 * e);
          case Uint8Array:
            return Math.round(255 * e);
          case Int32Array:
            return Math.round(2147483647 * e);
          case Int16Array:
            return Math.round(32767 * e);
          case Int8Array:
            return Math.round(127 * e);
          default:
            throw new Error("Invalid component type.");
        }
      }
      class hl {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 0,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
          (hl.prototype.isVector2 = !0), (this.x = e), (this.y = t);
        }
        get width() {
          return this.x;
        }
        set width(e) {
          this.x = e;
        }
        get height() {
          return this.y;
        }
        set height(e) {
          this.y = e;
        }
        set(e, t) {
          return (this.x = e), (this.y = t), this;
        }
        setScalar(e) {
          return (this.x = e), (this.y = e), this;
        }
        setX(e) {
          return (this.x = e), this;
        }
        setY(e) {
          return (this.y = e), this;
        }
        setComponent(e, t) {
          switch (e) {
            case 0:
              this.x = t;
              break;
            case 1:
              this.y = t;
              break;
            default:
              throw new Error("index is out of range: " + e);
          }
          return this;
        }
        getComponent(e) {
          switch (e) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            default:
              throw new Error("index is out of range: " + e);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y);
        }
        copy(e) {
          return (this.x = e.x), (this.y = e.y), this;
        }
        add(e) {
          return (this.x += e.x), (this.y += e.y), this;
        }
        addScalar(e) {
          return (this.x += e), (this.y += e), this;
        }
        addVectors(e, t) {
          return (this.x = e.x + t.x), (this.y = e.y + t.y), this;
        }
        addScaledVector(e, t) {
          return (this.x += e.x * t), (this.y += e.y * t), this;
        }
        sub(e) {
          return (this.x -= e.x), (this.y -= e.y), this;
        }
        subScalar(e) {
          return (this.x -= e), (this.y -= e), this;
        }
        subVectors(e, t) {
          return (this.x = e.x - t.x), (this.y = e.y - t.y), this;
        }
        multiply(e) {
          return (this.x *= e.x), (this.y *= e.y), this;
        }
        multiplyScalar(e) {
          return (this.x *= e), (this.y *= e), this;
        }
        divide(e) {
          return (this.x /= e.x), (this.y /= e.y), this;
        }
        divideScalar(e) {
          return this.multiplyScalar(1 / e);
        }
        applyMatrix3(e) {
          const t = this.x,
            n = this.y,
            i = e.elements;
          return (
            (this.x = i[0] * t + i[3] * n + i[6]),
            (this.y = i[1] * t + i[4] * n + i[7]),
            this
          );
        }
        min(e) {
          return (
            (this.x = Math.min(this.x, e.x)),
            (this.y = Math.min(this.y, e.y)),
            this
          );
        }
        max(e) {
          return (
            (this.x = Math.max(this.x, e.x)),
            (this.y = Math.max(this.y, e.y)),
            this
          );
        }
        clamp(e, t) {
          return (
            (this.x = Math.max(e.x, Math.min(t.x, this.x))),
            (this.y = Math.max(e.y, Math.min(t.y, this.y))),
            this
          );
        }
        clampScalar(e, t) {
          return (
            (this.x = Math.max(e, Math.min(t, this.x))),
            (this.y = Math.max(e, Math.min(t, this.y))),
            this
          );
        }
        clampLength(e, t) {
          const n = this.length();
          return this.divideScalar(n || 1).multiplyScalar(
            Math.max(e, Math.min(t, n))
          );
        }
        floor() {
          return (
            (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), this
          );
        }
        ceil() {
          return (
            (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), this
          );
        }
        round() {
          return (
            (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), this
          );
        }
        roundToZero() {
          return (
            (this.x = Math.trunc(this.x)), (this.y = Math.trunc(this.y)), this
          );
        }
        negate() {
          return (this.x = -this.x), (this.y = -this.y), this;
        }
        dot(e) {
          return this.x * e.x + this.y * e.y;
        }
        cross(e) {
          return this.x * e.y - this.y * e.x;
        }
        lengthSq() {
          return this.x * this.x + this.y * this.y;
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        }
        manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y);
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        angle() {
          return Math.atan2(-this.y, -this.x) + Math.PI;
        }
        angleTo(e) {
          const t = Math.sqrt(this.lengthSq() * e.lengthSq());
          if (0 === t) return Math.PI / 2;
          const n = this.dot(e) / t;
          return Math.acos(al(n, -1, 1));
        }
        distanceTo(e) {
          return Math.sqrt(this.distanceToSquared(e));
        }
        distanceToSquared(e) {
          const t = this.x - e.x,
            n = this.y - e.y;
          return t * t + n * n;
        }
        manhattanDistanceTo(e) {
          return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
        }
        setLength(e) {
          return this.normalize().multiplyScalar(e);
        }
        lerp(e, t) {
          return (
            (this.x += (e.x - this.x) * t), (this.y += (e.y - this.y) * t), this
          );
        }
        lerpVectors(e, t, n) {
          return (
            (this.x = e.x + (t.x - e.x) * n),
            (this.y = e.y + (t.y - e.y) * n),
            this
          );
        }
        equals(e) {
          return e.x === this.x && e.y === this.y;
        }
        fromArray(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          return (this.x = e[t]), (this.y = e[t + 1]), this;
        }
        toArray() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : [],
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
          return (e[t] = this.x), (e[t + 1] = this.y), e;
        }
        fromBufferAttribute(e, t) {
          return (this.x = e.getX(t)), (this.y = e.getY(t)), this;
        }
        rotateAround(e, t) {
          const n = Math.cos(t),
            i = Math.sin(t),
            r = this.x - e.x,
            a = this.y - e.y;
          return (
            (this.x = r * n - a * i + e.x), (this.y = r * i + a * n + e.y), this
          );
        }
        random() {
          return (this.x = Math.random()), (this.y = Math.random()), this;
        }
        *[Symbol.iterator]() {
          yield this.x, yield this.y;
        }
      }
      class pl {
        constructor(e, t, n, i, r, a, o, s, l) {
          (pl.prototype.isMatrix3 = !0),
            (this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]),
            void 0 !== e && this.set(e, t, n, i, r, a, o, s, l);
        }
        set(e, t, n, i, r, a, o, s, l) {
          const c = this.elements;
          return (
            (c[0] = e),
            (c[1] = i),
            (c[2] = o),
            (c[3] = t),
            (c[4] = r),
            (c[5] = s),
            (c[6] = n),
            (c[7] = a),
            (c[8] = l),
            this
          );
        }
        identity() {
          return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
        }
        copy(e) {
          const t = this.elements,
            n = e.elements;
          return (
            (t[0] = n[0]),
            (t[1] = n[1]),
            (t[2] = n[2]),
            (t[3] = n[3]),
            (t[4] = n[4]),
            (t[5] = n[5]),
            (t[6] = n[6]),
            (t[7] = n[7]),
            (t[8] = n[8]),
            this
          );
        }
        extractBasis(e, t, n) {
          return (
            e.setFromMatrix3Column(this, 0),
            t.setFromMatrix3Column(this, 1),
            n.setFromMatrix3Column(this, 2),
            this
          );
        }
        setFromMatrix4(e) {
          const t = e.elements;
          return (
            this.set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]),
            this
          );
        }
        multiply(e) {
          return this.multiplyMatrices(this, e);
        }
        premultiply(e) {
          return this.multiplyMatrices(e, this);
        }
        multiplyMatrices(e, t) {
          const n = e.elements,
            i = t.elements,
            r = this.elements,
            a = n[0],
            o = n[3],
            s = n[6],
            l = n[1],
            c = n[4],
            u = n[7],
            d = n[2],
            h = n[5],
            p = n[8],
            f = i[0],
            m = i[3],
            g = i[6],
            v = i[1],
            _ = i[4],
            y = i[7],
            x = i[2],
            b = i[5],
            S = i[8];
          return (
            (r[0] = a * f + o * v + s * x),
            (r[3] = a * m + o * _ + s * b),
            (r[6] = a * g + o * y + s * S),
            (r[1] = l * f + c * v + u * x),
            (r[4] = l * m + c * _ + u * b),
            (r[7] = l * g + c * y + u * S),
            (r[2] = d * f + h * v + p * x),
            (r[5] = d * m + h * _ + p * b),
            (r[8] = d * g + h * y + p * S),
            this
          );
        }
        multiplyScalar(e) {
          const t = this.elements;
          return (
            (t[0] *= e),
            (t[3] *= e),
            (t[6] *= e),
            (t[1] *= e),
            (t[4] *= e),
            (t[7] *= e),
            (t[2] *= e),
            (t[5] *= e),
            (t[8] *= e),
            this
          );
        }
        determinant() {
          const e = this.elements,
            t = e[0],
            n = e[1],
            i = e[2],
            r = e[3],
            a = e[4],
            o = e[5],
            s = e[6],
            l = e[7],
            c = e[8];
          return (
            t * a * c -
            t * o * l -
            n * r * c +
            n * o * s +
            i * r * l -
            i * a * s
          );
        }
        invert() {
          const e = this.elements,
            t = e[0],
            n = e[1],
            i = e[2],
            r = e[3],
            a = e[4],
            o = e[5],
            s = e[6],
            l = e[7],
            c = e[8],
            u = c * a - o * l,
            d = o * s - c * r,
            h = l * r - a * s,
            p = t * u + n * d + i * h;
          if (0 === p) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
          const f = 1 / p;
          return (
            (e[0] = u * f),
            (e[1] = (i * l - c * n) * f),
            (e[2] = (o * n - i * a) * f),
            (e[3] = d * f),
            (e[4] = (c * t - i * s) * f),
            (e[5] = (i * r - o * t) * f),
            (e[6] = h * f),
            (e[7] = (n * s - l * t) * f),
            (e[8] = (a * t - n * r) * f),
            this
          );
        }
        transpose() {
          let e;
          const t = this.elements;
          return (
            (e = t[1]),
            (t[1] = t[3]),
            (t[3] = e),
            (e = t[2]),
            (t[2] = t[6]),
            (t[6] = e),
            (e = t[5]),
            (t[5] = t[7]),
            (t[7] = e),
            this
          );
        }
        getNormalMatrix(e) {
          return this.setFromMatrix4(e).invert().transpose();
        }
        transposeIntoArray(e) {
          const t = this.elements;
          return (
            (e[0] = t[0]),
            (e[1] = t[3]),
            (e[2] = t[6]),
            (e[3] = t[1]),
            (e[4] = t[4]),
            (e[5] = t[7]),
            (e[6] = t[2]),
            (e[7] = t[5]),
            (e[8] = t[8]),
            this
          );
        }
        setUvTransform(e, t, n, i, r, a, o) {
          const s = Math.cos(r),
            l = Math.sin(r);
          return (
            this.set(
              n * s,
              n * l,
              -n * (s * a + l * o) + a + e,
              -i * l,
              i * s,
              -i * (-l * a + s * o) + o + t,
              0,
              0,
              1
            ),
            this
          );
        }
        scale(e, t) {
          return this.premultiply(fl.makeScale(e, t)), this;
        }
        rotate(e) {
          return this.premultiply(fl.makeRotation(-e)), this;
        }
        translate(e, t) {
          return this.premultiply(fl.makeTranslation(e, t)), this;
        }
        makeTranslation(e, t) {
          return (
            e.isVector2
              ? this.set(1, 0, e.x, 0, 1, e.y, 0, 0, 1)
              : this.set(1, 0, e, 0, 1, t, 0, 0, 1),
            this
          );
        }
        makeRotation(e) {
          const t = Math.cos(e),
            n = Math.sin(e);
          return this.set(t, -n, 0, n, t, 0, 0, 0, 1), this;
        }
        makeScale(e, t) {
          return this.set(e, 0, 0, 0, t, 0, 0, 0, 1), this;
        }
        equals(e) {
          const t = this.elements,
            n = e.elements;
          for (let i = 0; i < 9; i++) if (t[i] !== n[i]) return !1;
          return !0;
        }
        fromArray(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          for (let n = 0; n < 9; n++) this.elements[n] = e[n + t];
          return this;
        }
        toArray() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : [],
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
          const n = this.elements;
          return (
            (e[t] = n[0]),
            (e[t + 1] = n[1]),
            (e[t + 2] = n[2]),
            (e[t + 3] = n[3]),
            (e[t + 4] = n[4]),
            (e[t + 5] = n[5]),
            (e[t + 6] = n[6]),
            (e[t + 7] = n[7]),
            (e[t + 8] = n[8]),
            e
          );
        }
        clone() {
          return new this.constructor().fromArray(this.elements);
        }
      }
      const fl = new pl();
      function ml(e) {
        for (let t = e.length - 1; t >= 0; --t) if (e[t] >= 65535) return !0;
        return !1;
      }
      Int8Array,
        Uint8Array,
        Uint8ClampedArray,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array;
      function gl(e) {
        return document.createElementNS("http://www.w3.org/1999/xhtml", e);
      }
      function vl() {
        const e = gl("canvas");
        return (e.style.display = "block"), e;
      }
      const _l = {};
      function yl(e) {
        e in _l || ((_l[e] = !0), console.warn(e));
      }
      const xl = new pl().set(
        0.8224621,
        0.177538,
        0,
        0.0331941,
        0.9668058,
        0,
        0.0170827,
        0.0723974,
        0.9105199
      ),
        bl = new pl().set(
          1.2249401,
          -0.2249404,
          0,
          -0.0420569,
          1.0420571,
          0,
          -0.0196376,
          -0.0786361,
          1.0982735
        ),
        Sl = {
          [Vs]: {
            transfer: Ws,
            primaries: Xs,
            toReference: (e) => e,
            fromReference: (e) => e,
          },
          [Bs]: {
            transfer: js,
            primaries: Xs,
            toReference: (e) => e.convertSRGBToLinear(),
            fromReference: (e) => e.convertLinearToSRGB(),
          },
          [Gs]: {
            transfer: Ws,
            primaries: Ys,
            toReference: (e) => e.applyMatrix3(bl),
            fromReference: (e) => e.applyMatrix3(xl),
          },
          [Hs]: {
            transfer: js,
            primaries: Ys,
            toReference: (e) => e.convertSRGBToLinear().applyMatrix3(bl),
            fromReference: (e) => e.applyMatrix3(xl).convertLinearToSRGB(),
          },
        },
        El = new Set([Vs, Gs]),
        Ml = {
          enabled: !0,
          _workingColorSpace: Vs,
          get workingColorSpace() {
            return this._workingColorSpace;
          },
          set workingColorSpace(e) {
            if (!El.has(e))
              throw new Error(
                'Unsupported working color space, "'.concat(e, '".')
              );
            this._workingColorSpace = e;
          },
          convert: function (e, t, n) {
            if (!1 === this.enabled || t === n || !t || !n) return e;
            const i = Sl[t].toReference;
            return (0, Sl[n].fromReference)(i(e));
          },
          fromWorkingColorSpace: function (e, t) {
            return this.convert(e, this._workingColorSpace, t);
          },
          toWorkingColorSpace: function (e, t) {
            return this.convert(e, t, this._workingColorSpace);
          },
          getPrimaries: function (e) {
            return Sl[e].primaries;
          },
          getTransfer: function (e) {
            return e === zs ? Ws : Sl[e].transfer;
          },
        };
      function Tl(e) {
        return e < 0.04045
          ? 0.0773993808 * e
          : Math.pow(0.9478672986 * e + 0.0521327014, 2.4);
      }
      function wl(e) {
        return e < 0.0031308 ? 12.92 * e : 1.055 * Math.pow(e, 0.41666) - 0.055;
      }
      let Al;
      class Rl {
        static getDataURL(e) {
          if (/^data:/i.test(e.src)) return e.src;
          if ("undefined" === typeof HTMLCanvasElement) return e.src;
          let t;
          if (e instanceof HTMLCanvasElement) t = e;
          else {
            void 0 === Al && (Al = gl("canvas")),
              (Al.width = e.width),
              (Al.height = e.height);
            const n = Al.getContext("2d");
            e instanceof ImageData
              ? n.putImageData(e, 0, 0)
              : n.drawImage(e, 0, 0, e.width, e.height),
              (t = Al);
          }
          return t.width > 2048 || t.height > 2048
            ? (console.warn(
              "THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",
              e
            ),
              t.toDataURL("image/jpeg", 0.6))
            : t.toDataURL("image/png");
        }
        static sRGBToLinear(e) {
          if (
            ("undefined" !== typeof HTMLImageElement &&
              e instanceof HTMLImageElement) ||
            ("undefined" !== typeof HTMLCanvasElement &&
              e instanceof HTMLCanvasElement) ||
            ("undefined" !== typeof ImageBitmap && e instanceof ImageBitmap)
          ) {
            const t = gl("canvas");
            (t.width = e.width), (t.height = e.height);
            const n = t.getContext("2d");
            n.drawImage(e, 0, 0, e.width, e.height);
            const i = n.getImageData(0, 0, e.width, e.height),
              r = i.data;
            for (let e = 0; e < r.length; e++) r[e] = 255 * Tl(r[e] / 255);
            return n.putImageData(i, 0, 0), t;
          }
          if (e.data) {
            const t = e.data.slice(0);
            for (let e = 0; e < t.length; e++)
              t instanceof Uint8Array || t instanceof Uint8ClampedArray
                ? (t[e] = Math.floor(255 * Tl(t[e] / 255)))
                : (t[e] = Tl(t[e]));
            return { data: t, width: e.width, height: e.height };
          }
          return (
            console.warn(
              "THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."
            ),
            e
          );
        }
      }
      let Cl = 0;
      class Pl {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : null;
          (this.isSource = !0),
            Object.defineProperty(this, "id", { value: Cl++ }),
            (this.uuid = rl()),
            (this.data = e),
            (this.dataReady = !0),
            (this.version = 0);
        }
        set needsUpdate(e) {
          !0 === e && this.version++;
        }
        toJSON(e) {
          const t = void 0 === e || "string" === typeof e;
          if (!t && void 0 !== e.images[this.uuid]) return e.images[this.uuid];
          const n = { uuid: this.uuid, url: "" },
            i = this.data;
          if (null !== i) {
            let e;
            if (Array.isArray(i)) {
              e = [];
              for (let t = 0, n = i.length; t < n; t++)
                i[t].isDataTexture ? e.push(Ll(i[t].image)) : e.push(Ll(i[t]));
            } else e = Ll(i);
            n.url = e;
          }
          return t || (e.images[this.uuid] = n), n;
        }
      }
      function Ll(e) {
        return ("undefined" !== typeof HTMLImageElement &&
          e instanceof HTMLImageElement) ||
          ("undefined" !== typeof HTMLCanvasElement &&
            e instanceof HTMLCanvasElement) ||
          ("undefined" !== typeof ImageBitmap && e instanceof ImageBitmap)
          ? Rl.getDataURL(e)
          : e.data
            ? {
              data: Array.from(e.data),
              width: e.width,
              height: e.height,
              type: e.data.constructor.name,
            }
            : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
      }
      let Nl = 0;
      class Dl extends el {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : Dl.DEFAULT_IMAGE,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : Dl.DEFAULT_MAPPING,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : us,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : us,
            r =
              arguments.length > 4 && void 0 !== arguments[4]
                ? arguments[4]
                : ms,
            a =
              arguments.length > 5 && void 0 !== arguments[5]
                ? arguments[5]
                : vs,
            o =
              arguments.length > 6 && void 0 !== arguments[6]
                ? arguments[6]
                : Ts,
            s =
              arguments.length > 7 && void 0 !== arguments[7]
                ? arguments[7]
                : _s,
            l =
              arguments.length > 8 && void 0 !== arguments[8]
                ? arguments[8]
                : Dl.DEFAULT_ANISOTROPY,
            c =
              arguments.length > 9 && void 0 !== arguments[9]
                ? arguments[9]
                : zs;
          super(),
            (this.isTexture = !0),
            Object.defineProperty(this, "id", { value: Nl++ }),
            (this.uuid = rl()),
            (this.name = ""),
            (this.source = new Pl(e)),
            (this.mipmaps = []),
            (this.mapping = t),
            (this.channel = 0),
            (this.wrapS = n),
            (this.wrapT = i),
            (this.magFilter = r),
            (this.minFilter = a),
            (this.anisotropy = l),
            (this.format = o),
            (this.internalFormat = null),
            (this.type = s),
            (this.offset = new hl(0, 0)),
            (this.repeat = new hl(1, 1)),
            (this.center = new hl(0, 0)),
            (this.rotation = 0),
            (this.matrixAutoUpdate = !0),
            (this.matrix = new pl()),
            (this.generateMipmaps = !0),
            (this.premultiplyAlpha = !1),
            (this.flipY = !0),
            (this.unpackAlignment = 4),
            (this.colorSpace = c),
            (this.userData = {}),
            (this.version = 0),
            (this.onUpdate = null),
            (this.isRenderTargetTexture = !1),
            (this.needsPMREMUpdate = !1);
        }
        get image() {
          return this.source.data;
        }
        set image(e) {
          void 0 === e && (e = null), (this.source.data = e);
        }
        updateMatrix() {
          this.matrix.setUvTransform(
            this.offset.x,
            this.offset.y,
            this.repeat.x,
            this.repeat.y,
            this.rotation,
            this.center.x,
            this.center.y
          );
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(e) {
          return (
            (this.name = e.name),
            (this.source = e.source),
            (this.mipmaps = e.mipmaps.slice(0)),
            (this.mapping = e.mapping),
            (this.channel = e.channel),
            (this.wrapS = e.wrapS),
            (this.wrapT = e.wrapT),
            (this.magFilter = e.magFilter),
            (this.minFilter = e.minFilter),
            (this.anisotropy = e.anisotropy),
            (this.format = e.format),
            (this.internalFormat = e.internalFormat),
            (this.type = e.type),
            this.offset.copy(e.offset),
            this.repeat.copy(e.repeat),
            this.center.copy(e.center),
            (this.rotation = e.rotation),
            (this.matrixAutoUpdate = e.matrixAutoUpdate),
            this.matrix.copy(e.matrix),
            (this.generateMipmaps = e.generateMipmaps),
            (this.premultiplyAlpha = e.premultiplyAlpha),
            (this.flipY = e.flipY),
            (this.unpackAlignment = e.unpackAlignment),
            (this.colorSpace = e.colorSpace),
            (this.userData = JSON.parse(JSON.stringify(e.userData))),
            (this.needsUpdate = !0),
            this
          );
        }
        toJSON(e) {
          const t = void 0 === e || "string" === typeof e;
          if (!t && void 0 !== e.textures[this.uuid])
            return e.textures[this.uuid];
          const n = {
            metadata: {
              version: 4.6,
              type: "Texture",
              generator: "Texture.toJSON",
            },
            uuid: this.uuid,
            name: this.name,
            image: this.source.toJSON(e).uuid,
            mapping: this.mapping,
            channel: this.channel,
            repeat: [this.repeat.x, this.repeat.y],
            offset: [this.offset.x, this.offset.y],
            center: [this.center.x, this.center.y],
            rotation: this.rotation,
            wrap: [this.wrapS, this.wrapT],
            format: this.format,
            internalFormat: this.internalFormat,
            type: this.type,
            colorSpace: this.colorSpace,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            generateMipmaps: this.generateMipmaps,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment,
          };
          return (
            Object.keys(this.userData).length > 0 &&
            (n.userData = this.userData),
            t || (e.textures[this.uuid] = n),
            n
          );
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
        transformUv(e) {
          if (300 !== this.mapping) return e;
          if ((e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1))
            switch (this.wrapS) {
              case cs:
                e.x = e.x - Math.floor(e.x);
                break;
              case us:
                e.x = e.x < 0 ? 0 : 1;
                break;
              case ds:
                1 === Math.abs(Math.floor(e.x) % 2)
                  ? (e.x = Math.ceil(e.x) - e.x)
                  : (e.x = e.x - Math.floor(e.x));
            }
          if (e.y < 0 || e.y > 1)
            switch (this.wrapT) {
              case cs:
                e.y = e.y - Math.floor(e.y);
                break;
              case us:
                e.y = e.y < 0 ? 0 : 1;
                break;
              case ds:
                1 === Math.abs(Math.floor(e.y) % 2)
                  ? (e.y = Math.ceil(e.y) - e.y)
                  : (e.y = e.y - Math.floor(e.y));
            }
          return this.flipY && (e.y = 1 - e.y), e;
        }
        set needsUpdate(e) {
          !0 === e && (this.version++, (this.source.needsUpdate = !0));
        }
      }
      (Dl.DEFAULT_IMAGE = null),
        (Dl.DEFAULT_MAPPING = 300),
        (Dl.DEFAULT_ANISOTROPY = 1);
      class Ul {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 0,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 0,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : 1;
          (Ul.prototype.isVector4 = !0),
            (this.x = e),
            (this.y = t),
            (this.z = n),
            (this.w = i);
        }
        get width() {
          return this.z;
        }
        set width(e) {
          this.z = e;
        }
        get height() {
          return this.w;
        }
        set height(e) {
          this.w = e;
        }
        set(e, t, n, i) {
          return (this.x = e), (this.y = t), (this.z = n), (this.w = i), this;
        }
        setScalar(e) {
          return (this.x = e), (this.y = e), (this.z = e), (this.w = e), this;
        }
        setX(e) {
          return (this.x = e), this;
        }
        setY(e) {
          return (this.y = e), this;
        }
        setZ(e) {
          return (this.z = e), this;
        }
        setW(e) {
          return (this.w = e), this;
        }
        setComponent(e, t) {
          switch (e) {
            case 0:
              this.x = t;
              break;
            case 1:
              this.y = t;
              break;
            case 2:
              this.z = t;
              break;
            case 3:
              this.w = t;
              break;
            default:
              throw new Error("index is out of range: " + e);
          }
          return this;
        }
        getComponent(e) {
          switch (e) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            case 3:
              return this.w;
            default:
              throw new Error("index is out of range: " + e);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y, this.z, this.w);
        }
        copy(e) {
          return (
            (this.x = e.x),
            (this.y = e.y),
            (this.z = e.z),
            (this.w = void 0 !== e.w ? e.w : 1),
            this
          );
        }
        add(e) {
          return (
            (this.x += e.x),
            (this.y += e.y),
            (this.z += e.z),
            (this.w += e.w),
            this
          );
        }
        addScalar(e) {
          return (
            (this.x += e), (this.y += e), (this.z += e), (this.w += e), this
          );
        }
        addVectors(e, t) {
          return (
            (this.x = e.x + t.x),
            (this.y = e.y + t.y),
            (this.z = e.z + t.z),
            (this.w = e.w + t.w),
            this
          );
        }
        addScaledVector(e, t) {
          return (
            (this.x += e.x * t),
            (this.y += e.y * t),
            (this.z += e.z * t),
            (this.w += e.w * t),
            this
          );
        }
        sub(e) {
          return (
            (this.x -= e.x),
            (this.y -= e.y),
            (this.z -= e.z),
            (this.w -= e.w),
            this
          );
        }
        subScalar(e) {
          return (
            (this.x -= e), (this.y -= e), (this.z -= e), (this.w -= e), this
          );
        }
        subVectors(e, t) {
          return (
            (this.x = e.x - t.x),
            (this.y = e.y - t.y),
            (this.z = e.z - t.z),
            (this.w = e.w - t.w),
            this
          );
        }
        multiply(e) {
          return (
            (this.x *= e.x),
            (this.y *= e.y),
            (this.z *= e.z),
            (this.w *= e.w),
            this
          );
        }
        multiplyScalar(e) {
          return (
            (this.x *= e), (this.y *= e), (this.z *= e), (this.w *= e), this
          );
        }
        applyMatrix4(e) {
          const t = this.x,
            n = this.y,
            i = this.z,
            r = this.w,
            a = e.elements;
          return (
            (this.x = a[0] * t + a[4] * n + a[8] * i + a[12] * r),
            (this.y = a[1] * t + a[5] * n + a[9] * i + a[13] * r),
            (this.z = a[2] * t + a[6] * n + a[10] * i + a[14] * r),
            (this.w = a[3] * t + a[7] * n + a[11] * i + a[15] * r),
            this
          );
        }
        divideScalar(e) {
          return this.multiplyScalar(1 / e);
        }
        setAxisAngleFromQuaternion(e) {
          this.w = 2 * Math.acos(e.w);
          const t = Math.sqrt(1 - e.w * e.w);
          return (
            t < 1e-4
              ? ((this.x = 1), (this.y = 0), (this.z = 0))
              : ((this.x = e.x / t), (this.y = e.y / t), (this.z = e.z / t)),
            this
          );
        }
        setAxisAngleFromRotationMatrix(e) {
          let t, n, i, r;
          const a = 0.01,
            o = 0.1,
            s = e.elements,
            l = s[0],
            c = s[4],
            u = s[8],
            d = s[1],
            h = s[5],
            p = s[9],
            f = s[2],
            m = s[6],
            g = s[10];
          if (
            Math.abs(c - d) < a &&
            Math.abs(u - f) < a &&
            Math.abs(p - m) < a
          ) {
            if (
              Math.abs(c + d) < o &&
              Math.abs(u + f) < o &&
              Math.abs(p + m) < o &&
              Math.abs(l + h + g - 3) < o
            )
              return this.set(1, 0, 0, 0), this;
            t = Math.PI;
            const e = (l + 1) / 2,
              s = (h + 1) / 2,
              v = (g + 1) / 2,
              _ = (c + d) / 4,
              y = (u + f) / 4,
              x = (p + m) / 4;
            return (
              e > s && e > v
                ? e < a
                  ? ((n = 0), (i = 0.707106781), (r = 0.707106781))
                  : ((n = Math.sqrt(e)), (i = _ / n), (r = y / n))
                : s > v
                  ? s < a
                    ? ((n = 0.707106781), (i = 0), (r = 0.707106781))
                    : ((i = Math.sqrt(s)), (n = _ / i), (r = x / i))
                  : v < a
                    ? ((n = 0.707106781), (i = 0.707106781), (r = 0))
                    : ((r = Math.sqrt(v)), (n = y / r), (i = x / r)),
              this.set(n, i, r, t),
              this
            );
          }
          let v = Math.sqrt(
            (m - p) * (m - p) + (u - f) * (u - f) + (d - c) * (d - c)
          );
          return (
            Math.abs(v) < 0.001 && (v = 1),
            (this.x = (m - p) / v),
            (this.y = (u - f) / v),
            (this.z = (d - c) / v),
            (this.w = Math.acos((l + h + g - 1) / 2)),
            this
          );
        }
        min(e) {
          return (
            (this.x = Math.min(this.x, e.x)),
            (this.y = Math.min(this.y, e.y)),
            (this.z = Math.min(this.z, e.z)),
            (this.w = Math.min(this.w, e.w)),
            this
          );
        }
        max(e) {
          return (
            (this.x = Math.max(this.x, e.x)),
            (this.y = Math.max(this.y, e.y)),
            (this.z = Math.max(this.z, e.z)),
            (this.w = Math.max(this.w, e.w)),
            this
          );
        }
        clamp(e, t) {
          return (
            (this.x = Math.max(e.x, Math.min(t.x, this.x))),
            (this.y = Math.max(e.y, Math.min(t.y, this.y))),
            (this.z = Math.max(e.z, Math.min(t.z, this.z))),
            (this.w = Math.max(e.w, Math.min(t.w, this.w))),
            this
          );
        }
        clampScalar(e, t) {
          return (
            (this.x = Math.max(e, Math.min(t, this.x))),
            (this.y = Math.max(e, Math.min(t, this.y))),
            (this.z = Math.max(e, Math.min(t, this.z))),
            (this.w = Math.max(e, Math.min(t, this.w))),
            this
          );
        }
        clampLength(e, t) {
          const n = this.length();
          return this.divideScalar(n || 1).multiplyScalar(
            Math.max(e, Math.min(t, n))
          );
        }
        floor() {
          return (
            (this.x = Math.floor(this.x)),
            (this.y = Math.floor(this.y)),
            (this.z = Math.floor(this.z)),
            (this.w = Math.floor(this.w)),
            this
          );
        }
        ceil() {
          return (
            (this.x = Math.ceil(this.x)),
            (this.y = Math.ceil(this.y)),
            (this.z = Math.ceil(this.z)),
            (this.w = Math.ceil(this.w)),
            this
          );
        }
        round() {
          return (
            (this.x = Math.round(this.x)),
            (this.y = Math.round(this.y)),
            (this.z = Math.round(this.z)),
            (this.w = Math.round(this.w)),
            this
          );
        }
        roundToZero() {
          return (
            (this.x = Math.trunc(this.x)),
            (this.y = Math.trunc(this.y)),
            (this.z = Math.trunc(this.z)),
            (this.w = Math.trunc(this.w)),
            this
          );
        }
        negate() {
          return (
            (this.x = -this.x),
            (this.y = -this.y),
            (this.z = -this.z),
            (this.w = -this.w),
            this
          );
        }
        dot(e) {
          return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
        }
        lengthSq() {
          return (
            this.x * this.x +
            this.y * this.y +
            this.z * this.z +
            this.w * this.w
          );
        }
        length() {
          return Math.sqrt(
            this.x * this.x +
            this.y * this.y +
            this.z * this.z +
            this.w * this.w
          );
        }
        manhattanLength() {
          return (
            Math.abs(this.x) +
            Math.abs(this.y) +
            Math.abs(this.z) +
            Math.abs(this.w)
          );
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        setLength(e) {
          return this.normalize().multiplyScalar(e);
        }
        lerp(e, t) {
          return (
            (this.x += (e.x - this.x) * t),
            (this.y += (e.y - this.y) * t),
            (this.z += (e.z - this.z) * t),
            (this.w += (e.w - this.w) * t),
            this
          );
        }
        lerpVectors(e, t, n) {
          return (
            (this.x = e.x + (t.x - e.x) * n),
            (this.y = e.y + (t.y - e.y) * n),
            (this.z = e.z + (t.z - e.z) * n),
            (this.w = e.w + (t.w - e.w) * n),
            this
          );
        }
        equals(e) {
          return (
            e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w
          );
        }
        fromArray(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          return (
            (this.x = e[t]),
            (this.y = e[t + 1]),
            (this.z = e[t + 2]),
            (this.w = e[t + 3]),
            this
          );
        }
        toArray() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : [],
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
          return (
            (e[t] = this.x),
            (e[t + 1] = this.y),
            (e[t + 2] = this.z),
            (e[t + 3] = this.w),
            e
          );
        }
        fromBufferAttribute(e, t) {
          return (
            (this.x = e.getX(t)),
            (this.y = e.getY(t)),
            (this.z = e.getZ(t)),
            (this.w = e.getW(t)),
            this
          );
        }
        random() {
          return (
            (this.x = Math.random()),
            (this.y = Math.random()),
            (this.z = Math.random()),
            (this.w = Math.random()),
            this
          );
        }
        *[Symbol.iterator]() {
          yield this.x, yield this.y, yield this.z, yield this.w;
        }
      }
      class Il extends el {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 1,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 1,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : {};
          super(),
            (this.isRenderTarget = !0),
            (this.width = e),
            (this.height = t),
            (this.depth = 1),
            (this.scissor = new Ul(0, 0, e, t)),
            (this.scissorTest = !1),
            (this.viewport = new Ul(0, 0, e, t));
          const i = { width: e, height: t, depth: 1 };
          n = Object.assign(
            {
              generateMipmaps: !1,
              internalFormat: null,
              minFilter: ms,
              depthBuffer: !0,
              stencilBuffer: !1,
              depthTexture: null,
              samples: 0,
              count: 1,
            },
            n
          );
          const r = new Dl(
            i,
            n.mapping,
            n.wrapS,
            n.wrapT,
            n.magFilter,
            n.minFilter,
            n.format,
            n.type,
            n.anisotropy,
            n.colorSpace
          );
          (r.flipY = !1),
            (r.generateMipmaps = n.generateMipmaps),
            (r.internalFormat = n.internalFormat),
            (this.textures = []);
          const a = n.count;
          for (let o = 0; o < a; o++)
            (this.textures[o] = r.clone()),
              (this.textures[o].isRenderTargetTexture = !0);
          (this.depthBuffer = n.depthBuffer),
            (this.stencilBuffer = n.stencilBuffer),
            (this.depthTexture = n.depthTexture),
            (this.samples = n.samples);
        }
        get texture() {
          return this.textures[0];
        }
        set texture(e) {
          this.textures[0] = e;
        }
        setSize(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
          if (this.width !== e || this.height !== t || this.depth !== n) {
            (this.width = e), (this.height = t), (this.depth = n);
            for (let i = 0, r = this.textures.length; i < r; i++)
              (this.textures[i].image.width = e),
                (this.textures[i].image.height = t),
                (this.textures[i].image.depth = n);
            this.dispose();
          }
          this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(e) {
          (this.width = e.width),
            (this.height = e.height),
            (this.depth = e.depth),
            this.scissor.copy(e.scissor),
            (this.scissorTest = e.scissorTest),
            this.viewport.copy(e.viewport),
            (this.textures.length = 0);
          for (let n = 0, i = e.textures.length; n < i; n++)
            (this.textures[n] = e.textures[n].clone()),
              (this.textures[n].isRenderTargetTexture = !0);
          const t = Object.assign({}, e.texture.image);
          return (
            (this.texture.source = new Pl(t)),
            (this.depthBuffer = e.depthBuffer),
            (this.stencilBuffer = e.stencilBuffer),
            null !== e.depthTexture &&
            (this.depthTexture = e.depthTexture.clone()),
            (this.samples = e.samples),
            this
          );
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
      }
      class Ol extends Il {
        constructor() {
          super(
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1,
            arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}
          ),
            (this.isWebGLRenderTarget = !0);
        }
      }
      class kl extends Dl {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : null,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 1,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 1,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : 1;
          super(null),
            (this.isDataArrayTexture = !0),
            (this.image = { data: e, width: t, height: n, depth: i }),
            (this.magFilter = hs),
            (this.minFilter = hs),
            (this.wrapR = us),
            (this.generateMipmaps = !1),
            (this.flipY = !1),
            (this.unpackAlignment = 1);
        }
      }
      class Fl extends Dl {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : null,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 1,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 1,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : 1;
          super(null),
            (this.isData3DTexture = !0),
            (this.image = { data: e, width: t, height: n, depth: i }),
            (this.magFilter = hs),
            (this.minFilter = hs),
            (this.wrapR = us),
            (this.generateMipmaps = !1),
            (this.flipY = !1),
            (this.unpackAlignment = 1);
        }
      }
      class zl {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 0,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 0,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : 1;
          (this.isQuaternion = !0),
            (this._x = e),
            (this._y = t),
            (this._z = n),
            (this._w = i);
        }
        static slerpFlat(e, t, n, i, r, a, o) {
          let s = n[i + 0],
            l = n[i + 1],
            c = n[i + 2],
            u = n[i + 3];
          const d = r[a + 0],
            h = r[a + 1],
            p = r[a + 2],
            f = r[a + 3];
          if (0 === o)
            return (
              (e[t + 0] = s),
              (e[t + 1] = l),
              (e[t + 2] = c),
              void (e[t + 3] = u)
            );
          if (1 === o)
            return (
              (e[t + 0] = d),
              (e[t + 1] = h),
              (e[t + 2] = p),
              void (e[t + 3] = f)
            );
          if (u !== f || s !== d || l !== h || c !== p) {
            let e = 1 - o;
            const t = s * d + l * h + c * p + u * f,
              n = t >= 0 ? 1 : -1,
              i = 1 - t * t;
            if (i > Number.EPSILON) {
              const r = Math.sqrt(i),
                a = Math.atan2(r, t * n);
              (e = Math.sin(e * a) / r), (o = Math.sin(o * a) / r);
            }
            const r = o * n;
            if (
              ((s = s * e + d * r),
                (l = l * e + h * r),
                (c = c * e + p * r),
                (u = u * e + f * r),
                e === 1 - o)
            ) {
              const e = 1 / Math.sqrt(s * s + l * l + c * c + u * u);
              (s *= e), (l *= e), (c *= e), (u *= e);
            }
          }
          (e[t] = s), (e[t + 1] = l), (e[t + 2] = c), (e[t + 3] = u);
        }
        static multiplyQuaternionsFlat(e, t, n, i, r, a) {
          const o = n[i],
            s = n[i + 1],
            l = n[i + 2],
            c = n[i + 3],
            u = r[a],
            d = r[a + 1],
            h = r[a + 2],
            p = r[a + 3];
          return (
            (e[t] = o * p + c * u + s * h - l * d),
            (e[t + 1] = s * p + c * d + l * u - o * h),
            (e[t + 2] = l * p + c * h + o * d - s * u),
            (e[t + 3] = c * p - o * u - s * d - l * h),
            e
          );
        }
        get x() {
          return this._x;
        }
        set x(e) {
          (this._x = e), this._onChangeCallback();
        }
        get y() {
          return this._y;
        }
        set y(e) {
          (this._y = e), this._onChangeCallback();
        }
        get z() {
          return this._z;
        }
        set z(e) {
          (this._z = e), this._onChangeCallback();
        }
        get w() {
          return this._w;
        }
        set w(e) {
          (this._w = e), this._onChangeCallback();
        }
        set(e, t, n, i) {
          return (
            (this._x = e),
            (this._y = t),
            (this._z = n),
            (this._w = i),
            this._onChangeCallback(),
            this
          );
        }
        clone() {
          return new this.constructor(this._x, this._y, this._z, this._w);
        }
        copy(e) {
          return (
            (this._x = e.x),
            (this._y = e.y),
            (this._z = e.z),
            (this._w = e.w),
            this._onChangeCallback(),
            this
          );
        }
        setFromEuler(e) {
          let t =
            !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          const n = e._x,
            i = e._y,
            r = e._z,
            a = e._order,
            o = Math.cos,
            s = Math.sin,
            l = o(n / 2),
            c = o(i / 2),
            u = o(r / 2),
            d = s(n / 2),
            h = s(i / 2),
            p = s(r / 2);
          switch (a) {
            case "XYZ":
              (this._x = d * c * u + l * h * p),
                (this._y = l * h * u - d * c * p),
                (this._z = l * c * p + d * h * u),
                (this._w = l * c * u - d * h * p);
              break;
            case "YXZ":
              (this._x = d * c * u + l * h * p),
                (this._y = l * h * u - d * c * p),
                (this._z = l * c * p - d * h * u),
                (this._w = l * c * u + d * h * p);
              break;
            case "ZXY":
              (this._x = d * c * u - l * h * p),
                (this._y = l * h * u + d * c * p),
                (this._z = l * c * p + d * h * u),
                (this._w = l * c * u - d * h * p);
              break;
            case "ZYX":
              (this._x = d * c * u - l * h * p),
                (this._y = l * h * u + d * c * p),
                (this._z = l * c * p - d * h * u),
                (this._w = l * c * u + d * h * p);
              break;
            case "YZX":
              (this._x = d * c * u + l * h * p),
                (this._y = l * h * u + d * c * p),
                (this._z = l * c * p - d * h * u),
                (this._w = l * c * u - d * h * p);
              break;
            case "XZY":
              (this._x = d * c * u - l * h * p),
                (this._y = l * h * u - d * c * p),
                (this._z = l * c * p + d * h * u),
                (this._w = l * c * u + d * h * p);
              break;
            default:
              console.warn(
                "THREE.Quaternion: .setFromEuler() encountered an unknown order: " +
                a
              );
          }
          return !0 === t && this._onChangeCallback(), this;
        }
        setFromAxisAngle(e, t) {
          const n = t / 2,
            i = Math.sin(n);
          return (
            (this._x = e.x * i),
            (this._y = e.y * i),
            (this._z = e.z * i),
            (this._w = Math.cos(n)),
            this._onChangeCallback(),
            this
          );
        }
        setFromRotationMatrix(e) {
          const t = e.elements,
            n = t[0],
            i = t[4],
            r = t[8],
            a = t[1],
            o = t[5],
            s = t[9],
            l = t[2],
            c = t[6],
            u = t[10],
            d = n + o + u;
          if (d > 0) {
            const e = 0.5 / Math.sqrt(d + 1);
            (this._w = 0.25 / e),
              (this._x = (c - s) * e),
              (this._y = (r - l) * e),
              (this._z = (a - i) * e);
          } else if (n > o && n > u) {
            const e = 2 * Math.sqrt(1 + n - o - u);
            (this._w = (c - s) / e),
              (this._x = 0.25 * e),
              (this._y = (i + a) / e),
              (this._z = (r + l) / e);
          } else if (o > u) {
            const e = 2 * Math.sqrt(1 + o - n - u);
            (this._w = (r - l) / e),
              (this._x = (i + a) / e),
              (this._y = 0.25 * e),
              (this._z = (s + c) / e);
          } else {
            const e = 2 * Math.sqrt(1 + u - n - o);
            (this._w = (a - i) / e),
              (this._x = (r + l) / e),
              (this._y = (s + c) / e),
              (this._z = 0.25 * e);
          }
          return this._onChangeCallback(), this;
        }
        setFromUnitVectors(e, t) {
          let n = e.dot(t) + 1;
          return (
            n < Number.EPSILON
              ? ((n = 0),
                Math.abs(e.x) > Math.abs(e.z)
                  ? ((this._x = -e.y),
                    (this._y = e.x),
                    (this._z = 0),
                    (this._w = n))
                  : ((this._x = 0),
                    (this._y = -e.z),
                    (this._z = e.y),
                    (this._w = n)))
              : ((this._x = e.y * t.z - e.z * t.y),
                (this._y = e.z * t.x - e.x * t.z),
                (this._z = e.x * t.y - e.y * t.x),
                (this._w = n)),
            this.normalize()
          );
        }
        angleTo(e) {
          return 2 * Math.acos(Math.abs(al(this.dot(e), -1, 1)));
        }
        rotateTowards(e, t) {
          const n = this.angleTo(e);
          if (0 === n) return this;
          const i = Math.min(1, t / n);
          return this.slerp(e, i), this;
        }
        identity() {
          return this.set(0, 0, 0, 1);
        }
        invert() {
          return this.conjugate();
        }
        conjugate() {
          return (
            (this._x *= -1),
            (this._y *= -1),
            (this._z *= -1),
            this._onChangeCallback(),
            this
          );
        }
        dot(e) {
          return (
            this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w
          );
        }
        lengthSq() {
          return (
            this._x * this._x +
            this._y * this._y +
            this._z * this._z +
            this._w * this._w
          );
        }
        length() {
          return Math.sqrt(
            this._x * this._x +
            this._y * this._y +
            this._z * this._z +
            this._w * this._w
          );
        }
        normalize() {
          let e = this.length();
          return (
            0 === e
              ? ((this._x = 0), (this._y = 0), (this._z = 0), (this._w = 1))
              : ((e = 1 / e),
                (this._x = this._x * e),
                (this._y = this._y * e),
                (this._z = this._z * e),
                (this._w = this._w * e)),
            this._onChangeCallback(),
            this
          );
        }
        multiply(e) {
          return this.multiplyQuaternions(this, e);
        }
        premultiply(e) {
          return this.multiplyQuaternions(e, this);
        }
        multiplyQuaternions(e, t) {
          const n = e._x,
            i = e._y,
            r = e._z,
            a = e._w,
            o = t._x,
            s = t._y,
            l = t._z,
            c = t._w;
          return (
            (this._x = n * c + a * o + i * l - r * s),
            (this._y = i * c + a * s + r * o - n * l),
            (this._z = r * c + a * l + n * s - i * o),
            (this._w = a * c - n * o - i * s - r * l),
            this._onChangeCallback(),
            this
          );
        }
        slerp(e, t) {
          if (0 === t) return this;
          if (1 === t) return this.copy(e);
          const n = this._x,
            i = this._y,
            r = this._z,
            a = this._w;
          let o = a * e._w + n * e._x + i * e._y + r * e._z;
          if (
            (o < 0
              ? ((this._w = -e._w),
                (this._x = -e._x),
                (this._y = -e._y),
                (this._z = -e._z),
                (o = -o))
              : this.copy(e),
              o >= 1)
          )
            return (
              (this._w = a), (this._x = n), (this._y = i), (this._z = r), this
            );
          const s = 1 - o * o;
          if (s <= Number.EPSILON) {
            const e = 1 - t;
            return (
              (this._w = e * a + t * this._w),
              (this._x = e * n + t * this._x),
              (this._y = e * i + t * this._y),
              (this._z = e * r + t * this._z),
              this.normalize(),
              this
            );
          }
          const l = Math.sqrt(s),
            c = Math.atan2(l, o),
            u = Math.sin((1 - t) * c) / l,
            d = Math.sin(t * c) / l;
          return (
            (this._w = a * u + this._w * d),
            (this._x = n * u + this._x * d),
            (this._y = i * u + this._y * d),
            (this._z = r * u + this._z * d),
            this._onChangeCallback(),
            this
          );
        }
        slerpQuaternions(e, t, n) {
          return this.copy(e).slerp(t, n);
        }
        random() {
          const e = 2 * Math.PI * Math.random(),
            t = 2 * Math.PI * Math.random(),
            n = Math.random(),
            i = Math.sqrt(1 - n),
            r = Math.sqrt(n);
          return this.set(
            i * Math.sin(e),
            i * Math.cos(e),
            r * Math.sin(t),
            r * Math.cos(t)
          );
        }
        equals(e) {
          return (
            e._x === this._x &&
            e._y === this._y &&
            e._z === this._z &&
            e._w === this._w
          );
        }
        fromArray(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          return (
            (this._x = e[t]),
            (this._y = e[t + 1]),
            (this._z = e[t + 2]),
            (this._w = e[t + 3]),
            this._onChangeCallback(),
            this
          );
        }
        toArray() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : [],
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
          return (
            (e[t] = this._x),
            (e[t + 1] = this._y),
            (e[t + 2] = this._z),
            (e[t + 3] = this._w),
            e
          );
        }
        fromBufferAttribute(e, t) {
          return (
            (this._x = e.getX(t)),
            (this._y = e.getY(t)),
            (this._z = e.getZ(t)),
            (this._w = e.getW(t)),
            this._onChangeCallback(),
            this
          );
        }
        toJSON() {
          return this.toArray();
        }
        _onChange(e) {
          return (this._onChangeCallback = e), this;
        }
        _onChangeCallback() { }
        *[Symbol.iterator]() {
          yield this._x, yield this._y, yield this._z, yield this._w;
        }
      }
      class Bl {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 0,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 0;
          (Bl.prototype.isVector3 = !0),
            (this.x = e),
            (this.y = t),
            (this.z = n);
        }
        set(e, t, n) {
          return (
            void 0 === n && (n = this.z),
            (this.x = e),
            (this.y = t),
            (this.z = n),
            this
          );
        }
        setScalar(e) {
          return (this.x = e), (this.y = e), (this.z = e), this;
        }
        setX(e) {
          return (this.x = e), this;
        }
        setY(e) {
          return (this.y = e), this;
        }
        setZ(e) {
          return (this.z = e), this;
        }
        setComponent(e, t) {
          switch (e) {
            case 0:
              this.x = t;
              break;
            case 1:
              this.y = t;
              break;
            case 2:
              this.z = t;
              break;
            default:
              throw new Error("index is out of range: " + e);
          }
          return this;
        }
        getComponent(e) {
          switch (e) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            default:
              throw new Error("index is out of range: " + e);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y, this.z);
        }
        copy(e) {
          return (this.x = e.x), (this.y = e.y), (this.z = e.z), this;
        }
        add(e) {
          return (this.x += e.x), (this.y += e.y), (this.z += e.z), this;
        }
        addScalar(e) {
          return (this.x += e), (this.y += e), (this.z += e), this;
        }
        addVectors(e, t) {
          return (
            (this.x = e.x + t.x),
            (this.y = e.y + t.y),
            (this.z = e.z + t.z),
            this
          );
        }
        addScaledVector(e, t) {
          return (
            (this.x += e.x * t), (this.y += e.y * t), (this.z += e.z * t), this
          );
        }
        sub(e) {
          return (this.x -= e.x), (this.y -= e.y), (this.z -= e.z), this;
        }
        subScalar(e) {
          return (this.x -= e), (this.y -= e), (this.z -= e), this;
        }
        subVectors(e, t) {
          return (
            (this.x = e.x - t.x),
            (this.y = e.y - t.y),
            (this.z = e.z - t.z),
            this
          );
        }
        multiply(e) {
          return (this.x *= e.x), (this.y *= e.y), (this.z *= e.z), this;
        }
        multiplyScalar(e) {
          return (this.x *= e), (this.y *= e), (this.z *= e), this;
        }
        multiplyVectors(e, t) {
          return (
            (this.x = e.x * t.x),
            (this.y = e.y * t.y),
            (this.z = e.z * t.z),
            this
          );
        }
        applyEuler(e) {
          return this.applyQuaternion(Hl.setFromEuler(e));
        }
        applyAxisAngle(e, t) {
          return this.applyQuaternion(Hl.setFromAxisAngle(e, t));
        }
        applyMatrix3(e) {
          const t = this.x,
            n = this.y,
            i = this.z,
            r = e.elements;
          return (
            (this.x = r[0] * t + r[3] * n + r[6] * i),
            (this.y = r[1] * t + r[4] * n + r[7] * i),
            (this.z = r[2] * t + r[5] * n + r[8] * i),
            this
          );
        }
        applyNormalMatrix(e) {
          return this.applyMatrix3(e).normalize();
        }
        applyMatrix4(e) {
          const t = this.x,
            n = this.y,
            i = this.z,
            r = e.elements,
            a = 1 / (r[3] * t + r[7] * n + r[11] * i + r[15]);
          return (
            (this.x = (r[0] * t + r[4] * n + r[8] * i + r[12]) * a),
            (this.y = (r[1] * t + r[5] * n + r[9] * i + r[13]) * a),
            (this.z = (r[2] * t + r[6] * n + r[10] * i + r[14]) * a),
            this
          );
        }
        applyQuaternion(e) {
          const t = this.x,
            n = this.y,
            i = this.z,
            r = e.x,
            a = e.y,
            o = e.z,
            s = e.w,
            l = 2 * (a * i - o * n),
            c = 2 * (o * t - r * i),
            u = 2 * (r * n - a * t);
          return (
            (this.x = t + s * l + a * u - o * c),
            (this.y = n + s * c + o * l - r * u),
            (this.z = i + s * u + r * c - a * l),
            this
          );
        }
        project(e) {
          return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(
            e.projectionMatrix
          );
        }
        unproject(e) {
          return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(
            e.matrixWorld
          );
        }
        transformDirection(e) {
          const t = this.x,
            n = this.y,
            i = this.z,
            r = e.elements;
          return (
            (this.x = r[0] * t + r[4] * n + r[8] * i),
            (this.y = r[1] * t + r[5] * n + r[9] * i),
            (this.z = r[2] * t + r[6] * n + r[10] * i),
            this.normalize()
          );
        }
        divide(e) {
          return (this.x /= e.x), (this.y /= e.y), (this.z /= e.z), this;
        }
        divideScalar(e) {
          return this.multiplyScalar(1 / e);
        }
        min(e) {
          return (
            (this.x = Math.min(this.x, e.x)),
            (this.y = Math.min(this.y, e.y)),
            (this.z = Math.min(this.z, e.z)),
            this
          );
        }
        max(e) {
          return (
            (this.x = Math.max(this.x, e.x)),
            (this.y = Math.max(this.y, e.y)),
            (this.z = Math.max(this.z, e.z)),
            this
          );
        }
        clamp(e, t) {
          return (
            (this.x = Math.max(e.x, Math.min(t.x, this.x))),
            (this.y = Math.max(e.y, Math.min(t.y, this.y))),
            (this.z = Math.max(e.z, Math.min(t.z, this.z))),
            this
          );
        }
        clampScalar(e, t) {
          return (
            (this.x = Math.max(e, Math.min(t, this.x))),
            (this.y = Math.max(e, Math.min(t, this.y))),
            (this.z = Math.max(e, Math.min(t, this.z))),
            this
          );
        }
        clampLength(e, t) {
          const n = this.length();
          return this.divideScalar(n || 1).multiplyScalar(
            Math.max(e, Math.min(t, n))
          );
        }
        floor() {
          return (
            (this.x = Math.floor(this.x)),
            (this.y = Math.floor(this.y)),
            (this.z = Math.floor(this.z)),
            this
          );
        }
        ceil() {
          return (
            (this.x = Math.ceil(this.x)),
            (this.y = Math.ceil(this.y)),
            (this.z = Math.ceil(this.z)),
            this
          );
        }
        round() {
          return (
            (this.x = Math.round(this.x)),
            (this.y = Math.round(this.y)),
            (this.z = Math.round(this.z)),
            this
          );
        }
        roundToZero() {
          return (
            (this.x = Math.trunc(this.x)),
            (this.y = Math.trunc(this.y)),
            (this.z = Math.trunc(this.z)),
            this
          );
        }
        negate() {
          return (
            (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), this
          );
        }
        dot(e) {
          return this.x * e.x + this.y * e.y + this.z * e.z;
        }
        lengthSq() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }
        manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        setLength(e) {
          return this.normalize().multiplyScalar(e);
        }
        lerp(e, t) {
          return (
            (this.x += (e.x - this.x) * t),
            (this.y += (e.y - this.y) * t),
            (this.z += (e.z - this.z) * t),
            this
          );
        }
        lerpVectors(e, t, n) {
          return (
            (this.x = e.x + (t.x - e.x) * n),
            (this.y = e.y + (t.y - e.y) * n),
            (this.z = e.z + (t.z - e.z) * n),
            this
          );
        }
        cross(e) {
          return this.crossVectors(this, e);
        }
        crossVectors(e, t) {
          const n = e.x,
            i = e.y,
            r = e.z,
            a = t.x,
            o = t.y,
            s = t.z;
          return (
            (this.x = i * s - r * o),
            (this.y = r * a - n * s),
            (this.z = n * o - i * a),
            this
          );
        }
        projectOnVector(e) {
          const t = e.lengthSq();
          if (0 === t) return this.set(0, 0, 0);
          const n = e.dot(this) / t;
          return this.copy(e).multiplyScalar(n);
        }
        projectOnPlane(e) {
          return Vl.copy(this).projectOnVector(e), this.sub(Vl);
        }
        reflect(e) {
          return this.sub(Vl.copy(e).multiplyScalar(2 * this.dot(e)));
        }
        angleTo(e) {
          const t = Math.sqrt(this.lengthSq() * e.lengthSq());
          if (0 === t) return Math.PI / 2;
          const n = this.dot(e) / t;
          return Math.acos(al(n, -1, 1));
        }
        distanceTo(e) {
          return Math.sqrt(this.distanceToSquared(e));
        }
        distanceToSquared(e) {
          const t = this.x - e.x,
            n = this.y - e.y,
            i = this.z - e.z;
          return t * t + n * n + i * i;
        }
        manhattanDistanceTo(e) {
          return (
            Math.abs(this.x - e.x) +
            Math.abs(this.y - e.y) +
            Math.abs(this.z - e.z)
          );
        }
        setFromSpherical(e) {
          return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
        }
        setFromSphericalCoords(e, t, n) {
          const i = Math.sin(t) * e;
          return (
            (this.x = i * Math.sin(n)),
            (this.y = Math.cos(t) * e),
            (this.z = i * Math.cos(n)),
            this
          );
        }
        setFromCylindrical(e) {
          return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
        }
        setFromCylindricalCoords(e, t, n) {
          return (
            (this.x = e * Math.sin(t)),
            (this.y = n),
            (this.z = e * Math.cos(t)),
            this
          );
        }
        setFromMatrixPosition(e) {
          const t = e.elements;
          return (this.x = t[12]), (this.y = t[13]), (this.z = t[14]), this;
        }
        setFromMatrixScale(e) {
          const t = this.setFromMatrixColumn(e, 0).length(),
            n = this.setFromMatrixColumn(e, 1).length(),
            i = this.setFromMatrixColumn(e, 2).length();
          return (this.x = t), (this.y = n), (this.z = i), this;
        }
        setFromMatrixColumn(e, t) {
          return this.fromArray(e.elements, 4 * t);
        }
        setFromMatrix3Column(e, t) {
          return this.fromArray(e.elements, 3 * t);
        }
        setFromEuler(e) {
          return (this.x = e._x), (this.y = e._y), (this.z = e._z), this;
        }
        setFromColor(e) {
          return (this.x = e.r), (this.y = e.g), (this.z = e.b), this;
        }
        equals(e) {
          return e.x === this.x && e.y === this.y && e.z === this.z;
        }
        fromArray(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          return (
            (this.x = e[t]), (this.y = e[t + 1]), (this.z = e[t + 2]), this
          );
        }
        toArray() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : [],
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
          return (e[t] = this.x), (e[t + 1] = this.y), (e[t + 2] = this.z), e;
        }
        fromBufferAttribute(e, t) {
          return (
            (this.x = e.getX(t)),
            (this.y = e.getY(t)),
            (this.z = e.getZ(t)),
            this
          );
        }
        random() {
          return (
            (this.x = Math.random()),
            (this.y = Math.random()),
            (this.z = Math.random()),
            this
          );
        }
        randomDirection() {
          const e = Math.random() * Math.PI * 2,
            t = 2 * Math.random() - 1,
            n = Math.sqrt(1 - t * t);
          return (
            (this.x = n * Math.cos(e)),
            (this.y = t),
            (this.z = n * Math.sin(e)),
            this
          );
        }
        *[Symbol.iterator]() {
          yield this.x, yield this.y, yield this.z;
        }
      }
      const Vl = new Bl(),
        Hl = new zl();
      class Gl {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : new Bl(1 / 0, 1 / 0, 1 / 0),
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : new Bl(-1 / 0, -1 / 0, -1 / 0);
          (this.isBox3 = !0), (this.min = e), (this.max = t);
        }
        set(e, t) {
          return this.min.copy(e), this.max.copy(t), this;
        }
        setFromArray(e) {
          this.makeEmpty();
          for (let t = 0, n = e.length; t < n; t += 3)
            this.expandByPoint(jl.fromArray(e, t));
          return this;
        }
        setFromBufferAttribute(e) {
          this.makeEmpty();
          for (let t = 0, n = e.count; t < n; t++)
            this.expandByPoint(jl.fromBufferAttribute(e, t));
          return this;
        }
        setFromPoints(e) {
          this.makeEmpty();
          for (let t = 0, n = e.length; t < n; t++) this.expandByPoint(e[t]);
          return this;
        }
        setFromCenterAndSize(e, t) {
          const n = jl.copy(t).multiplyScalar(0.5);
          return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
        }
        setFromObject(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          return this.makeEmpty(), this.expandByObject(e, t);
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(e) {
          return this.min.copy(e.min), this.max.copy(e.max), this;
        }
        makeEmpty() {
          return (
            (this.min.x = this.min.y = this.min.z = 1 / 0),
            (this.max.x = this.max.y = this.max.z = -1 / 0),
            this
          );
        }
        isEmpty() {
          return (
            this.max.x < this.min.x ||
            this.max.y < this.min.y ||
            this.max.z < this.min.z
          );
        }
        getCenter(e) {
          return this.isEmpty()
            ? e.set(0, 0, 0)
            : e.addVectors(this.min, this.max).multiplyScalar(0.5);
        }
        getSize(e) {
          return this.isEmpty()
            ? e.set(0, 0, 0)
            : e.subVectors(this.max, this.min);
        }
        expandByPoint(e) {
          return this.min.min(e), this.max.max(e), this;
        }
        expandByVector(e) {
          return this.min.sub(e), this.max.add(e), this;
        }
        expandByScalar(e) {
          return this.min.addScalar(-e), this.max.addScalar(e), this;
        }
        expandByObject(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          e.updateWorldMatrix(!1, !1);
          const n = e.geometry;
          if (void 0 !== n) {
            const i = n.getAttribute("position");
            if (!0 === t && void 0 !== i && !0 !== e.isInstancedMesh)
              for (let t = 0, n = i.count; t < n; t++)
                !0 === e.isMesh
                  ? e.getVertexPosition(t, jl)
                  : jl.fromBufferAttribute(i, t),
                  jl.applyMatrix4(e.matrixWorld),
                  this.expandByPoint(jl);
            else
              void 0 !== e.boundingBox
                ? (null === e.boundingBox && e.computeBoundingBox(),
                  Xl.copy(e.boundingBox))
                : (null === n.boundingBox && n.computeBoundingBox(),
                  Xl.copy(n.boundingBox)),
                Xl.applyMatrix4(e.matrixWorld),
                this.union(Xl);
          }
          const i = e.children;
          for (let r = 0, a = i.length; r < a; r++)
            this.expandByObject(i[r], t);
          return this;
        }
        containsPoint(e) {
          return !(
            e.x < this.min.x ||
            e.x > this.max.x ||
            e.y < this.min.y ||
            e.y > this.max.y ||
            e.z < this.min.z ||
            e.z > this.max.z
          );
        }
        containsBox(e) {
          return (
            this.min.x <= e.min.x &&
            e.max.x <= this.max.x &&
            this.min.y <= e.min.y &&
            e.max.y <= this.max.y &&
            this.min.z <= e.min.z &&
            e.max.z <= this.max.z
          );
        }
        getParameter(e, t) {
          return t.set(
            (e.x - this.min.x) / (this.max.x - this.min.x),
            (e.y - this.min.y) / (this.max.y - this.min.y),
            (e.z - this.min.z) / (this.max.z - this.min.z)
          );
        }
        intersectsBox(e) {
          return !(
            e.max.x < this.min.x ||
            e.min.x > this.max.x ||
            e.max.y < this.min.y ||
            e.min.y > this.max.y ||
            e.max.z < this.min.z ||
            e.min.z > this.max.z
          );
        }
        intersectsSphere(e) {
          return (
            this.clampPoint(e.center, jl),
            jl.distanceToSquared(e.center) <= e.radius * e.radius
          );
        }
        intersectsPlane(e) {
          let t, n;
          return (
            e.normal.x > 0
              ? ((t = e.normal.x * this.min.x), (n = e.normal.x * this.max.x))
              : ((t = e.normal.x * this.max.x), (n = e.normal.x * this.min.x)),
            e.normal.y > 0
              ? ((t += e.normal.y * this.min.y), (n += e.normal.y * this.max.y))
              : ((t += e.normal.y * this.max.y),
                (n += e.normal.y * this.min.y)),
            e.normal.z > 0
              ? ((t += e.normal.z * this.min.z), (n += e.normal.z * this.max.z))
              : ((t += e.normal.z * this.max.z),
                (n += e.normal.z * this.min.z)),
            t <= -e.constant && n >= -e.constant
          );
        }
        intersectsTriangle(e) {
          if (this.isEmpty()) return !1;
          this.getCenter($l),
            ec.subVectors(this.max, $l),
            Yl.subVectors(e.a, $l),
            ql.subVectors(e.b, $l),
            Kl.subVectors(e.c, $l),
            Zl.subVectors(ql, Yl),
            Jl.subVectors(Kl, ql),
            Ql.subVectors(Yl, Kl);
          let t = [
            0,
            -Zl.z,
            Zl.y,
            0,
            -Jl.z,
            Jl.y,
            0,
            -Ql.z,
            Ql.y,
            Zl.z,
            0,
            -Zl.x,
            Jl.z,
            0,
            -Jl.x,
            Ql.z,
            0,
            -Ql.x,
            -Zl.y,
            Zl.x,
            0,
            -Jl.y,
            Jl.x,
            0,
            -Ql.y,
            Ql.x,
            0,
          ];
          return (
            !!ic(t, Yl, ql, Kl, ec) &&
            ((t = [1, 0, 0, 0, 1, 0, 0, 0, 1]),
              !!ic(t, Yl, ql, Kl, ec) &&
              (tc.crossVectors(Zl, Jl),
                (t = [tc.x, tc.y, tc.z]),
                ic(t, Yl, ql, Kl, ec)))
          );
        }
        clampPoint(e, t) {
          return t.copy(e).clamp(this.min, this.max);
        }
        distanceToPoint(e) {
          return this.clampPoint(e, jl).distanceTo(e);
        }
        getBoundingSphere(e) {
          return (
            this.isEmpty()
              ? e.makeEmpty()
              : (this.getCenter(e.center),
                (e.radius = 0.5 * this.getSize(jl).length())),
            e
          );
        }
        intersect(e) {
          return (
            this.min.max(e.min),
            this.max.min(e.max),
            this.isEmpty() && this.makeEmpty(),
            this
          );
        }
        union(e) {
          return this.min.min(e.min), this.max.max(e.max), this;
        }
        applyMatrix4(e) {
          return (
            this.isEmpty() ||
            (Wl[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e),
              Wl[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e),
              Wl[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e),
              Wl[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e),
              Wl[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e),
              Wl[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e),
              Wl[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e),
              Wl[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e),
              this.setFromPoints(Wl)),
            this
          );
        }
        translate(e) {
          return this.min.add(e), this.max.add(e), this;
        }
        equals(e) {
          return e.min.equals(this.min) && e.max.equals(this.max);
        }
      }
      const Wl = [
        new Bl(),
        new Bl(),
        new Bl(),
        new Bl(),
        new Bl(),
        new Bl(),
        new Bl(),
        new Bl(),
      ],
        jl = new Bl(),
        Xl = new Gl(),
        Yl = new Bl(),
        ql = new Bl(),
        Kl = new Bl(),
        Zl = new Bl(),
        Jl = new Bl(),
        Ql = new Bl(),
        $l = new Bl(),
        ec = new Bl(),
        tc = new Bl(),
        nc = new Bl();
      function ic(e, t, n, i, r) {
        for (let a = 0, o = e.length - 3; a <= o; a += 3) {
          nc.fromArray(e, a);
          const o =
            r.x * Math.abs(nc.x) +
            r.y * Math.abs(nc.y) +
            r.z * Math.abs(nc.z),
            s = t.dot(nc),
            l = n.dot(nc),
            c = i.dot(nc);
          if (Math.max(-Math.max(s, l, c), Math.min(s, l, c)) > o) return !1;
        }
        return !0;
      }
      const rc = new Gl(),
        ac = new Bl(),
        oc = new Bl();
      class sc {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : new Bl(),
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : -1;
          (this.isSphere = !0), (this.center = e), (this.radius = t);
        }
        set(e, t) {
          return this.center.copy(e), (this.radius = t), this;
        }
        setFromPoints(e, t) {
          const n = this.center;
          void 0 !== t ? n.copy(t) : rc.setFromPoints(e).getCenter(n);
          let i = 0;
          for (let r = 0, a = e.length; r < a; r++)
            i = Math.max(i, n.distanceToSquared(e[r]));
          return (this.radius = Math.sqrt(i)), this;
        }
        copy(e) {
          return this.center.copy(e.center), (this.radius = e.radius), this;
        }
        isEmpty() {
          return this.radius < 0;
        }
        makeEmpty() {
          return this.center.set(0, 0, 0), (this.radius = -1), this;
        }
        containsPoint(e) {
          return e.distanceToSquared(this.center) <= this.radius * this.radius;
        }
        distanceToPoint(e) {
          return e.distanceTo(this.center) - this.radius;
        }
        intersectsSphere(e) {
          const t = this.radius + e.radius;
          return e.center.distanceToSquared(this.center) <= t * t;
        }
        intersectsBox(e) {
          return e.intersectsSphere(this);
        }
        intersectsPlane(e) {
          return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
        }
        clampPoint(e, t) {
          const n = this.center.distanceToSquared(e);
          return (
            t.copy(e),
            n > this.radius * this.radius &&
            (t.sub(this.center).normalize(),
              t.multiplyScalar(this.radius).add(this.center)),
            t
          );
        }
        getBoundingBox(e) {
          return this.isEmpty()
            ? (e.makeEmpty(), e)
            : (e.set(this.center, this.center),
              e.expandByScalar(this.radius),
              e);
        }
        applyMatrix4(e) {
          return (
            this.center.applyMatrix4(e),
            (this.radius = this.radius * e.getMaxScaleOnAxis()),
            this
          );
        }
        translate(e) {
          return this.center.add(e), this;
        }
        expandByPoint(e) {
          if (this.isEmpty())
            return this.center.copy(e), (this.radius = 0), this;
          ac.subVectors(e, this.center);
          const t = ac.lengthSq();
          if (t > this.radius * this.radius) {
            const e = Math.sqrt(t),
              n = 0.5 * (e - this.radius);
            this.center.addScaledVector(ac, n / e), (this.radius += n);
          }
          return this;
        }
        union(e) {
          return e.isEmpty()
            ? this
            : this.isEmpty()
              ? (this.copy(e), this)
              : (!0 === this.center.equals(e.center)
                ? (this.radius = Math.max(this.radius, e.radius))
                : (oc.subVectors(e.center, this.center).setLength(e.radius),
                  this.expandByPoint(ac.copy(e.center).add(oc)),
                  this.expandByPoint(ac.copy(e.center).sub(oc))),
                this);
        }
        equals(e) {
          return e.center.equals(this.center) && e.radius === this.radius;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      const lc = new Bl(),
        cc = new Bl(),
        uc = new Bl(),
        dc = new Bl(),
        hc = new Bl(),
        pc = new Bl(),
        fc = new Bl();
      class mc {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : new Bl(),
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : new Bl(0, 0, -1);
          (this.origin = e), (this.direction = t);
        }
        set(e, t) {
          return this.origin.copy(e), this.direction.copy(t), this;
        }
        copy(e) {
          return (
            this.origin.copy(e.origin), this.direction.copy(e.direction), this
          );
        }
        at(e, t) {
          return t.copy(this.origin).addScaledVector(this.direction, e);
        }
        lookAt(e) {
          return this.direction.copy(e).sub(this.origin).normalize(), this;
        }
        recast(e) {
          return this.origin.copy(this.at(e, lc)), this;
        }
        closestPointToPoint(e, t) {
          t.subVectors(e, this.origin);
          const n = t.dot(this.direction);
          return n < 0
            ? t.copy(this.origin)
            : t.copy(this.origin).addScaledVector(this.direction, n);
        }
        distanceToPoint(e) {
          return Math.sqrt(this.distanceSqToPoint(e));
        }
        distanceSqToPoint(e) {
          const t = lc.subVectors(e, this.origin).dot(this.direction);
          return t < 0
            ? this.origin.distanceToSquared(e)
            : (lc.copy(this.origin).addScaledVector(this.direction, t),
              lc.distanceToSquared(e));
        }
        distanceSqToSegment(e, t, n, i) {
          cc.copy(e).add(t).multiplyScalar(0.5),
            uc.copy(t).sub(e).normalize(),
            dc.copy(this.origin).sub(cc);
          const r = 0.5 * e.distanceTo(t),
            a = -this.direction.dot(uc),
            o = dc.dot(this.direction),
            s = -dc.dot(uc),
            l = dc.lengthSq(),
            c = Math.abs(1 - a * a);
          let u, d, h, p;
          if (c > 0)
            if (((u = a * s - o), (d = a * o - s), (p = r * c), u >= 0))
              if (d >= -p)
                if (d <= p) {
                  const e = 1 / c;
                  (u *= e),
                    (d *= e),
                    (h = u * (u + a * d + 2 * o) + d * (a * u + d + 2 * s) + l);
                } else
                  (d = r),
                    (u = Math.max(0, -(a * d + o))),
                    (h = -u * u + d * (d + 2 * s) + l);
              else
                (d = -r),
                  (u = Math.max(0, -(a * d + o))),
                  (h = -u * u + d * (d + 2 * s) + l);
            else
              d <= -p
                ? ((u = Math.max(0, -(-a * r + o))),
                  (d = u > 0 ? -r : Math.min(Math.max(-r, -s), r)),
                  (h = -u * u + d * (d + 2 * s) + l))
                : d <= p
                  ? ((u = 0),
                    (d = Math.min(Math.max(-r, -s), r)),
                    (h = d * (d + 2 * s) + l))
                  : ((u = Math.max(0, -(a * r + o))),
                    (d = u > 0 ? r : Math.min(Math.max(-r, -s), r)),
                    (h = -u * u + d * (d + 2 * s) + l));
          else
            (d = a > 0 ? -r : r),
              (u = Math.max(0, -(a * d + o))),
              (h = -u * u + d * (d + 2 * s) + l);
          return (
            n && n.copy(this.origin).addScaledVector(this.direction, u),
            i && i.copy(cc).addScaledVector(uc, d),
            h
          );
        }
        intersectSphere(e, t) {
          lc.subVectors(e.center, this.origin);
          const n = lc.dot(this.direction),
            i = lc.dot(lc) - n * n,
            r = e.radius * e.radius;
          if (i > r) return null;
          const a = Math.sqrt(r - i),
            o = n - a,
            s = n + a;
          return s < 0 ? null : o < 0 ? this.at(s, t) : this.at(o, t);
        }
        intersectsSphere(e) {
          return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
        }
        distanceToPlane(e) {
          const t = e.normal.dot(this.direction);
          if (0 === t) return 0 === e.distanceToPoint(this.origin) ? 0 : null;
          const n = -(this.origin.dot(e.normal) + e.constant) / t;
          return n >= 0 ? n : null;
        }
        intersectPlane(e, t) {
          const n = this.distanceToPlane(e);
          return null === n ? null : this.at(n, t);
        }
        intersectsPlane(e) {
          const t = e.distanceToPoint(this.origin);
          if (0 === t) return !0;
          return e.normal.dot(this.direction) * t < 0;
        }
        intersectBox(e, t) {
          let n, i, r, a, o, s;
          const l = 1 / this.direction.x,
            c = 1 / this.direction.y,
            u = 1 / this.direction.z,
            d = this.origin;
          return (
            l >= 0
              ? ((n = (e.min.x - d.x) * l), (i = (e.max.x - d.x) * l))
              : ((n = (e.max.x - d.x) * l), (i = (e.min.x - d.x) * l)),
            c >= 0
              ? ((r = (e.min.y - d.y) * c), (a = (e.max.y - d.y) * c))
              : ((r = (e.max.y - d.y) * c), (a = (e.min.y - d.y) * c)),
            n > a || r > i
              ? null
              : ((r > n || isNaN(n)) && (n = r),
                (a < i || isNaN(i)) && (i = a),
                u >= 0
                  ? ((o = (e.min.z - d.z) * u), (s = (e.max.z - d.z) * u))
                  : ((o = (e.max.z - d.z) * u), (s = (e.min.z - d.z) * u)),
                n > s || o > i
                  ? null
                  : ((o > n || n !== n) && (n = o),
                    (s < i || i !== i) && (i = s),
                    i < 0 ? null : this.at(n >= 0 ? n : i, t)))
          );
        }
        intersectsBox(e) {
          return null !== this.intersectBox(e, lc);
        }
        intersectTriangle(e, t, n, i, r) {
          hc.subVectors(t, e), pc.subVectors(n, e), fc.crossVectors(hc, pc);
          let a,
            o = this.direction.dot(fc);
          if (o > 0) {
            if (i) return null;
            a = 1;
          } else {
            if (!(o < 0)) return null;
            (a = -1), (o = -o);
          }
          dc.subVectors(this.origin, e);
          const s = a * this.direction.dot(pc.crossVectors(dc, pc));
          if (s < 0) return null;
          const l = a * this.direction.dot(hc.cross(dc));
          if (l < 0) return null;
          if (s + l > o) return null;
          const c = -a * dc.dot(fc);
          return c < 0 ? null : this.at(c / o, r);
        }
        applyMatrix4(e) {
          return (
            this.origin.applyMatrix4(e),
            this.direction.transformDirection(e),
            this
          );
        }
        equals(e) {
          return (
            e.origin.equals(this.origin) && e.direction.equals(this.direction)
          );
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      class gc {
        constructor(e, t, n, i, r, a, o, s, l, c, u, d, h, p, f, m) {
          (gc.prototype.isMatrix4 = !0),
            (this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]),
            void 0 !== e &&
            this.set(e, t, n, i, r, a, o, s, l, c, u, d, h, p, f, m);
        }
        set(e, t, n, i, r, a, o, s, l, c, u, d, h, p, f, m) {
          const g = this.elements;
          return (
            (g[0] = e),
            (g[4] = t),
            (g[8] = n),
            (g[12] = i),
            (g[1] = r),
            (g[5] = a),
            (g[9] = o),
            (g[13] = s),
            (g[2] = l),
            (g[6] = c),
            (g[10] = u),
            (g[14] = d),
            (g[3] = h),
            (g[7] = p),
            (g[11] = f),
            (g[15] = m),
            this
          );
        }
        identity() {
          return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }
        clone() {
          return new gc().fromArray(this.elements);
        }
        copy(e) {
          const t = this.elements,
            n = e.elements;
          return (
            (t[0] = n[0]),
            (t[1] = n[1]),
            (t[2] = n[2]),
            (t[3] = n[3]),
            (t[4] = n[4]),
            (t[5] = n[5]),
            (t[6] = n[6]),
            (t[7] = n[7]),
            (t[8] = n[8]),
            (t[9] = n[9]),
            (t[10] = n[10]),
            (t[11] = n[11]),
            (t[12] = n[12]),
            (t[13] = n[13]),
            (t[14] = n[14]),
            (t[15] = n[15]),
            this
          );
        }
        copyPosition(e) {
          const t = this.elements,
            n = e.elements;
          return (t[12] = n[12]), (t[13] = n[13]), (t[14] = n[14]), this;
        }
        setFromMatrix3(e) {
          const t = e.elements;
          return (
            this.set(
              t[0],
              t[3],
              t[6],
              0,
              t[1],
              t[4],
              t[7],
              0,
              t[2],
              t[5],
              t[8],
              0,
              0,
              0,
              0,
              1
            ),
            this
          );
        }
        extractBasis(e, t, n) {
          return (
            e.setFromMatrixColumn(this, 0),
            t.setFromMatrixColumn(this, 1),
            n.setFromMatrixColumn(this, 2),
            this
          );
        }
        makeBasis(e, t, n) {
          return (
            this.set(
              e.x,
              t.x,
              n.x,
              0,
              e.y,
              t.y,
              n.y,
              0,
              e.z,
              t.z,
              n.z,
              0,
              0,
              0,
              0,
              1
            ),
            this
          );
        }
        extractRotation(e) {
          const t = this.elements,
            n = e.elements,
            i = 1 / vc.setFromMatrixColumn(e, 0).length(),
            r = 1 / vc.setFromMatrixColumn(e, 1).length(),
            a = 1 / vc.setFromMatrixColumn(e, 2).length();
          return (
            (t[0] = n[0] * i),
            (t[1] = n[1] * i),
            (t[2] = n[2] * i),
            (t[3] = 0),
            (t[4] = n[4] * r),
            (t[5] = n[5] * r),
            (t[6] = n[6] * r),
            (t[7] = 0),
            (t[8] = n[8] * a),
            (t[9] = n[9] * a),
            (t[10] = n[10] * a),
            (t[11] = 0),
            (t[12] = 0),
            (t[13] = 0),
            (t[14] = 0),
            (t[15] = 1),
            this
          );
        }
        makeRotationFromEuler(e) {
          const t = this.elements,
            n = e.x,
            i = e.y,
            r = e.z,
            a = Math.cos(n),
            o = Math.sin(n),
            s = Math.cos(i),
            l = Math.sin(i),
            c = Math.cos(r),
            u = Math.sin(r);
          if ("XYZ" === e.order) {
            const e = a * c,
              n = a * u,
              i = o * c,
              r = o * u;
            (t[0] = s * c),
              (t[4] = -s * u),
              (t[8] = l),
              (t[1] = n + i * l),
              (t[5] = e - r * l),
              (t[9] = -o * s),
              (t[2] = r - e * l),
              (t[6] = i + n * l),
              (t[10] = a * s);
          } else if ("YXZ" === e.order) {
            const e = s * c,
              n = s * u,
              i = l * c,
              r = l * u;
            (t[0] = e + r * o),
              (t[4] = i * o - n),
              (t[8] = a * l),
              (t[1] = a * u),
              (t[5] = a * c),
              (t[9] = -o),
              (t[2] = n * o - i),
              (t[6] = r + e * o),
              (t[10] = a * s);
          } else if ("ZXY" === e.order) {
            const e = s * c,
              n = s * u,
              i = l * c,
              r = l * u;
            (t[0] = e - r * o),
              (t[4] = -a * u),
              (t[8] = i + n * o),
              (t[1] = n + i * o),
              (t[5] = a * c),
              (t[9] = r - e * o),
              (t[2] = -a * l),
              (t[6] = o),
              (t[10] = a * s);
          } else if ("ZYX" === e.order) {
            const e = a * c,
              n = a * u,
              i = o * c,
              r = o * u;
            (t[0] = s * c),
              (t[4] = i * l - n),
              (t[8] = e * l + r),
              (t[1] = s * u),
              (t[5] = r * l + e),
              (t[9] = n * l - i),
              (t[2] = -l),
              (t[6] = o * s),
              (t[10] = a * s);
          } else if ("YZX" === e.order) {
            const e = a * s,
              n = a * l,
              i = o * s,
              r = o * l;
            (t[0] = s * c),
              (t[4] = r - e * u),
              (t[8] = i * u + n),
              (t[1] = u),
              (t[5] = a * c),
              (t[9] = -o * c),
              (t[2] = -l * c),
              (t[6] = n * u + i),
              (t[10] = e - r * u);
          } else if ("XZY" === e.order) {
            const e = a * s,
              n = a * l,
              i = o * s,
              r = o * l;
            (t[0] = s * c),
              (t[4] = -u),
              (t[8] = l * c),
              (t[1] = e * u + r),
              (t[5] = a * c),
              (t[9] = n * u - i),
              (t[2] = i * u - n),
              (t[6] = o * c),
              (t[10] = r * u + e);
          }
          return (
            (t[3] = 0),
            (t[7] = 0),
            (t[11] = 0),
            (t[12] = 0),
            (t[13] = 0),
            (t[14] = 0),
            (t[15] = 1),
            this
          );
        }
        makeRotationFromQuaternion(e) {
          return this.compose(yc, e, xc);
        }
        lookAt(e, t, n) {
          const i = this.elements;
          return (
            Ec.subVectors(e, t),
            0 === Ec.lengthSq() && (Ec.z = 1),
            Ec.normalize(),
            bc.crossVectors(n, Ec),
            0 === bc.lengthSq() &&
            (1 === Math.abs(n.z) ? (Ec.x += 1e-4) : (Ec.z += 1e-4),
              Ec.normalize(),
              bc.crossVectors(n, Ec)),
            bc.normalize(),
            Sc.crossVectors(Ec, bc),
            (i[0] = bc.x),
            (i[4] = Sc.x),
            (i[8] = Ec.x),
            (i[1] = bc.y),
            (i[5] = Sc.y),
            (i[9] = Ec.y),
            (i[2] = bc.z),
            (i[6] = Sc.z),
            (i[10] = Ec.z),
            this
          );
        }
        multiply(e) {
          return this.multiplyMatrices(this, e);
        }
        premultiply(e) {
          return this.multiplyMatrices(e, this);
        }
        multiplyMatrices(e, t) {
          const n = e.elements,
            i = t.elements,
            r = this.elements,
            a = n[0],
            o = n[4],
            s = n[8],
            l = n[12],
            c = n[1],
            u = n[5],
            d = n[9],
            h = n[13],
            p = n[2],
            f = n[6],
            m = n[10],
            g = n[14],
            v = n[3],
            _ = n[7],
            y = n[11],
            x = n[15],
            b = i[0],
            S = i[4],
            E = i[8],
            M = i[12],
            T = i[1],
            w = i[5],
            A = i[9],
            R = i[13],
            C = i[2],
            P = i[6],
            L = i[10],
            N = i[14],
            D = i[3],
            U = i[7],
            I = i[11],
            O = i[15];
          return (
            (r[0] = a * b + o * T + s * C + l * D),
            (r[4] = a * S + o * w + s * P + l * U),
            (r[8] = a * E + o * A + s * L + l * I),
            (r[12] = a * M + o * R + s * N + l * O),
            (r[1] = c * b + u * T + d * C + h * D),
            (r[5] = c * S + u * w + d * P + h * U),
            (r[9] = c * E + u * A + d * L + h * I),
            (r[13] = c * M + u * R + d * N + h * O),
            (r[2] = p * b + f * T + m * C + g * D),
            (r[6] = p * S + f * w + m * P + g * U),
            (r[10] = p * E + f * A + m * L + g * I),
            (r[14] = p * M + f * R + m * N + g * O),
            (r[3] = v * b + _ * T + y * C + x * D),
            (r[7] = v * S + _ * w + y * P + x * U),
            (r[11] = v * E + _ * A + y * L + x * I),
            (r[15] = v * M + _ * R + y * N + x * O),
            this
          );
        }
        multiplyScalar(e) {
          const t = this.elements;
          return (
            (t[0] *= e),
            (t[4] *= e),
            (t[8] *= e),
            (t[12] *= e),
            (t[1] *= e),
            (t[5] *= e),
            (t[9] *= e),
            (t[13] *= e),
            (t[2] *= e),
            (t[6] *= e),
            (t[10] *= e),
            (t[14] *= e),
            (t[3] *= e),
            (t[7] *= e),
            (t[11] *= e),
            (t[15] *= e),
            this
          );
        }
        determinant() {
          const e = this.elements,
            t = e[0],
            n = e[4],
            i = e[8],
            r = e[12],
            a = e[1],
            o = e[5],
            s = e[9],
            l = e[13],
            c = e[2],
            u = e[6],
            d = e[10],
            h = e[14];
          return (
            e[3] *
            (+r * s * u -
              i * l * u -
              r * o * d +
              n * l * d +
              i * o * h -
              n * s * h) +
            e[7] *
            (+t * s * h -
              t * l * d +
              r * a * d -
              i * a * h +
              i * l * c -
              r * s * c) +
            e[11] *
            (+t * l * u -
              t * o * h -
              r * a * u +
              n * a * h +
              r * o * c -
              n * l * c) +
            e[15] *
            (-i * o * c -
              t * s * u +
              t * o * d +
              i * a * u -
              n * a * d +
              n * s * c)
          );
        }
        transpose() {
          const e = this.elements;
          let t;
          return (
            (t = e[1]),
            (e[1] = e[4]),
            (e[4] = t),
            (t = e[2]),
            (e[2] = e[8]),
            (e[8] = t),
            (t = e[6]),
            (e[6] = e[9]),
            (e[9] = t),
            (t = e[3]),
            (e[3] = e[12]),
            (e[12] = t),
            (t = e[7]),
            (e[7] = e[13]),
            (e[13] = t),
            (t = e[11]),
            (e[11] = e[14]),
            (e[14] = t),
            this
          );
        }
        setPosition(e, t, n) {
          const i = this.elements;
          return (
            e.isVector3
              ? ((i[12] = e.x), (i[13] = e.y), (i[14] = e.z))
              : ((i[12] = e), (i[13] = t), (i[14] = n)),
            this
          );
        }
        invert() {
          const e = this.elements,
            t = e[0],
            n = e[1],
            i = e[2],
            r = e[3],
            a = e[4],
            o = e[5],
            s = e[6],
            l = e[7],
            c = e[8],
            u = e[9],
            d = e[10],
            h = e[11],
            p = e[12],
            f = e[13],
            m = e[14],
            g = e[15],
            v =
              u * m * l -
              f * d * l +
              f * s * h -
              o * m * h -
              u * s * g +
              o * d * g,
            _ =
              p * d * l -
              c * m * l -
              p * s * h +
              a * m * h +
              c * s * g -
              a * d * g,
            y =
              c * f * l -
              p * u * l +
              p * o * h -
              a * f * h -
              c * o * g +
              a * u * g,
            x =
              p * u * s -
              c * f * s -
              p * o * d +
              a * f * d +
              c * o * m -
              a * u * m,
            b = t * v + n * _ + i * y + r * x;
          if (0 === b)
            return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          const S = 1 / b;
          return (
            (e[0] = v * S),
            (e[1] =
              (f * d * r -
                u * m * r -
                f * i * h +
                n * m * h +
                u * i * g -
                n * d * g) *
              S),
            (e[2] =
              (o * m * r -
                f * s * r +
                f * i * l -
                n * m * l -
                o * i * g +
                n * s * g) *
              S),
            (e[3] =
              (u * s * r -
                o * d * r -
                u * i * l +
                n * d * l +
                o * i * h -
                n * s * h) *
              S),
            (e[4] = _ * S),
            (e[5] =
              (c * m * r -
                p * d * r +
                p * i * h -
                t * m * h -
                c * i * g +
                t * d * g) *
              S),
            (e[6] =
              (p * s * r -
                a * m * r -
                p * i * l +
                t * m * l +
                a * i * g -
                t * s * g) *
              S),
            (e[7] =
              (a * d * r -
                c * s * r +
                c * i * l -
                t * d * l -
                a * i * h +
                t * s * h) *
              S),
            (e[8] = y * S),
            (e[9] =
              (p * u * r -
                c * f * r -
                p * n * h +
                t * f * h +
                c * n * g -
                t * u * g) *
              S),
            (e[10] =
              (a * f * r -
                p * o * r +
                p * n * l -
                t * f * l -
                a * n * g +
                t * o * g) *
              S),
            (e[11] =
              (c * o * r -
                a * u * r -
                c * n * l +
                t * u * l +
                a * n * h -
                t * o * h) *
              S),
            (e[12] = x * S),
            (e[13] =
              (c * f * i -
                p * u * i +
                p * n * d -
                t * f * d -
                c * n * m +
                t * u * m) *
              S),
            (e[14] =
              (p * o * i -
                a * f * i -
                p * n * s +
                t * f * s +
                a * n * m -
                t * o * m) *
              S),
            (e[15] =
              (a * u * i -
                c * o * i +
                c * n * s -
                t * u * s -
                a * n * d +
                t * o * d) *
              S),
            this
          );
        }
        scale(e) {
          const t = this.elements,
            n = e.x,
            i = e.y,
            r = e.z;
          return (
            (t[0] *= n),
            (t[4] *= i),
            (t[8] *= r),
            (t[1] *= n),
            (t[5] *= i),
            (t[9] *= r),
            (t[2] *= n),
            (t[6] *= i),
            (t[10] *= r),
            (t[3] *= n),
            (t[7] *= i),
            (t[11] *= r),
            this
          );
        }
        getMaxScaleOnAxis() {
          const e = this.elements,
            t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2],
            n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6],
            i = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
          return Math.sqrt(Math.max(t, n, i));
        }
        makeTranslation(e, t, n) {
          return (
            e.isVector3
              ? this.set(1, 0, 0, e.x, 0, 1, 0, e.y, 0, 0, 1, e.z, 0, 0, 0, 1)
              : this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, n, 0, 0, 0, 1),
            this
          );
        }
        makeRotationX(e) {
          const t = Math.cos(e),
            n = Math.sin(e);
          return (
            this.set(1, 0, 0, 0, 0, t, -n, 0, 0, n, t, 0, 0, 0, 0, 1), this
          );
        }
        makeRotationY(e) {
          const t = Math.cos(e),
            n = Math.sin(e);
          return (
            this.set(t, 0, n, 0, 0, 1, 0, 0, -n, 0, t, 0, 0, 0, 0, 1), this
          );
        }
        makeRotationZ(e) {
          const t = Math.cos(e),
            n = Math.sin(e);
          return (
            this.set(t, -n, 0, 0, n, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this
          );
        }
        makeRotationAxis(e, t) {
          const n = Math.cos(t),
            i = Math.sin(t),
            r = 1 - n,
            a = e.x,
            o = e.y,
            s = e.z,
            l = r * a,
            c = r * o;
          return (
            this.set(
              l * a + n,
              l * o - i * s,
              l * s + i * o,
              0,
              l * o + i * s,
              c * o + n,
              c * s - i * a,
              0,
              l * s - i * o,
              c * s + i * a,
              r * s * s + n,
              0,
              0,
              0,
              0,
              1
            ),
            this
          );
        }
        makeScale(e, t, n) {
          return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
        }
        makeShear(e, t, n, i, r, a) {
          return this.set(1, n, r, 0, e, 1, a, 0, t, i, 1, 0, 0, 0, 0, 1), this;
        }
        compose(e, t, n) {
          const i = this.elements,
            r = t._x,
            a = t._y,
            o = t._z,
            s = t._w,
            l = r + r,
            c = a + a,
            u = o + o,
            d = r * l,
            h = r * c,
            p = r * u,
            f = a * c,
            m = a * u,
            g = o * u,
            v = s * l,
            _ = s * c,
            y = s * u,
            x = n.x,
            b = n.y,
            S = n.z;
          return (
            (i[0] = (1 - (f + g)) * x),
            (i[1] = (h + y) * x),
            (i[2] = (p - _) * x),
            (i[3] = 0),
            (i[4] = (h - y) * b),
            (i[5] = (1 - (d + g)) * b),
            (i[6] = (m + v) * b),
            (i[7] = 0),
            (i[8] = (p + _) * S),
            (i[9] = (m - v) * S),
            (i[10] = (1 - (d + f)) * S),
            (i[11] = 0),
            (i[12] = e.x),
            (i[13] = e.y),
            (i[14] = e.z),
            (i[15] = 1),
            this
          );
        }
        decompose(e, t, n) {
          const i = this.elements;
          let r = vc.set(i[0], i[1], i[2]).length();
          const a = vc.set(i[4], i[5], i[6]).length(),
            o = vc.set(i[8], i[9], i[10]).length();
          this.determinant() < 0 && (r = -r),
            (e.x = i[12]),
            (e.y = i[13]),
            (e.z = i[14]),
            _c.copy(this);
          const s = 1 / r,
            l = 1 / a,
            c = 1 / o;
          return (
            (_c.elements[0] *= s),
            (_c.elements[1] *= s),
            (_c.elements[2] *= s),
            (_c.elements[4] *= l),
            (_c.elements[5] *= l),
            (_c.elements[6] *= l),
            (_c.elements[8] *= c),
            (_c.elements[9] *= c),
            (_c.elements[10] *= c),
            t.setFromRotationMatrix(_c),
            (n.x = r),
            (n.y = a),
            (n.z = o),
            this
          );
        }
        makePerspective(e, t, n, i, r, a) {
          let o =
            arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : Qs;
          const s = this.elements,
            l = (2 * r) / (t - e),
            c = (2 * r) / (n - i),
            u = (t + e) / (t - e),
            d = (n + i) / (n - i);
          let h, p;
          if (o === Qs) (h = -(a + r) / (a - r)), (p = (-2 * a * r) / (a - r));
          else {
            if (o !== $s)
              throw new Error(
                "THREE.Matrix4.makePerspective(): Invalid coordinate system: " +
                o
              );
            (h = -a / (a - r)), (p = (-a * r) / (a - r));
          }
          return (
            (s[0] = l),
            (s[4] = 0),
            (s[8] = u),
            (s[12] = 0),
            (s[1] = 0),
            (s[5] = c),
            (s[9] = d),
            (s[13] = 0),
            (s[2] = 0),
            (s[6] = 0),
            (s[10] = h),
            (s[14] = p),
            (s[3] = 0),
            (s[7] = 0),
            (s[11] = -1),
            (s[15] = 0),
            this
          );
        }
        makeOrthographic(e, t, n, i, r, a) {
          let o =
            arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : Qs;
          const s = this.elements,
            l = 1 / (t - e),
            c = 1 / (n - i),
            u = 1 / (a - r),
            d = (t + e) * l,
            h = (n + i) * c;
          let p, f;
          if (o === Qs) (p = (a + r) * u), (f = -2 * u);
          else {
            if (o !== $s)
              throw new Error(
                "THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " +
                o
              );
            (p = r * u), (f = -1 * u);
          }
          return (
            (s[0] = 2 * l),
            (s[4] = 0),
            (s[8] = 0),
            (s[12] = -d),
            (s[1] = 0),
            (s[5] = 2 * c),
            (s[9] = 0),
            (s[13] = -h),
            (s[2] = 0),
            (s[6] = 0),
            (s[10] = f),
            (s[14] = -p),
            (s[3] = 0),
            (s[7] = 0),
            (s[11] = 0),
            (s[15] = 1),
            this
          );
        }
        equals(e) {
          const t = this.elements,
            n = e.elements;
          for (let i = 0; i < 16; i++) if (t[i] !== n[i]) return !1;
          return !0;
        }
        fromArray(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          for (let n = 0; n < 16; n++) this.elements[n] = e[n + t];
          return this;
        }
        toArray() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : [],
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
          const n = this.elements;
          return (
            (e[t] = n[0]),
            (e[t + 1] = n[1]),
            (e[t + 2] = n[2]),
            (e[t + 3] = n[3]),
            (e[t + 4] = n[4]),
            (e[t + 5] = n[5]),
            (e[t + 6] = n[6]),
            (e[t + 7] = n[7]),
            (e[t + 8] = n[8]),
            (e[t + 9] = n[9]),
            (e[t + 10] = n[10]),
            (e[t + 11] = n[11]),
            (e[t + 12] = n[12]),
            (e[t + 13] = n[13]),
            (e[t + 14] = n[14]),
            (e[t + 15] = n[15]),
            e
          );
        }
      }
      const vc = new Bl(),
        _c = new gc(),
        yc = new Bl(0, 0, 0),
        xc = new Bl(1, 1, 1),
        bc = new Bl(),
        Sc = new Bl(),
        Ec = new Bl(),
        Mc = new gc(),
        Tc = new zl();
      class wc {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 0,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 0,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : wc.DEFAULT_ORDER;
          (this.isEuler = !0),
            (this._x = e),
            (this._y = t),
            (this._z = n),
            (this._order = i);
        }
        get x() {
          return this._x;
        }
        set x(e) {
          (this._x = e), this._onChangeCallback();
        }
        get y() {
          return this._y;
        }
        set y(e) {
          (this._y = e), this._onChangeCallback();
        }
        get z() {
          return this._z;
        }
        set z(e) {
          (this._z = e), this._onChangeCallback();
        }
        get order() {
          return this._order;
        }
        set order(e) {
          (this._order = e), this._onChangeCallback();
        }
        set(e, t, n) {
          let i =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : this._order;
          return (
            (this._x = e),
            (this._y = t),
            (this._z = n),
            (this._order = i),
            this._onChangeCallback(),
            this
          );
        }
        clone() {
          return new this.constructor(this._x, this._y, this._z, this._order);
        }
        copy(e) {
          return (
            (this._x = e._x),
            (this._y = e._y),
            (this._z = e._z),
            (this._order = e._order),
            this._onChangeCallback(),
            this
          );
        }
        setFromRotationMatrix(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : this._order,
            n =
              !(arguments.length > 2 && void 0 !== arguments[2]) ||
              arguments[2];
          const i = e.elements,
            r = i[0],
            a = i[4],
            o = i[8],
            s = i[1],
            l = i[5],
            c = i[9],
            u = i[2],
            d = i[6],
            h = i[10];
          switch (t) {
            case "XYZ":
              (this._y = Math.asin(al(o, -1, 1))),
                Math.abs(o) < 0.9999999
                  ? ((this._x = Math.atan2(-c, h)),
                    (this._z = Math.atan2(-a, r)))
                  : ((this._x = Math.atan2(d, l)), (this._z = 0));
              break;
            case "YXZ":
              (this._x = Math.asin(-al(c, -1, 1))),
                Math.abs(c) < 0.9999999
                  ? ((this._y = Math.atan2(o, h)), (this._z = Math.atan2(s, l)))
                  : ((this._y = Math.atan2(-u, r)), (this._z = 0));
              break;
            case "ZXY":
              (this._x = Math.asin(al(d, -1, 1))),
                Math.abs(d) < 0.9999999
                  ? ((this._y = Math.atan2(-u, h)),
                    (this._z = Math.atan2(-a, l)))
                  : ((this._y = 0), (this._z = Math.atan2(s, r)));
              break;
            case "ZYX":
              (this._y = Math.asin(-al(u, -1, 1))),
                Math.abs(u) < 0.9999999
                  ? ((this._x = Math.atan2(d, h)), (this._z = Math.atan2(s, r)))
                  : ((this._x = 0), (this._z = Math.atan2(-a, l)));
              break;
            case "YZX":
              (this._z = Math.asin(al(s, -1, 1))),
                Math.abs(s) < 0.9999999
                  ? ((this._x = Math.atan2(-c, l)),
                    (this._y = Math.atan2(-u, r)))
                  : ((this._x = 0), (this._y = Math.atan2(o, h)));
              break;
            case "XZY":
              (this._z = Math.asin(-al(a, -1, 1))),
                Math.abs(a) < 0.9999999
                  ? ((this._x = Math.atan2(d, l)), (this._y = Math.atan2(o, r)))
                  : ((this._x = Math.atan2(-c, h)), (this._y = 0));
              break;
            default:
              console.warn(
                "THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " +
                t
              );
          }
          return (this._order = t), !0 === n && this._onChangeCallback(), this;
        }
        setFromQuaternion(e, t, n) {
          return (
            Mc.makeRotationFromQuaternion(e),
            this.setFromRotationMatrix(Mc, t, n)
          );
        }
        setFromVector3(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : this._order;
          return this.set(e.x, e.y, e.z, t);
        }
        reorder(e) {
          return Tc.setFromEuler(this), this.setFromQuaternion(Tc, e);
        }
        equals(e) {
          return (
            e._x === this._x &&
            e._y === this._y &&
            e._z === this._z &&
            e._order === this._order
          );
        }
        fromArray(e) {
          return (
            (this._x = e[0]),
            (this._y = e[1]),
            (this._z = e[2]),
            void 0 !== e[3] && (this._order = e[3]),
            this._onChangeCallback(),
            this
          );
        }
        toArray() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : [],
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
          return (
            (e[t] = this._x),
            (e[t + 1] = this._y),
            (e[t + 2] = this._z),
            (e[t + 3] = this._order),
            e
          );
        }
        _onChange(e) {
          return (this._onChangeCallback = e), this;
        }
        _onChangeCallback() { }
        *[Symbol.iterator]() {
          yield this._x, yield this._y, yield this._z, yield this._order;
        }
      }
      wc.DEFAULT_ORDER = "XYZ";
      class Ac {
        constructor() {
          this.mask = 1;
        }
        set(e) {
          this.mask = ((1 << e) | 0) >>> 0;
        }
        enable(e) {
          this.mask |= (1 << e) | 0;
        }
        enableAll() {
          this.mask = -1;
        }
        toggle(e) {
          this.mask ^= (1 << e) | 0;
        }
        disable(e) {
          this.mask &= ~((1 << e) | 0);
        }
        disableAll() {
          this.mask = 0;
        }
        test(e) {
          return 0 !== (this.mask & e.mask);
        }
        isEnabled(e) {
          return 0 !== (this.mask & ((1 << e) | 0));
        }
      }
      let Rc = 0;
      const Cc = new Bl(),
        Pc = new zl(),
        Lc = new gc(),
        Nc = new Bl(),
        Dc = new Bl(),
        Uc = new Bl(),
        Ic = new zl(),
        Oc = new Bl(1, 0, 0),
        kc = new Bl(0, 1, 0),
        Fc = new Bl(0, 0, 1),
        zc = { type: "added" },
        Bc = { type: "removed" },
        Vc = { type: "childadded", child: null },
        Hc = { type: "childremoved", child: null };
      class Gc extends el {
        constructor() {
          super(),
            (this.isObject3D = !0),
            Object.defineProperty(this, "id", { value: Rc++ }),
            (this.uuid = rl()),
            (this.name = ""),
            (this.type = "Object3D"),
            (this.parent = null),
            (this.children = []),
            (this.up = Gc.DEFAULT_UP.clone());
          const e = new Bl(),
            t = new wc(),
            n = new zl(),
            i = new Bl(1, 1, 1);
          t._onChange(function () {
            n.setFromEuler(t, !1);
          }),
            n._onChange(function () {
              t.setFromQuaternion(n, void 0, !1);
            }),
            Object.defineProperties(this, {
              position: { configurable: !0, enumerable: !0, value: e },
              rotation: { configurable: !0, enumerable: !0, value: t },
              quaternion: { configurable: !0, enumerable: !0, value: n },
              scale: { configurable: !0, enumerable: !0, value: i },
              modelViewMatrix: { value: new gc() },
              normalMatrix: { value: new pl() },
            }),
            (this.matrix = new gc()),
            (this.matrixWorld = new gc()),
            (this.matrixAutoUpdate = Gc.DEFAULT_MATRIX_AUTO_UPDATE),
            (this.matrixWorldAutoUpdate = Gc.DEFAULT_MATRIX_WORLD_AUTO_UPDATE),
            (this.matrixWorldNeedsUpdate = !1),
            (this.layers = new Ac()),
            (this.visible = !0),
            (this.castShadow = !1),
            (this.receiveShadow = !1),
            (this.frustumCulled = !0),
            (this.renderOrder = 0),
            (this.animations = []),
            (this.userData = {});
        }
        onBeforeShadow() { }
        onAfterShadow() { }
        onBeforeRender() { }
        onAfterRender() { }
        applyMatrix4(e) {
          this.matrixAutoUpdate && this.updateMatrix(),
            this.matrix.premultiply(e),
            this.matrix.decompose(this.position, this.quaternion, this.scale);
        }
        applyQuaternion(e) {
          return this.quaternion.premultiply(e), this;
        }
        setRotationFromAxisAngle(e, t) {
          this.quaternion.setFromAxisAngle(e, t);
        }
        setRotationFromEuler(e) {
          this.quaternion.setFromEuler(e, !0);
        }
        setRotationFromMatrix(e) {
          this.quaternion.setFromRotationMatrix(e);
        }
        setRotationFromQuaternion(e) {
          this.quaternion.copy(e);
        }
        rotateOnAxis(e, t) {
          return Pc.setFromAxisAngle(e, t), this.quaternion.multiply(Pc), this;
        }
        rotateOnWorldAxis(e, t) {
          return (
            Pc.setFromAxisAngle(e, t), this.quaternion.premultiply(Pc), this
          );
        }
        rotateX(e) {
          return this.rotateOnAxis(Oc, e);
        }
        rotateY(e) {
          return this.rotateOnAxis(kc, e);
        }
        rotateZ(e) {
          return this.rotateOnAxis(Fc, e);
        }
        translateOnAxis(e, t) {
          return (
            Cc.copy(e).applyQuaternion(this.quaternion),
            this.position.add(Cc.multiplyScalar(t)),
            this
          );
        }
        translateX(e) {
          return this.translateOnAxis(Oc, e);
        }
        translateY(e) {
          return this.translateOnAxis(kc, e);
        }
        translateZ(e) {
          return this.translateOnAxis(Fc, e);
        }
        localToWorld(e) {
          return (
            this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld)
          );
        }
        worldToLocal(e) {
          return (
            this.updateWorldMatrix(!0, !1),
            e.applyMatrix4(Lc.copy(this.matrixWorld).invert())
          );
        }
        lookAt(e, t, n) {
          e.isVector3 ? Nc.copy(e) : Nc.set(e, t, n);
          const i = this.parent;
          this.updateWorldMatrix(!0, !1),
            Dc.setFromMatrixPosition(this.matrixWorld),
            this.isCamera || this.isLight
              ? Lc.lookAt(Dc, Nc, this.up)
              : Lc.lookAt(Nc, Dc, this.up),
            this.quaternion.setFromRotationMatrix(Lc),
            i &&
            (Lc.extractRotation(i.matrixWorld),
              Pc.setFromRotationMatrix(Lc),
              this.quaternion.premultiply(Pc.invert()));
        }
        add(e) {
          if (arguments.length > 1) {
            for (let e = 0; e < arguments.length; e++) this.add(arguments[e]);
            return this;
          }
          return e === this
            ? (console.error(
              "THREE.Object3D.add: object can't be added as a child of itself.",
              e
            ),
              this)
            : (e && e.isObject3D
              ? (null !== e.parent && e.parent.remove(e),
                (e.parent = this),
                this.children.push(e),
                e.dispatchEvent(zc),
                (Vc.child = e),
                this.dispatchEvent(Vc),
                (Vc.child = null))
              : console.error(
                "THREE.Object3D.add: object not an instance of THREE.Object3D.",
                e
              ),
              this);
        }
        remove(e) {
          if (arguments.length > 1) {
            for (let e = 0; e < arguments.length; e++)
              this.remove(arguments[e]);
            return this;
          }
          const t = this.children.indexOf(e);
          return (
            -1 !== t &&
            ((e.parent = null),
              this.children.splice(t, 1),
              e.dispatchEvent(Bc),
              (Hc.child = e),
              this.dispatchEvent(Hc),
              (Hc.child = null)),
            this
          );
        }
        removeFromParent() {
          const e = this.parent;
          return null !== e && e.remove(this), this;
        }
        clear() {
          return this.remove(...this.children);
        }
        attach(e) {
          return (
            this.updateWorldMatrix(!0, !1),
            Lc.copy(this.matrixWorld).invert(),
            null !== e.parent &&
            (e.parent.updateWorldMatrix(!0, !1),
              Lc.multiply(e.parent.matrixWorld)),
            e.applyMatrix4(Lc),
            this.add(e),
            e.updateWorldMatrix(!1, !0),
            this
          );
        }
        getObjectById(e) {
          return this.getObjectByProperty("id", e);
        }
        getObjectByName(e) {
          return this.getObjectByProperty("name", e);
        }
        getObjectByProperty(e, t) {
          if (this[e] === t) return this;
          for (let n = 0, i = this.children.length; n < i; n++) {
            const i = this.children[n].getObjectByProperty(e, t);
            if (void 0 !== i) return i;
          }
        }
        getObjectsByProperty(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
          this[e] === t && n.push(this);
          const i = this.children;
          for (let r = 0, a = i.length; r < a; r++)
            i[r].getObjectsByProperty(e, t, n);
          return n;
        }
        getWorldPosition(e) {
          return (
            this.updateWorldMatrix(!0, !1),
            e.setFromMatrixPosition(this.matrixWorld)
          );
        }
        getWorldQuaternion(e) {
          return (
            this.updateWorldMatrix(!0, !1),
            this.matrixWorld.decompose(Dc, e, Uc),
            e
          );
        }
        getWorldScale(e) {
          return (
            this.updateWorldMatrix(!0, !1),
            this.matrixWorld.decompose(Dc, Ic, e),
            e
          );
        }
        getWorldDirection(e) {
          this.updateWorldMatrix(!0, !1);
          const t = this.matrixWorld.elements;
          return e.set(t[8], t[9], t[10]).normalize();
        }
        raycast() { }
        traverse(e) {
          e(this);
          const t = this.children;
          for (let n = 0, i = t.length; n < i; n++) t[n].traverse(e);
        }
        traverseVisible(e) {
          if (!1 === this.visible) return;
          e(this);
          const t = this.children;
          for (let n = 0, i = t.length; n < i; n++) t[n].traverseVisible(e);
        }
        traverseAncestors(e) {
          const t = this.parent;
          null !== t && (e(t), t.traverseAncestors(e));
        }
        updateMatrix() {
          this.matrix.compose(this.position, this.quaternion, this.scale),
            (this.matrixWorldNeedsUpdate = !0);
        }
        updateMatrixWorld(e) {
          this.matrixAutoUpdate && this.updateMatrix(),
            (this.matrixWorldNeedsUpdate || e) &&
            (null === this.parent
              ? this.matrixWorld.copy(this.matrix)
              : this.matrixWorld.multiplyMatrices(
                this.parent.matrixWorld,
                this.matrix
              ),
              (this.matrixWorldNeedsUpdate = !1),
              (e = !0));
          const t = this.children;
          for (let n = 0, i = t.length; n < i; n++) {
            const i = t[n];
            (!0 !== i.matrixWorldAutoUpdate && !0 !== e) ||
              i.updateMatrixWorld(e);
          }
        }
        updateWorldMatrix(e, t) {
          const n = this.parent;
          if (
            (!0 === e &&
              null !== n &&
              !0 === n.matrixWorldAutoUpdate &&
              n.updateWorldMatrix(!0, !1),
              this.matrixAutoUpdate && this.updateMatrix(),
              null === this.parent
                ? this.matrixWorld.copy(this.matrix)
                : this.matrixWorld.multiplyMatrices(
                  this.parent.matrixWorld,
                  this.matrix
                ),
              !0 === t)
          ) {
            const e = this.children;
            for (let t = 0, n = e.length; t < n; t++) {
              const n = e[t];
              !0 === n.matrixWorldAutoUpdate && n.updateWorldMatrix(!1, !0);
            }
          }
        }
        toJSON(e) {
          const t = void 0 === e || "string" === typeof e,
            n = {};
          t &&
            ((e = {
              geometries: {},
              materials: {},
              textures: {},
              images: {},
              shapes: {},
              skeletons: {},
              animations: {},
              nodes: {},
            }),
              (n.metadata = {
                version: 4.6,
                type: "Object",
                generator: "Object3D.toJSON",
              }));
          const i = {};
          function r(t, n) {
            return void 0 === t[n.uuid] && (t[n.uuid] = n.toJSON(e)), n.uuid;
          }
          if (
            ((i.uuid = this.uuid),
              (i.type = this.type),
              "" !== this.name && (i.name = this.name),
              !0 === this.castShadow && (i.castShadow = !0),
              !0 === this.receiveShadow && (i.receiveShadow = !0),
              !1 === this.visible && (i.visible = !1),
              !1 === this.frustumCulled && (i.frustumCulled = !1),
              0 !== this.renderOrder && (i.renderOrder = this.renderOrder),
              Object.keys(this.userData).length > 0 &&
              (i.userData = this.userData),
              (i.layers = this.layers.mask),
              (i.matrix = this.matrix.toArray()),
              (i.up = this.up.toArray()),
              !1 === this.matrixAutoUpdate && (i.matrixAutoUpdate = !1),
              this.isInstancedMesh &&
              ((i.type = "InstancedMesh"),
                (i.count = this.count),
                (i.instanceMatrix = this.instanceMatrix.toJSON()),
                null !== this.instanceColor &&
                (i.instanceColor = this.instanceColor.toJSON())),
              this.isBatchedMesh &&
              ((i.type = "BatchedMesh"),
                (i.perObjectFrustumCulled = this.perObjectFrustumCulled),
                (i.sortObjects = this.sortObjects),
                (i.drawRanges = this._drawRanges),
                (i.reservedRanges = this._reservedRanges),
                (i.visibility = this._visibility),
                (i.active = this._active),
                (i.bounds = this._bounds.map((e) => ({
                  boxInitialized: e.boxInitialized,
                  boxMin: e.box.min.toArray(),
                  boxMax: e.box.max.toArray(),
                  sphereInitialized: e.sphereInitialized,
                  sphereRadius: e.sphere.radius,
                  sphereCenter: e.sphere.center.toArray(),
                }))),
                (i.maxGeometryCount = this._maxGeometryCount),
                (i.maxVertexCount = this._maxVertexCount),
                (i.maxIndexCount = this._maxIndexCount),
                (i.geometryInitialized = this._geometryInitialized),
                (i.geometryCount = this._geometryCount),
                (i.matricesTexture = this._matricesTexture.toJSON(e)),
                null !== this.boundingSphere &&
                (i.boundingSphere = {
                  center: i.boundingSphere.center.toArray(),
                  radius: i.boundingSphere.radius,
                }),
                null !== this.boundingBox &&
                (i.boundingBox = {
                  min: i.boundingBox.min.toArray(),
                  max: i.boundingBox.max.toArray(),
                })),
              this.isScene)
          )
            this.background &&
              (this.background.isColor
                ? (i.background = this.background.toJSON())
                : this.background.isTexture &&
                (i.background = this.background.toJSON(e).uuid)),
              this.environment &&
              this.environment.isTexture &&
              !0 !== this.environment.isRenderTargetTexture &&
              (i.environment = this.environment.toJSON(e).uuid);
          else if (this.isMesh || this.isLine || this.isPoints) {
            i.geometry = r(e.geometries, this.geometry);
            const t = this.geometry.parameters;
            if (void 0 !== t && void 0 !== t.shapes) {
              const n = t.shapes;
              if (Array.isArray(n))
                for (let t = 0, i = n.length; t < i; t++) {
                  const i = n[t];
                  r(e.shapes, i);
                }
              else r(e.shapes, n);
            }
          }
          if (
            (this.isSkinnedMesh &&
              ((i.bindMode = this.bindMode),
                (i.bindMatrix = this.bindMatrix.toArray()),
                void 0 !== this.skeleton &&
                (r(e.skeletons, this.skeleton),
                  (i.skeleton = this.skeleton.uuid))),
              void 0 !== this.material)
          )
            if (Array.isArray(this.material)) {
              const t = [];
              for (let n = 0, i = this.material.length; n < i; n++)
                t.push(r(e.materials, this.material[n]));
              i.material = t;
            } else i.material = r(e.materials, this.material);
          if (this.children.length > 0) {
            i.children = [];
            for (let t = 0; t < this.children.length; t++)
              i.children.push(this.children[t].toJSON(e).object);
          }
          if (this.animations.length > 0) {
            i.animations = [];
            for (let t = 0; t < this.animations.length; t++) {
              const n = this.animations[t];
              i.animations.push(r(e.animations, n));
            }
          }
          if (t) {
            const t = a(e.geometries),
              i = a(e.materials),
              r = a(e.textures),
              o = a(e.images),
              s = a(e.shapes),
              l = a(e.skeletons),
              c = a(e.animations),
              u = a(e.nodes);
            t.length > 0 && (n.geometries = t),
              i.length > 0 && (n.materials = i),
              r.length > 0 && (n.textures = r),
              o.length > 0 && (n.images = o),
              s.length > 0 && (n.shapes = s),
              l.length > 0 && (n.skeletons = l),
              c.length > 0 && (n.animations = c),
              u.length > 0 && (n.nodes = u);
          }
          return (n.object = i), n;
          function a(e) {
            const t = [];
            for (const n in e) {
              const i = e[n];
              delete i.metadata, t.push(i);
            }
            return t;
          }
        }
        clone(e) {
          return new this.constructor().copy(this, e);
        }
        copy(e) {
          let t =
            !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (
            ((this.name = e.name),
              this.up.copy(e.up),
              this.position.copy(e.position),
              (this.rotation.order = e.rotation.order),
              this.quaternion.copy(e.quaternion),
              this.scale.copy(e.scale),
              this.matrix.copy(e.matrix),
              this.matrixWorld.copy(e.matrixWorld),
              (this.matrixAutoUpdate = e.matrixAutoUpdate),
              (this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate),
              (this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate),
              (this.layers.mask = e.layers.mask),
              (this.visible = e.visible),
              (this.castShadow = e.castShadow),
              (this.receiveShadow = e.receiveShadow),
              (this.frustumCulled = e.frustumCulled),
              (this.renderOrder = e.renderOrder),
              (this.animations = e.animations.slice()),
              (this.userData = JSON.parse(JSON.stringify(e.userData))),
              !0 === t)
          )
            for (let n = 0; n < e.children.length; n++) {
              const t = e.children[n];
              this.add(t.clone());
            }
          return this;
        }
      }
      (Gc.DEFAULT_UP = new Bl(0, 1, 0)),
        (Gc.DEFAULT_MATRIX_AUTO_UPDATE = !0),
        (Gc.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0);
      const Wc = new Bl(),
        jc = new Bl(),
        Xc = new Bl(),
        Yc = new Bl(),
        qc = new Bl(),
        Kc = new Bl(),
        Zc = new Bl(),
        Jc = new Bl(),
        Qc = new Bl(),
        $c = new Bl();
      class eu {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : new Bl(),
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : new Bl(),
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : new Bl();
          (this.a = e), (this.b = t), (this.c = n);
        }
        static getNormal(e, t, n, i) {
          i.subVectors(n, t), Wc.subVectors(e, t), i.cross(Wc);
          const r = i.lengthSq();
          return r > 0 ? i.multiplyScalar(1 / Math.sqrt(r)) : i.set(0, 0, 0);
        }
        static getBarycoord(e, t, n, i, r) {
          Wc.subVectors(i, t), jc.subVectors(n, t), Xc.subVectors(e, t);
          const a = Wc.dot(Wc),
            o = Wc.dot(jc),
            s = Wc.dot(Xc),
            l = jc.dot(jc),
            c = jc.dot(Xc),
            u = a * l - o * o;
          if (0 === u) return r.set(0, 0, 0), null;
          const d = 1 / u,
            h = (l * s - o * c) * d,
            p = (a * c - o * s) * d;
          return r.set(1 - h - p, p, h);
        }
        static containsPoint(e, t, n, i) {
          return (
            null !== this.getBarycoord(e, t, n, i, Yc) &&
            Yc.x >= 0 &&
            Yc.y >= 0 &&
            Yc.x + Yc.y <= 1
          );
        }
        static getInterpolation(e, t, n, i, r, a, o, s) {
          return null === this.getBarycoord(e, t, n, i, Yc)
            ? ((s.x = 0),
              (s.y = 0),
              "z" in s && (s.z = 0),
              "w" in s && (s.w = 0),
              null)
            : (s.setScalar(0),
              s.addScaledVector(r, Yc.x),
              s.addScaledVector(a, Yc.y),
              s.addScaledVector(o, Yc.z),
              s);
        }
        static isFrontFacing(e, t, n, i) {
          return (
            Wc.subVectors(n, t), jc.subVectors(e, t), Wc.cross(jc).dot(i) < 0
          );
        }
        set(e, t, n) {
          return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
        }
        setFromPointsAndIndices(e, t, n, i) {
          return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[i]), this;
        }
        setFromAttributeAndIndices(e, t, n, i) {
          return (
            this.a.fromBufferAttribute(e, t),
            this.b.fromBufferAttribute(e, n),
            this.c.fromBufferAttribute(e, i),
            this
          );
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(e) {
          return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
        }
        getArea() {
          return (
            Wc.subVectors(this.c, this.b),
            jc.subVectors(this.a, this.b),
            0.5 * Wc.cross(jc).length()
          );
        }
        getMidpoint(e) {
          return e
            .addVectors(this.a, this.b)
            .add(this.c)
            .multiplyScalar(1 / 3);
        }
        getNormal(e) {
          return eu.getNormal(this.a, this.b, this.c, e);
        }
        getPlane(e) {
          return e.setFromCoplanarPoints(this.a, this.b, this.c);
        }
        getBarycoord(e, t) {
          return eu.getBarycoord(e, this.a, this.b, this.c, t);
        }
        getInterpolation(e, t, n, i, r) {
          return eu.getInterpolation(e, this.a, this.b, this.c, t, n, i, r);
        }
        containsPoint(e) {
          return eu.containsPoint(e, this.a, this.b, this.c);
        }
        isFrontFacing(e) {
          return eu.isFrontFacing(this.a, this.b, this.c, e);
        }
        intersectsBox(e) {
          return e.intersectsTriangle(this);
        }
        closestPointToPoint(e, t) {
          const n = this.a,
            i = this.b,
            r = this.c;
          let a, o;
          qc.subVectors(i, n), Kc.subVectors(r, n), Jc.subVectors(e, n);
          const s = qc.dot(Jc),
            l = Kc.dot(Jc);
          if (s <= 0 && l <= 0) return t.copy(n);
          Qc.subVectors(e, i);
          const c = qc.dot(Qc),
            u = Kc.dot(Qc);
          if (c >= 0 && u <= c) return t.copy(i);
          const d = s * u - c * l;
          if (d <= 0 && s >= 0 && c <= 0)
            return (a = s / (s - c)), t.copy(n).addScaledVector(qc, a);
          $c.subVectors(e, r);
          const h = qc.dot($c),
            p = Kc.dot($c);
          if (p >= 0 && h <= p) return t.copy(r);
          const f = h * l - s * p;
          if (f <= 0 && l >= 0 && p <= 0)
            return (o = l / (l - p)), t.copy(n).addScaledVector(Kc, o);
          const m = c * p - h * u;
          if (m <= 0 && u - c >= 0 && h - p >= 0)
            return (
              Zc.subVectors(r, i),
              (o = (u - c) / (u - c + (h - p))),
              t.copy(i).addScaledVector(Zc, o)
            );
          const g = 1 / (m + f + d);
          return (
            (a = f * g),
            (o = d * g),
            t.copy(n).addScaledVector(qc, a).addScaledVector(Kc, o)
          );
        }
        equals(e) {
          return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
        }
      }
      const tu = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074,
      },
        nu = { h: 0, s: 0, l: 0 },
        iu = { h: 0, s: 0, l: 0 };
      function ru(e, t, n) {
        return (
          n < 0 && (n += 1),
          n > 1 && (n -= 1),
          n < 1 / 6
            ? e + 6 * (t - e) * n
            : n < 0.5
              ? t
              : n < 2 / 3
                ? e + 6 * (t - e) * (2 / 3 - n)
                : e
        );
      }
      class au {
        constructor(e, t, n) {
          return (
            (this.isColor = !0),
            (this.r = 1),
            (this.g = 1),
            (this.b = 1),
            this.set(e, t, n)
          );
        }
        set(e, t, n) {
          if (void 0 === t && void 0 === n) {
            const t = e;
            t && t.isColor
              ? this.copy(t)
              : "number" === typeof t
                ? this.setHex(t)
                : "string" === typeof t && this.setStyle(t);
          } else this.setRGB(e, t, n);
          return this;
        }
        setScalar(e) {
          return (this.r = e), (this.g = e), (this.b = e), this;
        }
        setHex(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Bs;
          return (
            (e = Math.floor(e)),
            (this.r = ((e >> 16) & 255) / 255),
            (this.g = ((e >> 8) & 255) / 255),
            (this.b = (255 & e) / 255),
            Ml.toWorkingColorSpace(this, t),
            this
          );
        }
        setRGB(e, t, n) {
          let i =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : Ml.workingColorSpace;
          return (
            (this.r = e),
            (this.g = t),
            (this.b = n),
            Ml.toWorkingColorSpace(this, i),
            this
          );
        }
        setHSL(e, t, n) {
          let i =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : Ml.workingColorSpace;
          if (((e = ol(e, 1)), (t = al(t, 0, 1)), (n = al(n, 0, 1)), 0 === t))
            this.r = this.g = this.b = n;
          else {
            const i = n <= 0.5 ? n * (1 + t) : n + t - n * t,
              r = 2 * n - i;
            (this.r = ru(r, i, e + 1 / 3)),
              (this.g = ru(r, i, e)),
              (this.b = ru(r, i, e - 1 / 3));
          }
          return Ml.toWorkingColorSpace(this, i), this;
        }
        setStyle(e) {
          let t,
            n =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : Bs;
          function i(t) {
            void 0 !== t &&
              parseFloat(t) < 1 &&
              console.warn(
                "THREE.Color: Alpha component of " + e + " will be ignored."
              );
          }
          if ((t = /^(\w+)\(([^\)]*)\)/.exec(e))) {
            let r;
            const a = t[1],
              o = t[2];
            switch (a) {
              case "rgb":
              case "rgba":
                if (
                  (r =
                    /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(
                      o
                    ))
                )
                  return (
                    i(r[4]),
                    this.setRGB(
                      Math.min(255, parseInt(r[1], 10)) / 255,
                      Math.min(255, parseInt(r[2], 10)) / 255,
                      Math.min(255, parseInt(r[3], 10)) / 255,
                      n
                    )
                  );
                if (
                  (r =
                    /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(
                      o
                    ))
                )
                  return (
                    i(r[4]),
                    this.setRGB(
                      Math.min(100, parseInt(r[1], 10)) / 100,
                      Math.min(100, parseInt(r[2], 10)) / 100,
                      Math.min(100, parseInt(r[3], 10)) / 100,
                      n
                    )
                  );
                break;
              case "hsl":
              case "hsla":
                if (
                  (r =
                    /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(
                      o
                    ))
                )
                  return (
                    i(r[4]),
                    this.setHSL(
                      parseFloat(r[1]) / 360,
                      parseFloat(r[2]) / 100,
                      parseFloat(r[3]) / 100,
                      n
                    )
                  );
                break;
              default:
                console.warn("THREE.Color: Unknown color model " + e);
            }
          } else if ((t = /^\#([A-Fa-f\d]+)$/.exec(e))) {
            const i = t[1],
              r = i.length;
            if (3 === r)
              return this.setRGB(
                parseInt(i.charAt(0), 16) / 15,
                parseInt(i.charAt(1), 16) / 15,
                parseInt(i.charAt(2), 16) / 15,
                n
              );
            if (6 === r) return this.setHex(parseInt(i, 16), n);
            console.warn("THREE.Color: Invalid hex color " + e);
          } else if (e && e.length > 0) return this.setColorName(e, n);
          return this;
        }
        setColorName(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Bs;
          const n = tu[e.toLowerCase()];
          return (
            void 0 !== n
              ? this.setHex(n, t)
              : console.warn("THREE.Color: Unknown color " + e),
            this
          );
        }
        clone() {
          return new this.constructor(this.r, this.g, this.b);
        }
        copy(e) {
          return (this.r = e.r), (this.g = e.g), (this.b = e.b), this;
        }
        copySRGBToLinear(e) {
          return (
            (this.r = Tl(e.r)), (this.g = Tl(e.g)), (this.b = Tl(e.b)), this
          );
        }
        copyLinearToSRGB(e) {
          return (
            (this.r = wl(e.r)), (this.g = wl(e.g)), (this.b = wl(e.b)), this
          );
        }
        convertSRGBToLinear() {
          return this.copySRGBToLinear(this), this;
        }
        convertLinearToSRGB() {
          return this.copyLinearToSRGB(this), this;
        }
        getHex() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bs;
          return (
            Ml.fromWorkingColorSpace(ou.copy(this), e),
            65536 * Math.round(al(255 * ou.r, 0, 255)) +
            256 * Math.round(al(255 * ou.g, 0, 255)) +
            Math.round(al(255 * ou.b, 0, 255))
          );
        }
        getHexString() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bs;
          return ("000000" + this.getHex(e).toString(16)).slice(-6);
        }
        getHSL(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : Ml.workingColorSpace;
          Ml.fromWorkingColorSpace(ou.copy(this), t);
          const n = ou.r,
            i = ou.g,
            r = ou.b,
            a = Math.max(n, i, r),
            o = Math.min(n, i, r);
          let s, l;
          const c = (o + a) / 2;
          if (o === a) (s = 0), (l = 0);
          else {
            const e = a - o;
            switch (((l = c <= 0.5 ? e / (a + o) : e / (2 - a - o)), a)) {
              case n:
                s = (i - r) / e + (i < r ? 6 : 0);
                break;
              case i:
                s = (r - n) / e + 2;
                break;
              case r:
                s = (n - i) / e + 4;
            }
            s /= 6;
          }
          return (e.h = s), (e.s = l), (e.l = c), e;
        }
        getRGB(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : Ml.workingColorSpace;
          return (
            Ml.fromWorkingColorSpace(ou.copy(this), t),
            (e.r = ou.r),
            (e.g = ou.g),
            (e.b = ou.b),
            e
          );
        }
        getStyle() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bs;
          Ml.fromWorkingColorSpace(ou.copy(this), e);
          const t = ou.r,
            n = ou.g,
            i = ou.b;
          return e !== Bs
            ? "color("
              .concat(e, " ")
              .concat(t.toFixed(3), " ")
              .concat(n.toFixed(3), " ")
              .concat(i.toFixed(3), ")")
            : "rgb("
              .concat(Math.round(255 * t), ",")
              .concat(Math.round(255 * n), ",")
              .concat(Math.round(255 * i), ")");
        }
        offsetHSL(e, t, n) {
          return this.getHSL(nu), this.setHSL(nu.h + e, nu.s + t, nu.l + n);
        }
        add(e) {
          return (this.r += e.r), (this.g += e.g), (this.b += e.b), this;
        }
        addColors(e, t) {
          return (
            (this.r = e.r + t.r),
            (this.g = e.g + t.g),
            (this.b = e.b + t.b),
            this
          );
        }
        addScalar(e) {
          return (this.r += e), (this.g += e), (this.b += e), this;
        }
        sub(e) {
          return (
            (this.r = Math.max(0, this.r - e.r)),
            (this.g = Math.max(0, this.g - e.g)),
            (this.b = Math.max(0, this.b - e.b)),
            this
          );
        }
        multiply(e) {
          return (this.r *= e.r), (this.g *= e.g), (this.b *= e.b), this;
        }
        multiplyScalar(e) {
          return (this.r *= e), (this.g *= e), (this.b *= e), this;
        }
        lerp(e, t) {
          return (
            (this.r += (e.r - this.r) * t),
            (this.g += (e.g - this.g) * t),
            (this.b += (e.b - this.b) * t),
            this
          );
        }
        lerpColors(e, t, n) {
          return (
            (this.r = e.r + (t.r - e.r) * n),
            (this.g = e.g + (t.g - e.g) * n),
            (this.b = e.b + (t.b - e.b) * n),
            this
          );
        }
        lerpHSL(e, t) {
          this.getHSL(nu), e.getHSL(iu);
          const n = sl(nu.h, iu.h, t),
            i = sl(nu.s, iu.s, t),
            r = sl(nu.l, iu.l, t);
          return this.setHSL(n, i, r), this;
        }
        setFromVector3(e) {
          return (this.r = e.x), (this.g = e.y), (this.b = e.z), this;
        }
        applyMatrix3(e) {
          const t = this.r,
            n = this.g,
            i = this.b,
            r = e.elements;
          return (
            (this.r = r[0] * t + r[3] * n + r[6] * i),
            (this.g = r[1] * t + r[4] * n + r[7] * i),
            (this.b = r[2] * t + r[5] * n + r[8] * i),
            this
          );
        }
        equals(e) {
          return e.r === this.r && e.g === this.g && e.b === this.b;
        }
        fromArray(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          return (
            (this.r = e[t]), (this.g = e[t + 1]), (this.b = e[t + 2]), this
          );
        }
        toArray() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : [],
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
          return (e[t] = this.r), (e[t + 1] = this.g), (e[t + 2] = this.b), e;
        }
        fromBufferAttribute(e, t) {
          return (
            (this.r = e.getX(t)),
            (this.g = e.getY(t)),
            (this.b = e.getZ(t)),
            this
          );
        }
        toJSON() {
          return this.getHex();
        }
        *[Symbol.iterator]() {
          yield this.r, yield this.g, yield this.b;
        }
      }
      const ou = new au();
      au.NAMES = tu;
      let su = 0;
      class lu extends el {
        constructor() {
          super(),
            (this.isMaterial = !0),
            Object.defineProperty(this, "id", { value: su++ }),
            (this.uuid = rl()),
            (this.name = ""),
            (this.type = "Material"),
            (this.blending = 1),
            (this.side = Wo),
            (this.vertexColors = !1),
            (this.opacity = 1),
            (this.transparent = !1),
            (this.alphaHash = !1),
            (this.blendSrc = 204),
            (this.blendDst = 205),
            (this.blendEquation = Xo),
            (this.blendSrcAlpha = null),
            (this.blendDstAlpha = null),
            (this.blendEquationAlpha = null),
            (this.blendColor = new au(0, 0, 0)),
            (this.blendAlpha = 0),
            (this.depthFunc = 3),
            (this.depthTest = !0),
            (this.depthWrite = !0),
            (this.stencilWriteMask = 255),
            (this.stencilFunc = 519),
            (this.stencilRef = 0),
            (this.stencilFuncMask = 255),
            (this.stencilFail = qs),
            (this.stencilZFail = qs),
            (this.stencilZPass = qs),
            (this.stencilWrite = !1),
            (this.clippingPlanes = null),
            (this.clipIntersection = !1),
            (this.clipShadows = !1),
            (this.shadowSide = null),
            (this.colorWrite = !0),
            (this.precision = null),
            (this.polygonOffset = !1),
            (this.polygonOffsetFactor = 0),
            (this.polygonOffsetUnits = 0),
            (this.dithering = !1),
            (this.alphaToCoverage = !1),
            (this.premultipliedAlpha = !1),
            (this.forceSinglePass = !1),
            (this.visible = !0),
            (this.toneMapped = !0),
            (this.userData = {}),
            (this.version = 0),
            (this._alphaTest = 0);
        }
        get alphaTest() {
          return this._alphaTest;
        }
        set alphaTest(e) {
          this._alphaTest > 0 !== e > 0 && this.version++,
            (this._alphaTest = e);
        }
        onBuild() { }
        onBeforeRender() { }
        onBeforeCompile() { }
        customProgramCacheKey() {
          return this.onBeforeCompile.toString();
        }
        setValues(e) {
          if (void 0 !== e)
            for (const t in e) {
              const n = e[t];
              if (void 0 === n) {
                console.warn(
                  "THREE.Material: parameter '".concat(
                    t,
                    "' has value of undefined."
                  )
                );
                continue;
              }
              const i = this[t];
              void 0 !== i
                ? i && i.isColor
                  ? i.set(n)
                  : i && i.isVector3 && n && n.isVector3
                    ? i.copy(n)
                    : (this[t] = n)
                : console.warn(
                  "THREE.Material: '"
                    .concat(t, "' is not a property of THREE.")
                    .concat(this.type, ".")
                );
            }
        }
        toJSON(e) {
          const t = void 0 === e || "string" === typeof e;
          t && (e = { textures: {}, images: {} });
          const n = {
            metadata: {
              version: 4.6,
              type: "Material",
              generator: "Material.toJSON",
            },
          };
          function i(e) {
            const t = [];
            for (const n in e) {
              const i = e[n];
              delete i.metadata, t.push(i);
            }
            return t;
          }
          if (
            ((n.uuid = this.uuid),
              (n.type = this.type),
              "" !== this.name && (n.name = this.name),
              this.color && this.color.isColor && (n.color = this.color.getHex()),
              void 0 !== this.roughness && (n.roughness = this.roughness),
              void 0 !== this.metalness && (n.metalness = this.metalness),
              void 0 !== this.sheen && (n.sheen = this.sheen),
              this.sheenColor &&
              this.sheenColor.isColor &&
              (n.sheenColor = this.sheenColor.getHex()),
              void 0 !== this.sheenRoughness &&
              (n.sheenRoughness = this.sheenRoughness),
              this.emissive &&
              this.emissive.isColor &&
              (n.emissive = this.emissive.getHex()),
              void 0 !== this.emissiveIntensity &&
              1 !== this.emissiveIntensity &&
              (n.emissiveIntensity = this.emissiveIntensity),
              this.specular &&
              this.specular.isColor &&
              (n.specular = this.specular.getHex()),
              void 0 !== this.specularIntensity &&
              (n.specularIntensity = this.specularIntensity),
              this.specularColor &&
              this.specularColor.isColor &&
              (n.specularColor = this.specularColor.getHex()),
              void 0 !== this.shininess && (n.shininess = this.shininess),
              void 0 !== this.clearcoat && (n.clearcoat = this.clearcoat),
              void 0 !== this.clearcoatRoughness &&
              (n.clearcoatRoughness = this.clearcoatRoughness),
              this.clearcoatMap &&
              this.clearcoatMap.isTexture &&
              (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid),
              this.clearcoatRoughnessMap &&
              this.clearcoatRoughnessMap.isTexture &&
              (n.clearcoatRoughnessMap =
                this.clearcoatRoughnessMap.toJSON(e).uuid),
              this.clearcoatNormalMap &&
              this.clearcoatNormalMap.isTexture &&
              ((n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid),
                (n.clearcoatNormalScale = this.clearcoatNormalScale.toArray())),
              void 0 !== this.iridescence && (n.iridescence = this.iridescence),
              void 0 !== this.iridescenceIOR &&
              (n.iridescenceIOR = this.iridescenceIOR),
              void 0 !== this.iridescenceThicknessRange &&
              (n.iridescenceThicknessRange = this.iridescenceThicknessRange),
              this.iridescenceMap &&
              this.iridescenceMap.isTexture &&
              (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid),
              this.iridescenceThicknessMap &&
              this.iridescenceThicknessMap.isTexture &&
              (n.iridescenceThicknessMap =
                this.iridescenceThicknessMap.toJSON(e).uuid),
              void 0 !== this.anisotropy && (n.anisotropy = this.anisotropy),
              void 0 !== this.anisotropyRotation &&
              (n.anisotropyRotation = this.anisotropyRotation),
              this.anisotropyMap &&
              this.anisotropyMap.isTexture &&
              (n.anisotropyMap = this.anisotropyMap.toJSON(e).uuid),
              this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid),
              this.matcap &&
              this.matcap.isTexture &&
              (n.matcap = this.matcap.toJSON(e).uuid),
              this.alphaMap &&
              this.alphaMap.isTexture &&
              (n.alphaMap = this.alphaMap.toJSON(e).uuid),
              this.lightMap &&
              this.lightMap.isTexture &&
              ((n.lightMap = this.lightMap.toJSON(e).uuid),
                (n.lightMapIntensity = this.lightMapIntensity)),
              this.aoMap &&
              this.aoMap.isTexture &&
              ((n.aoMap = this.aoMap.toJSON(e).uuid),
                (n.aoMapIntensity = this.aoMapIntensity)),
              this.bumpMap &&
              this.bumpMap.isTexture &&
              ((n.bumpMap = this.bumpMap.toJSON(e).uuid),
                (n.bumpScale = this.bumpScale)),
              this.normalMap &&
              this.normalMap.isTexture &&
              ((n.normalMap = this.normalMap.toJSON(e).uuid),
                (n.normalMapType = this.normalMapType),
                (n.normalScale = this.normalScale.toArray())),
              this.displacementMap &&
              this.displacementMap.isTexture &&
              ((n.displacementMap = this.displacementMap.toJSON(e).uuid),
                (n.displacementScale = this.displacementScale),
                (n.displacementBias = this.displacementBias)),
              this.roughnessMap &&
              this.roughnessMap.isTexture &&
              (n.roughnessMap = this.roughnessMap.toJSON(e).uuid),
              this.metalnessMap &&
              this.metalnessMap.isTexture &&
              (n.metalnessMap = this.metalnessMap.toJSON(e).uuid),
              this.emissiveMap &&
              this.emissiveMap.isTexture &&
              (n.emissiveMap = this.emissiveMap.toJSON(e).uuid),
              this.specularMap &&
              this.specularMap.isTexture &&
              (n.specularMap = this.specularMap.toJSON(e).uuid),
              this.specularIntensityMap &&
              this.specularIntensityMap.isTexture &&
              (n.specularIntensityMap =
                this.specularIntensityMap.toJSON(e).uuid),
              this.specularColorMap &&
              this.specularColorMap.isTexture &&
              (n.specularColorMap = this.specularColorMap.toJSON(e).uuid),
              this.envMap &&
              this.envMap.isTexture &&
              ((n.envMap = this.envMap.toJSON(e).uuid),
                void 0 !== this.combine && (n.combine = this.combine)),
              void 0 !== this.envMapRotation &&
              (n.envMapRotation = this.envMapRotation.toArray()),
              void 0 !== this.envMapIntensity &&
              (n.envMapIntensity = this.envMapIntensity),
              void 0 !== this.reflectivity &&
              (n.reflectivity = this.reflectivity),
              void 0 !== this.refractionRatio &&
              (n.refractionRatio = this.refractionRatio),
              this.gradientMap &&
              this.gradientMap.isTexture &&
              (n.gradientMap = this.gradientMap.toJSON(e).uuid),
              void 0 !== this.transmission &&
              (n.transmission = this.transmission),
              this.transmissionMap &&
              this.transmissionMap.isTexture &&
              (n.transmissionMap = this.transmissionMap.toJSON(e).uuid),
              void 0 !== this.thickness && (n.thickness = this.thickness),
              this.thicknessMap &&
              this.thicknessMap.isTexture &&
              (n.thicknessMap = this.thicknessMap.toJSON(e).uuid),
              void 0 !== this.attenuationDistance &&
              this.attenuationDistance !== 1 / 0 &&
              (n.attenuationDistance = this.attenuationDistance),
              void 0 !== this.attenuationColor &&
              (n.attenuationColor = this.attenuationColor.getHex()),
              void 0 !== this.size && (n.size = this.size),
              null !== this.shadowSide && (n.shadowSide = this.shadowSide),
              void 0 !== this.sizeAttenuation &&
              (n.sizeAttenuation = this.sizeAttenuation),
              1 !== this.blending && (n.blending = this.blending),
              this.side !== Wo && (n.side = this.side),
              !0 === this.vertexColors && (n.vertexColors = !0),
              this.opacity < 1 && (n.opacity = this.opacity),
              !0 === this.transparent && (n.transparent = !0),
              204 !== this.blendSrc && (n.blendSrc = this.blendSrc),
              205 !== this.blendDst && (n.blendDst = this.blendDst),
              this.blendEquation !== Xo && (n.blendEquation = this.blendEquation),
              null !== this.blendSrcAlpha &&
              (n.blendSrcAlpha = this.blendSrcAlpha),
              null !== this.blendDstAlpha &&
              (n.blendDstAlpha = this.blendDstAlpha),
              null !== this.blendEquationAlpha &&
              (n.blendEquationAlpha = this.blendEquationAlpha),
              this.blendColor &&
              this.blendColor.isColor &&
              (n.blendColor = this.blendColor.getHex()),
              0 !== this.blendAlpha && (n.blendAlpha = this.blendAlpha),
              3 !== this.depthFunc && (n.depthFunc = this.depthFunc),
              !1 === this.depthTest && (n.depthTest = this.depthTest),
              !1 === this.depthWrite && (n.depthWrite = this.depthWrite),
              !1 === this.colorWrite && (n.colorWrite = this.colorWrite),
              255 !== this.stencilWriteMask &&
              (n.stencilWriteMask = this.stencilWriteMask),
              519 !== this.stencilFunc && (n.stencilFunc = this.stencilFunc),
              0 !== this.stencilRef && (n.stencilRef = this.stencilRef),
              255 !== this.stencilFuncMask &&
              (n.stencilFuncMask = this.stencilFuncMask),
              this.stencilFail !== qs && (n.stencilFail = this.stencilFail),
              this.stencilZFail !== qs && (n.stencilZFail = this.stencilZFail),
              this.stencilZPass !== qs && (n.stencilZPass = this.stencilZPass),
              !0 === this.stencilWrite && (n.stencilWrite = this.stencilWrite),
              void 0 !== this.rotation &&
              0 !== this.rotation &&
              (n.rotation = this.rotation),
              !0 === this.polygonOffset && (n.polygonOffset = !0),
              0 !== this.polygonOffsetFactor &&
              (n.polygonOffsetFactor = this.polygonOffsetFactor),
              0 !== this.polygonOffsetUnits &&
              (n.polygonOffsetUnits = this.polygonOffsetUnits),
              void 0 !== this.linewidth &&
              1 !== this.linewidth &&
              (n.linewidth = this.linewidth),
              void 0 !== this.dashSize && (n.dashSize = this.dashSize),
              void 0 !== this.gapSize && (n.gapSize = this.gapSize),
              void 0 !== this.scale && (n.scale = this.scale),
              !0 === this.dithering && (n.dithering = !0),
              this.alphaTest > 0 && (n.alphaTest = this.alphaTest),
              !0 === this.alphaHash && (n.alphaHash = !0),
              !0 === this.alphaToCoverage && (n.alphaToCoverage = !0),
              !0 === this.premultipliedAlpha && (n.premultipliedAlpha = !0),
              !0 === this.forceSinglePass && (n.forceSinglePass = !0),
              !0 === this.wireframe && (n.wireframe = !0),
              this.wireframeLinewidth > 1 &&
              (n.wireframeLinewidth = this.wireframeLinewidth),
              "round" !== this.wireframeLinecap &&
              (n.wireframeLinecap = this.wireframeLinecap),
              "round" !== this.wireframeLinejoin &&
              (n.wireframeLinejoin = this.wireframeLinejoin),
              !0 === this.flatShading && (n.flatShading = !0),
              !1 === this.visible && (n.visible = !1),
              !1 === this.toneMapped && (n.toneMapped = !1),
              !1 === this.fog && (n.fog = !1),
              Object.keys(this.userData).length > 0 &&
              (n.userData = this.userData),
              t)
          ) {
            const t = i(e.textures),
              r = i(e.images);
            t.length > 0 && (n.textures = t), r.length > 0 && (n.images = r);
          }
          return n;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(e) {
          (this.name = e.name),
            (this.blending = e.blending),
            (this.side = e.side),
            (this.vertexColors = e.vertexColors),
            (this.opacity = e.opacity),
            (this.transparent = e.transparent),
            (this.blendSrc = e.blendSrc),
            (this.blendDst = e.blendDst),
            (this.blendEquation = e.blendEquation),
            (this.blendSrcAlpha = e.blendSrcAlpha),
            (this.blendDstAlpha = e.blendDstAlpha),
            (this.blendEquationAlpha = e.blendEquationAlpha),
            this.blendColor.copy(e.blendColor),
            (this.blendAlpha = e.blendAlpha),
            (this.depthFunc = e.depthFunc),
            (this.depthTest = e.depthTest),
            (this.depthWrite = e.depthWrite),
            (this.stencilWriteMask = e.stencilWriteMask),
            (this.stencilFunc = e.stencilFunc),
            (this.stencilRef = e.stencilRef),
            (this.stencilFuncMask = e.stencilFuncMask),
            (this.stencilFail = e.stencilFail),
            (this.stencilZFail = e.stencilZFail),
            (this.stencilZPass = e.stencilZPass),
            (this.stencilWrite = e.stencilWrite);
          const t = e.clippingPlanes;
          let n = null;
          if (null !== t) {
            const e = t.length;
            n = new Array(e);
            for (let i = 0; i !== e; ++i) n[i] = t[i].clone();
          }
          return (
            (this.clippingPlanes = n),
            (this.clipIntersection = e.clipIntersection),
            (this.clipShadows = e.clipShadows),
            (this.shadowSide = e.shadowSide),
            (this.colorWrite = e.colorWrite),
            (this.precision = e.precision),
            (this.polygonOffset = e.polygonOffset),
            (this.polygonOffsetFactor = e.polygonOffsetFactor),
            (this.polygonOffsetUnits = e.polygonOffsetUnits),
            (this.dithering = e.dithering),
            (this.alphaTest = e.alphaTest),
            (this.alphaHash = e.alphaHash),
            (this.alphaToCoverage = e.alphaToCoverage),
            (this.premultipliedAlpha = e.premultipliedAlpha),
            (this.forceSinglePass = e.forceSinglePass),
            (this.visible = e.visible),
            (this.toneMapped = e.toneMapped),
            (this.userData = JSON.parse(JSON.stringify(e.userData))),
            this
          );
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
        set needsUpdate(e) {
          !0 === e && this.version++;
        }
      }
      class cu extends lu {
        constructor(e) {
          super(),
            (this.isMeshBasicMaterial = !0),
            (this.type = "MeshBasicMaterial"),
            (this.color = new au(16777215)),
            (this.map = null),
            (this.lightMap = null),
            (this.lightMapIntensity = 1),
            (this.aoMap = null),
            (this.aoMapIntensity = 1),
            (this.specularMap = null),
            (this.alphaMap = null),
            (this.envMap = null),
            (this.envMapRotation = new wc()),
            (this.combine = Yo),
            (this.reflectivity = 1),
            (this.refractionRatio = 0.98),
            (this.wireframe = !1),
            (this.wireframeLinewidth = 1),
            (this.wireframeLinecap = "round"),
            (this.wireframeLinejoin = "round"),
            (this.fog = !0),
            this.setValues(e);
        }
        copy(e) {
          return (
            super.copy(e),
            this.color.copy(e.color),
            (this.map = e.map),
            (this.lightMap = e.lightMap),
            (this.lightMapIntensity = e.lightMapIntensity),
            (this.aoMap = e.aoMap),
            (this.aoMapIntensity = e.aoMapIntensity),
            (this.specularMap = e.specularMap),
            (this.alphaMap = e.alphaMap),
            (this.envMap = e.envMap),
            this.envMapRotation.copy(e.envMapRotation),
            (this.combine = e.combine),
            (this.reflectivity = e.reflectivity),
            (this.refractionRatio = e.refractionRatio),
            (this.wireframe = e.wireframe),
            (this.wireframeLinewidth = e.wireframeLinewidth),
            (this.wireframeLinecap = e.wireframeLinecap),
            (this.wireframeLinejoin = e.wireframeLinejoin),
            (this.fog = e.fog),
            this
          );
        }
      }
      const uu = new Bl(),
        du = new hl();
      class hu {
        constructor(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          if (Array.isArray(e))
            throw new TypeError(
              "THREE.BufferAttribute: array should be a Typed Array."
            );
          (this.isBufferAttribute = !0),
            (this.name = ""),
            (this.array = e),
            (this.itemSize = t),
            (this.count = void 0 !== e ? e.length / t : 0),
            (this.normalized = n),
            (this.usage = Ks),
            (this._updateRange = { offset: 0, count: -1 }),
            (this.updateRanges = []),
            (this.gpuType = Ss),
            (this.version = 0);
        }
        onUploadCallback() { }
        set needsUpdate(e) {
          !0 === e && this.version++;
        }
        get updateRange() {
          return (
            yl(
              "THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."
            ),
            this._updateRange
          );
        }
        setUsage(e) {
          return (this.usage = e), this;
        }
        addUpdateRange(e, t) {
          this.updateRanges.push({ start: e, count: t });
        }
        clearUpdateRanges() {
          this.updateRanges.length = 0;
        }
        copy(e) {
          return (
            (this.name = e.name),
            (this.array = new e.array.constructor(e.array)),
            (this.itemSize = e.itemSize),
            (this.count = e.count),
            (this.normalized = e.normalized),
            (this.usage = e.usage),
            (this.gpuType = e.gpuType),
            this
          );
        }
        copyAt(e, t, n) {
          (e *= this.itemSize), (n *= t.itemSize);
          for (let i = 0, r = this.itemSize; i < r; i++)
            this.array[e + i] = t.array[n + i];
          return this;
        }
        copyArray(e) {
          return this.array.set(e), this;
        }
        applyMatrix3(e) {
          if (2 === this.itemSize)
            for (let t = 0, n = this.count; t < n; t++)
              du.fromBufferAttribute(this, t),
                du.applyMatrix3(e),
                this.setXY(t, du.x, du.y);
          else if (3 === this.itemSize)
            for (let t = 0, n = this.count; t < n; t++)
              uu.fromBufferAttribute(this, t),
                uu.applyMatrix3(e),
                this.setXYZ(t, uu.x, uu.y, uu.z);
          return this;
        }
        applyMatrix4(e) {
          for (let t = 0, n = this.count; t < n; t++)
            uu.fromBufferAttribute(this, t),
              uu.applyMatrix4(e),
              this.setXYZ(t, uu.x, uu.y, uu.z);
          return this;
        }
        applyNormalMatrix(e) {
          for (let t = 0, n = this.count; t < n; t++)
            uu.fromBufferAttribute(this, t),
              uu.applyNormalMatrix(e),
              this.setXYZ(t, uu.x, uu.y, uu.z);
          return this;
        }
        transformDirection(e) {
          for (let t = 0, n = this.count; t < n; t++)
            uu.fromBufferAttribute(this, t),
              uu.transformDirection(e),
              this.setXYZ(t, uu.x, uu.y, uu.z);
          return this;
        }
        set(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          return this.array.set(e, t), this;
        }
        getComponent(e, t) {
          let n = this.array[e * this.itemSize + t];
          return this.normalized && (n = ul(n, this.array)), n;
        }
        setComponent(e, t, n) {
          return (
            this.normalized && (n = dl(n, this.array)),
            (this.array[e * this.itemSize + t] = n),
            this
          );
        }
        getX(e) {
          let t = this.array[e * this.itemSize];
          return this.normalized && (t = ul(t, this.array)), t;
        }
        setX(e, t) {
          return (
            this.normalized && (t = dl(t, this.array)),
            (this.array[e * this.itemSize] = t),
            this
          );
        }
        getY(e) {
          let t = this.array[e * this.itemSize + 1];
          return this.normalized && (t = ul(t, this.array)), t;
        }
        setY(e, t) {
          return (
            this.normalized && (t = dl(t, this.array)),
            (this.array[e * this.itemSize + 1] = t),
            this
          );
        }
        getZ(e) {
          let t = this.array[e * this.itemSize + 2];
          return this.normalized && (t = ul(t, this.array)), t;
        }
        setZ(e, t) {
          return (
            this.normalized && (t = dl(t, this.array)),
            (this.array[e * this.itemSize + 2] = t),
            this
          );
        }
        getW(e) {
          let t = this.array[e * this.itemSize + 3];
          return this.normalized && (t = ul(t, this.array)), t;
        }
        setW(e, t) {
          return (
            this.normalized && (t = dl(t, this.array)),
            (this.array[e * this.itemSize + 3] = t),
            this
          );
        }
        setXY(e, t, n) {
          return (
            (e *= this.itemSize),
            this.normalized &&
            ((t = dl(t, this.array)), (n = dl(n, this.array))),
            (this.array[e + 0] = t),
            (this.array[e + 1] = n),
            this
          );
        }
        setXYZ(e, t, n, i) {
          return (
            (e *= this.itemSize),
            this.normalized &&
            ((t = dl(t, this.array)),
              (n = dl(n, this.array)),
              (i = dl(i, this.array))),
            (this.array[e + 0] = t),
            (this.array[e + 1] = n),
            (this.array[e + 2] = i),
            this
          );
        }
        setXYZW(e, t, n, i, r) {
          return (
            (e *= this.itemSize),
            this.normalized &&
            ((t = dl(t, this.array)),
              (n = dl(n, this.array)),
              (i = dl(i, this.array)),
              (r = dl(r, this.array))),
            (this.array[e + 0] = t),
            (this.array[e + 1] = n),
            (this.array[e + 2] = i),
            (this.array[e + 3] = r),
            this
          );
        }
        onUpload(e) {
          return (this.onUploadCallback = e), this;
        }
        clone() {
          return new this.constructor(this.array, this.itemSize).copy(this);
        }
        toJSON() {
          const e = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.from(this.array),
            normalized: this.normalized,
          };
          return (
            "" !== this.name && (e.name = this.name),
            this.usage !== Ks && (e.usage = this.usage),
            e
          );
        }
      }
      class pu extends hu {
        constructor(e, t, n) {
          super(new Uint16Array(e), t, n);
        }
      }
      class fu extends hu {
        constructor(e, t, n) {
          super(new Uint32Array(e), t, n);
        }
      }
      class mu extends hu {
        constructor(e, t, n) {
          super(new Float32Array(e), t, n);
        }
      }
      let gu = 0;
      const vu = new gc(),
        _u = new Gc(),
        yu = new Bl(),
        xu = new Gl(),
        bu = new Gl(),
        Su = new Bl();
      class Eu extends el {
        constructor() {
          super(),
            (this.isBufferGeometry = !0),
            Object.defineProperty(this, "id", { value: gu++ }),
            (this.uuid = rl()),
            (this.name = ""),
            (this.type = "BufferGeometry"),
            (this.index = null),
            (this.attributes = {}),
            (this.morphAttributes = {}),
            (this.morphTargetsRelative = !1),
            (this.groups = []),
            (this.boundingBox = null),
            (this.boundingSphere = null),
            (this.drawRange = { start: 0, count: 1 / 0 }),
            (this.userData = {});
        }
        getIndex() {
          return this.index;
        }
        setIndex(e) {
          return (
            Array.isArray(e)
              ? (this.index = new (ml(e) ? fu : pu)(e, 1))
              : (this.index = e),
            this
          );
        }
        getAttribute(e) {
          return this.attributes[e];
        }
        setAttribute(e, t) {
          return (this.attributes[e] = t), this;
        }
        deleteAttribute(e) {
          return delete this.attributes[e], this;
        }
        hasAttribute(e) {
          return void 0 !== this.attributes[e];
        }
        addGroup(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
          this.groups.push({ start: e, count: t, materialIndex: n });
        }
        clearGroups() {
          this.groups = [];
        }
        setDrawRange(e, t) {
          (this.drawRange.start = e), (this.drawRange.count = t);
        }
        applyMatrix4(e) {
          const t = this.attributes.position;
          void 0 !== t && (t.applyMatrix4(e), (t.needsUpdate = !0));
          const n = this.attributes.normal;
          if (void 0 !== n) {
            const t = new pl().getNormalMatrix(e);
            n.applyNormalMatrix(t), (n.needsUpdate = !0);
          }
          const i = this.attributes.tangent;
          return (
            void 0 !== i && (i.transformDirection(e), (i.needsUpdate = !0)),
            null !== this.boundingBox && this.computeBoundingBox(),
            null !== this.boundingSphere && this.computeBoundingSphere(),
            this
          );
        }
        applyQuaternion(e) {
          return vu.makeRotationFromQuaternion(e), this.applyMatrix4(vu), this;
        }
        rotateX(e) {
          return vu.makeRotationX(e), this.applyMatrix4(vu), this;
        }
        rotateY(e) {
          return vu.makeRotationY(e), this.applyMatrix4(vu), this;
        }
        rotateZ(e) {
          return vu.makeRotationZ(e), this.applyMatrix4(vu), this;
        }
        translate(e, t, n) {
          return vu.makeTranslation(e, t, n), this.applyMatrix4(vu), this;
        }
        scale(e, t, n) {
          return vu.makeScale(e, t, n), this.applyMatrix4(vu), this;
        }
        lookAt(e) {
          return (
            _u.lookAt(e), _u.updateMatrix(), this.applyMatrix4(_u.matrix), this
          );
        }
        center() {
          return (
            this.computeBoundingBox(),
            this.boundingBox.getCenter(yu).negate(),
            this.translate(yu.x, yu.y, yu.z),
            this
          );
        }
        setFromPoints(e) {
          const t = [];
          for (let n = 0, i = e.length; n < i; n++) {
            const i = e[n];
            t.push(i.x, i.y, i.z || 0);
          }
          return this.setAttribute("position", new mu(t, 3)), this;
        }
        computeBoundingBox() {
          null === this.boundingBox && (this.boundingBox = new Gl());
          const e = this.attributes.position,
            t = this.morphAttributes.position;
          if (e && e.isGLBufferAttribute)
            return (
              console.error(
                "THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",
                this
              ),
              void this.boundingBox.set(
                new Bl(-1 / 0, -1 / 0, -1 / 0),
                new Bl(1 / 0, 1 / 0, 1 / 0)
              )
            );
          if (void 0 !== e) {
            if ((this.boundingBox.setFromBufferAttribute(e), t))
              for (let n = 0, i = t.length; n < i; n++) {
                const e = t[n];
                xu.setFromBufferAttribute(e),
                  this.morphTargetsRelative
                    ? (Su.addVectors(this.boundingBox.min, xu.min),
                      this.boundingBox.expandByPoint(Su),
                      Su.addVectors(this.boundingBox.max, xu.max),
                      this.boundingBox.expandByPoint(Su))
                    : (this.boundingBox.expandByPoint(xu.min),
                      this.boundingBox.expandByPoint(xu.max));
              }
          } else this.boundingBox.makeEmpty();
          (isNaN(this.boundingBox.min.x) ||
            isNaN(this.boundingBox.min.y) ||
            isNaN(this.boundingBox.min.z)) &&
            console.error(
              'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',
              this
            );
        }
        computeBoundingSphere() {
          null === this.boundingSphere && (this.boundingSphere = new sc());
          const e = this.attributes.position,
            t = this.morphAttributes.position;
          if (e && e.isGLBufferAttribute)
            return (
              console.error(
                "THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",
                this
              ),
              void this.boundingSphere.set(new Bl(), 1 / 0)
            );
          if (e) {
            const n = this.boundingSphere.center;
            if ((xu.setFromBufferAttribute(e), t))
              for (let e = 0, r = t.length; e < r; e++) {
                const n = t[e];
                bu.setFromBufferAttribute(n),
                  this.morphTargetsRelative
                    ? (Su.addVectors(xu.min, bu.min),
                      xu.expandByPoint(Su),
                      Su.addVectors(xu.max, bu.max),
                      xu.expandByPoint(Su))
                    : (xu.expandByPoint(bu.min), xu.expandByPoint(bu.max));
              }
            xu.getCenter(n);
            let i = 0;
            for (let t = 0, r = e.count; t < r; t++)
              Su.fromBufferAttribute(e, t),
                (i = Math.max(i, n.distanceToSquared(Su)));
            if (t)
              for (let r = 0, a = t.length; r < a; r++) {
                const a = t[r],
                  o = this.morphTargetsRelative;
                for (let t = 0, r = a.count; t < r; t++)
                  Su.fromBufferAttribute(a, t),
                    o && (yu.fromBufferAttribute(e, t), Su.add(yu)),
                    (i = Math.max(i, n.distanceToSquared(Su)));
              }
            (this.boundingSphere.radius = Math.sqrt(i)),
              isNaN(this.boundingSphere.radius) &&
              console.error(
                'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',
                this
              );
          }
        }
        computeTangents() {
          const e = this.index,
            t = this.attributes;
          if (
            null === e ||
            void 0 === t.position ||
            void 0 === t.normal ||
            void 0 === t.uv
          )
            return void console.error(
              "THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)"
            );
          const n = t.position,
            i = t.normal,
            r = t.uv;
          !1 === this.hasAttribute("tangent") &&
            this.setAttribute(
              "tangent",
              new hu(new Float32Array(4 * n.count), 4)
            );
          const a = this.getAttribute("tangent"),
            o = [],
            s = [];
          for (let E = 0; E < n.count; E++)
            (o[E] = new Bl()), (s[E] = new Bl());
          const l = new Bl(),
            c = new Bl(),
            u = new Bl(),
            d = new hl(),
            h = new hl(),
            p = new hl(),
            f = new Bl(),
            m = new Bl();
          function g(e, t, i) {
            l.fromBufferAttribute(n, e),
              c.fromBufferAttribute(n, t),
              u.fromBufferAttribute(n, i),
              d.fromBufferAttribute(r, e),
              h.fromBufferAttribute(r, t),
              p.fromBufferAttribute(r, i),
              c.sub(l),
              u.sub(l),
              h.sub(d),
              p.sub(d);
            const a = 1 / (h.x * p.y - p.x * h.y);
            isFinite(a) &&
              (f
                .copy(c)
                .multiplyScalar(p.y)
                .addScaledVector(u, -h.y)
                .multiplyScalar(a),
                m
                  .copy(u)
                  .multiplyScalar(h.x)
                  .addScaledVector(c, -p.x)
                  .multiplyScalar(a),
                o[e].add(f),
                o[t].add(f),
                o[i].add(f),
                s[e].add(m),
                s[t].add(m),
                s[i].add(m));
          }
          let v = this.groups;
          0 === v.length && (v = [{ start: 0, count: e.count }]);
          for (let E = 0, M = v.length; E < M; ++E) {
            const t = v[E],
              n = t.start;
            for (let i = n, r = n + t.count; i < r; i += 3)
              g(e.getX(i + 0), e.getX(i + 1), e.getX(i + 2));
          }
          const _ = new Bl(),
            y = new Bl(),
            x = new Bl(),
            b = new Bl();
          function S(e) {
            x.fromBufferAttribute(i, e), b.copy(x);
            const t = o[e];
            _.copy(t),
              _.sub(x.multiplyScalar(x.dot(t))).normalize(),
              y.crossVectors(b, t);
            const n = y.dot(s[e]) < 0 ? -1 : 1;
            a.setXYZW(e, _.x, _.y, _.z, n);
          }
          for (let E = 0, M = v.length; E < M; ++E) {
            const t = v[E],
              n = t.start;
            for (let i = n, r = n + t.count; i < r; i += 3)
              S(e.getX(i + 0)), S(e.getX(i + 1)), S(e.getX(i + 2));
          }
        }
        computeVertexNormals() {
          const e = this.index,
            t = this.getAttribute("position");
          if (void 0 !== t) {
            let n = this.getAttribute("normal");
            if (void 0 === n)
              (n = new hu(new Float32Array(3 * t.count), 3)),
                this.setAttribute("normal", n);
            else for (let e = 0, t = n.count; e < t; e++) n.setXYZ(e, 0, 0, 0);
            const i = new Bl(),
              r = new Bl(),
              a = new Bl(),
              o = new Bl(),
              s = new Bl(),
              l = new Bl(),
              c = new Bl(),
              u = new Bl();
            if (e)
              for (let d = 0, h = e.count; d < h; d += 3) {
                const h = e.getX(d + 0),
                  p = e.getX(d + 1),
                  f = e.getX(d + 2);
                i.fromBufferAttribute(t, h),
                  r.fromBufferAttribute(t, p),
                  a.fromBufferAttribute(t, f),
                  c.subVectors(a, r),
                  u.subVectors(i, r),
                  c.cross(u),
                  o.fromBufferAttribute(n, h),
                  s.fromBufferAttribute(n, p),
                  l.fromBufferAttribute(n, f),
                  o.add(c),
                  s.add(c),
                  l.add(c),
                  n.setXYZ(h, o.x, o.y, o.z),
                  n.setXYZ(p, s.x, s.y, s.z),
                  n.setXYZ(f, l.x, l.y, l.z);
              }
            else
              for (let e = 0, d = t.count; e < d; e += 3)
                i.fromBufferAttribute(t, e + 0),
                  r.fromBufferAttribute(t, e + 1),
                  a.fromBufferAttribute(t, e + 2),
                  c.subVectors(a, r),
                  u.subVectors(i, r),
                  c.cross(u),
                  n.setXYZ(e + 0, c.x, c.y, c.z),
                  n.setXYZ(e + 1, c.x, c.y, c.z),
                  n.setXYZ(e + 2, c.x, c.y, c.z);
            this.normalizeNormals(), (n.needsUpdate = !0);
          }
        }
        normalizeNormals() {
          const e = this.attributes.normal;
          for (let t = 0, n = e.count; t < n; t++)
            Su.fromBufferAttribute(e, t),
              Su.normalize(),
              e.setXYZ(t, Su.x, Su.y, Su.z);
        }
        toNonIndexed() {
          function e(e, t) {
            const n = e.array,
              i = e.itemSize,
              r = e.normalized,
              a = new n.constructor(t.length * i);
            let o = 0,
              s = 0;
            for (let l = 0, c = t.length; l < c; l++) {
              o = e.isInterleavedBufferAttribute
                ? t[l] * e.data.stride + e.offset
                : t[l] * i;
              for (let e = 0; e < i; e++) a[s++] = n[o++];
            }
            return new hu(a, i, r);
          }
          if (null === this.index)
            return (
              console.warn(
                "THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."
              ),
              this
            );
          const t = new Eu(),
            n = this.index.array,
            i = this.attributes;
          for (const o in i) {
            const r = e(i[o], n);
            t.setAttribute(o, r);
          }
          const r = this.morphAttributes;
          for (const o in r) {
            const i = [],
              a = r[o];
            for (let t = 0, r = a.length; t < r; t++) {
              const r = e(a[t], n);
              i.push(r);
            }
            t.morphAttributes[o] = i;
          }
          t.morphTargetsRelative = this.morphTargetsRelative;
          const a = this.groups;
          for (let o = 0, s = a.length; o < s; o++) {
            const e = a[o];
            t.addGroup(e.start, e.count, e.materialIndex);
          }
          return t;
        }
        toJSON() {
          const e = {
            metadata: {
              version: 4.6,
              type: "BufferGeometry",
              generator: "BufferGeometry.toJSON",
            },
          };
          if (
            ((e.uuid = this.uuid),
              (e.type = this.type),
              "" !== this.name && (e.name = this.name),
              Object.keys(this.userData).length > 0 &&
              (e.userData = this.userData),
              void 0 !== this.parameters)
          ) {
            const t = this.parameters;
            for (const n in t) void 0 !== t[n] && (e[n] = t[n]);
            return e;
          }
          e.data = { attributes: {} };
          const t = this.index;
          null !== t &&
            (e.data.index = {
              type: t.array.constructor.name,
              array: Array.prototype.slice.call(t.array),
            });
          const n = this.attributes;
          for (const s in n) {
            const t = n[s];
            e.data.attributes[s] = t.toJSON(e.data);
          }
          const i = {};
          let r = !1;
          for (const s in this.morphAttributes) {
            const t = this.morphAttributes[s],
              n = [];
            for (let i = 0, r = t.length; i < r; i++) {
              const r = t[i];
              n.push(r.toJSON(e.data));
            }
            n.length > 0 && ((i[s] = n), (r = !0));
          }
          r &&
            ((e.data.morphAttributes = i),
              (e.data.morphTargetsRelative = this.morphTargetsRelative));
          const a = this.groups;
          a.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(a)));
          const o = this.boundingSphere;
          return (
            null !== o &&
            (e.data.boundingSphere = {
              center: o.center.toArray(),
              radius: o.radius,
            }),
            e
          );
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(e) {
          (this.index = null),
            (this.attributes = {}),
            (this.morphAttributes = {}),
            (this.groups = []),
            (this.boundingBox = null),
            (this.boundingSphere = null);
          const t = {};
          this.name = e.name;
          const n = e.index;
          null !== n && this.setIndex(n.clone(t));
          const i = e.attributes;
          for (const l in i) {
            const e = i[l];
            this.setAttribute(l, e.clone(t));
          }
          const r = e.morphAttributes;
          for (const l in r) {
            const e = [],
              n = r[l];
            for (let i = 0, r = n.length; i < r; i++) e.push(n[i].clone(t));
            this.morphAttributes[l] = e;
          }
          this.morphTargetsRelative = e.morphTargetsRelative;
          const a = e.groups;
          for (let l = 0, c = a.length; l < c; l++) {
            const e = a[l];
            this.addGroup(e.start, e.count, e.materialIndex);
          }
          const o = e.boundingBox;
          null !== o && (this.boundingBox = o.clone());
          const s = e.boundingSphere;
          return (
            null !== s && (this.boundingSphere = s.clone()),
            (this.drawRange.start = e.drawRange.start),
            (this.drawRange.count = e.drawRange.count),
            (this.userData = e.userData),
            this
          );
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
      }
      const Mu = new gc(),
        Tu = new mc(),
        wu = new sc(),
        Au = new Bl(),
        Ru = new Bl(),
        Cu = new Bl(),
        Pu = new Bl(),
        Lu = new Bl(),
        Nu = new Bl(),
        Du = new hl(),
        Uu = new hl(),
        Iu = new hl(),
        Ou = new Bl(),
        ku = new Bl(),
        Fu = new Bl(),
        zu = new Bl(),
        Bu = new Bl();
      class Vu extends Gc {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : new Eu(),
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : new cu();
          super(),
            (this.isMesh = !0),
            (this.type = "Mesh"),
            (this.geometry = e),
            (this.material = t),
            this.updateMorphTargets();
        }
        copy(e, t) {
          return (
            super.copy(e, t),
            void 0 !== e.morphTargetInfluences &&
            (this.morphTargetInfluences = e.morphTargetInfluences.slice()),
            void 0 !== e.morphTargetDictionary &&
            (this.morphTargetDictionary = Object.assign(
              {},
              e.morphTargetDictionary
            )),
            (this.material = Array.isArray(e.material)
              ? e.material.slice()
              : e.material),
            (this.geometry = e.geometry),
            this
          );
        }
        updateMorphTargets() {
          const e = this.geometry.morphAttributes,
            t = Object.keys(e);
          if (t.length > 0) {
            const n = e[t[0]];
            if (void 0 !== n) {
              (this.morphTargetInfluences = []),
                (this.morphTargetDictionary = {});
              for (let e = 0, t = n.length; e < t; e++) {
                const t = n[e].name || String(e);
                this.morphTargetInfluences.push(0),
                  (this.morphTargetDictionary[t] = e);
              }
            }
          }
        }
        getVertexPosition(e, t) {
          const n = this.geometry,
            i = n.attributes.position,
            r = n.morphAttributes.position,
            a = n.morphTargetsRelative;
          t.fromBufferAttribute(i, e);
          const o = this.morphTargetInfluences;
          if (r && o) {
            Nu.set(0, 0, 0);
            for (let n = 0, i = r.length; n < i; n++) {
              const i = o[n],
                s = r[n];
              0 !== i &&
                (Lu.fromBufferAttribute(s, e),
                  a
                    ? Nu.addScaledVector(Lu, i)
                    : Nu.addScaledVector(Lu.sub(t), i));
            }
            t.add(Nu);
          }
          return t;
        }
        raycast(e, t) {
          const n = this.geometry,
            i = this.material,
            r = this.matrixWorld;
          if (void 0 !== i) {
            if (
              (null === n.boundingSphere && n.computeBoundingSphere(),
                wu.copy(n.boundingSphere),
                wu.applyMatrix4(r),
                Tu.copy(e.ray).recast(e.near),
                !1 === wu.containsPoint(Tu.origin))
            ) {
              if (null === Tu.intersectSphere(wu, Au)) return;
              if (Tu.origin.distanceToSquared(Au) > (e.far - e.near) ** 2)
                return;
            }
            Mu.copy(r).invert(),
              Tu.copy(e.ray).applyMatrix4(Mu),
              (null !== n.boundingBox &&
                !1 === Tu.intersectsBox(n.boundingBox)) ||
              this._computeIntersections(e, t, Tu);
          }
        }
        _computeIntersections(e, t, n) {
          let i;
          const r = this.geometry,
            a = this.material,
            o = r.index,
            s = r.attributes.position,
            l = r.attributes.uv,
            c = r.attributes.uv1,
            u = r.attributes.normal,
            d = r.groups,
            h = r.drawRange;
          if (null !== o)
            if (Array.isArray(a))
              for (let p = 0, f = d.length; p < f; p++) {
                const r = d[p],
                  s = a[r.materialIndex];
                for (
                  let a = Math.max(r.start, h.start),
                  d = Math.min(
                    o.count,
                    Math.min(r.start + r.count, h.start + h.count)
                  );
                  a < d;
                  a += 3
                ) {
                  (i = Hu(
                    this,
                    s,
                    e,
                    n,
                    l,
                    c,
                    u,
                    o.getX(a),
                    o.getX(a + 1),
                    o.getX(a + 2)
                  )),
                    i &&
                    ((i.faceIndex = Math.floor(a / 3)),
                      (i.face.materialIndex = r.materialIndex),
                      t.push(i));
                }
              }
            else {
              for (
                let r = Math.max(0, h.start),
                s = Math.min(o.count, h.start + h.count);
                r < s;
                r += 3
              ) {
                (i = Hu(
                  this,
                  a,
                  e,
                  n,
                  l,
                  c,
                  u,
                  o.getX(r),
                  o.getX(r + 1),
                  o.getX(r + 2)
                )),
                  i && ((i.faceIndex = Math.floor(r / 3)), t.push(i));
              }
            }
          else if (void 0 !== s)
            if (Array.isArray(a))
              for (let p = 0, f = d.length; p < f; p++) {
                const r = d[p],
                  o = a[r.materialIndex];
                for (
                  let a = Math.max(r.start, h.start),
                  d = Math.min(
                    s.count,
                    Math.min(r.start + r.count, h.start + h.count)
                  );
                  a < d;
                  a += 3
                ) {
                  (i = Hu(this, o, e, n, l, c, u, a, a + 1, a + 2)),
                    i &&
                    ((i.faceIndex = Math.floor(a / 3)),
                      (i.face.materialIndex = r.materialIndex),
                      t.push(i));
                }
              }
            else {
              for (
                let r = Math.max(0, h.start),
                o = Math.min(s.count, h.start + h.count);
                r < o;
                r += 3
              ) {
                (i = Hu(this, a, e, n, l, c, u, r, r + 1, r + 2)),
                  i && ((i.faceIndex = Math.floor(r / 3)), t.push(i));
              }
            }
        }
      }
      function Hu(e, t, n, i, r, a, o, s, l, c) {
        e.getVertexPosition(s, Ru),
          e.getVertexPosition(l, Cu),
          e.getVertexPosition(c, Pu);
        const u = (function (e, t, n, i, r, a, o, s) {
          let l;
          if (
            ((l =
              t.side === jo
                ? i.intersectTriangle(o, a, r, !0, s)
                : i.intersectTriangle(r, a, o, t.side === Wo, s)),
              null === l)
          )
            return null;
          Bu.copy(s), Bu.applyMatrix4(e.matrixWorld);
          const c = n.ray.origin.distanceTo(Bu);
          return c < n.near || c > n.far
            ? null
            : { distance: c, point: Bu.clone(), object: e };
        })(e, t, n, i, Ru, Cu, Pu, zu);
        if (u) {
          r &&
            (Du.fromBufferAttribute(r, s),
              Uu.fromBufferAttribute(r, l),
              Iu.fromBufferAttribute(r, c),
              (u.uv = eu.getInterpolation(zu, Ru, Cu, Pu, Du, Uu, Iu, new hl()))),
            a &&
            (Du.fromBufferAttribute(a, s),
              Uu.fromBufferAttribute(a, l),
              Iu.fromBufferAttribute(a, c),
              (u.uv1 = eu.getInterpolation(
                zu,
                Ru,
                Cu,
                Pu,
                Du,
                Uu,
                Iu,
                new hl()
              ))),
            o &&
            (Ou.fromBufferAttribute(o, s),
              ku.fromBufferAttribute(o, l),
              Fu.fromBufferAttribute(o, c),
              (u.normal = eu.getInterpolation(
                zu,
                Ru,
                Cu,
                Pu,
                Ou,
                ku,
                Fu,
                new Bl()
              )),
              u.normal.dot(i.direction) > 0 && u.normal.multiplyScalar(-1));
          const e = { a: s, b: l, c: c, normal: new Bl(), materialIndex: 0 };
          eu.getNormal(Ru, Cu, Pu, e.normal), (u.face = e);
        }
        return u;
      }
      class Gu extends Eu {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 1,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 1,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 1,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : 1,
            r =
              arguments.length > 4 && void 0 !== arguments[4]
                ? arguments[4]
                : 1,
            a =
              arguments.length > 5 && void 0 !== arguments[5]
                ? arguments[5]
                : 1;
          super(),
            (this.type = "BoxGeometry"),
            (this.parameters = {
              width: e,
              height: t,
              depth: n,
              widthSegments: i,
              heightSegments: r,
              depthSegments: a,
            });
          const o = this;
          (i = Math.floor(i)), (r = Math.floor(r)), (a = Math.floor(a));
          const s = [],
            l = [],
            c = [],
            u = [];
          let d = 0,
            h = 0;
          function p(e, t, n, i, r, a, p, f, m, g, v) {
            const _ = a / m,
              y = p / g,
              x = a / 2,
              b = p / 2,
              S = f / 2,
              E = m + 1,
              M = g + 1;
            let T = 0,
              w = 0;
            const A = new Bl();
            for (let o = 0; o < M; o++) {
              const a = o * y - b;
              for (let s = 0; s < E; s++) {
                const d = s * _ - x;
                (A[e] = d * i),
                  (A[t] = a * r),
                  (A[n] = S),
                  l.push(A.x, A.y, A.z),
                  (A[e] = 0),
                  (A[t] = 0),
                  (A[n] = f > 0 ? 1 : -1),
                  c.push(A.x, A.y, A.z),
                  u.push(s / m),
                  u.push(1 - o / g),
                  (T += 1);
              }
            }
            for (let o = 0; o < g; o++)
              for (let e = 0; e < m; e++) {
                const t = d + e + E * o,
                  n = d + e + E * (o + 1),
                  i = d + (e + 1) + E * (o + 1),
                  r = d + (e + 1) + E * o;
                s.push(t, n, r), s.push(n, i, r), (w += 6);
              }
            o.addGroup(h, w, v), (h += w), (d += T);
          }
          p("z", "y", "x", -1, -1, n, t, e, a, r, 0),
            p("z", "y", "x", 1, -1, n, t, -e, a, r, 1),
            p("x", "z", "y", 1, 1, e, n, t, i, a, 2),
            p("x", "z", "y", 1, -1, e, n, -t, i, a, 3),
            p("x", "y", "z", 1, -1, e, t, n, i, r, 4),
            p("x", "y", "z", -1, -1, e, t, -n, i, r, 5),
            this.setIndex(s),
            this.setAttribute("position", new mu(l, 3)),
            this.setAttribute("normal", new mu(c, 3)),
            this.setAttribute("uv", new mu(u, 2));
        }
        copy(e) {
          return (
            super.copy(e),
            (this.parameters = Object.assign({}, e.parameters)),
            this
          );
        }
        static fromJSON(e) {
          return new Gu(
            e.width,
            e.height,
            e.depth,
            e.widthSegments,
            e.heightSegments,
            e.depthSegments
          );
        }
      }
      function Wu(e) {
        const t = {};
        for (const n in e) {
          t[n] = {};
          for (const i in e[n]) {
            const r = e[n][i];
            r &&
              (r.isColor ||
                r.isMatrix3 ||
                r.isMatrix4 ||
                r.isVector2 ||
                r.isVector3 ||
                r.isVector4 ||
                r.isTexture ||
                r.isQuaternion)
              ? r.isRenderTargetTexture
                ? (console.warn(
                  "UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."
                ),
                  (t[n][i] = null))
                : (t[n][i] = r.clone())
              : Array.isArray(r)
                ? (t[n][i] = r.slice())
                : (t[n][i] = r);
          }
        }
        return t;
      }
      function ju(e) {
        const t = {};
        for (let n = 0; n < e.length; n++) {
          const i = Wu(e[n]);
          for (const e in i) t[e] = i[e];
        }
        return t;
      }
      function Xu(e) {
        return null === e.getRenderTarget()
          ? e.outputColorSpace
          : Ml.workingColorSpace;
      }
      const Yu = { clone: Wu, merge: ju };
      class qu extends lu {
        constructor(e) {
          super(),
            (this.isShaderMaterial = !0),
            (this.type = "ShaderMaterial"),
            (this.defines = {}),
            (this.uniforms = {}),
            (this.uniformsGroups = []),
            (this.vertexShader =
              "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"),
            (this.fragmentShader =
              "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}"),
            (this.linewidth = 1),
            (this.wireframe = !1),
            (this.wireframeLinewidth = 1),
            (this.fog = !1),
            (this.lights = !1),
            (this.clipping = !1),
            (this.forceSinglePass = !0),
            (this.extensions = {
              derivatives: !1,
              fragDepth: !1,
              drawBuffers: !1,
              shaderTextureLOD: !1,
              clipCullDistance: !1,
              multiDraw: !1,
            }),
            (this.defaultAttributeValues = {
              color: [1, 1, 1],
              uv: [0, 0],
              uv1: [0, 0],
            }),
            (this.index0AttributeName = void 0),
            (this.uniformsNeedUpdate = !1),
            (this.glslVersion = null),
            void 0 !== e && this.setValues(e);
        }
        copy(e) {
          return (
            super.copy(e),
            (this.fragmentShader = e.fragmentShader),
            (this.vertexShader = e.vertexShader),
            (this.uniforms = Wu(e.uniforms)),
            (this.uniformsGroups = (function (e) {
              const t = [];
              for (let n = 0; n < e.length; n++) t.push(e[n].clone());
              return t;
            })(e.uniformsGroups)),
            (this.defines = Object.assign({}, e.defines)),
            (this.wireframe = e.wireframe),
            (this.wireframeLinewidth = e.wireframeLinewidth),
            (this.fog = e.fog),
            (this.lights = e.lights),
            (this.clipping = e.clipping),
            (this.extensions = Object.assign({}, e.extensions)),
            (this.glslVersion = e.glslVersion),
            this
          );
        }
        toJSON(e) {
          const t = super.toJSON(e);
          (t.glslVersion = this.glslVersion), (t.uniforms = {});
          for (const i in this.uniforms) {
            const n = this.uniforms[i].value;
            n && n.isTexture
              ? (t.uniforms[i] = { type: "t", value: n.toJSON(e).uuid })
              : n && n.isColor
                ? (t.uniforms[i] = { type: "c", value: n.getHex() })
                : n && n.isVector2
                  ? (t.uniforms[i] = { type: "v2", value: n.toArray() })
                  : n && n.isVector3
                    ? (t.uniforms[i] = { type: "v3", value: n.toArray() })
                    : n && n.isVector4
                      ? (t.uniforms[i] = { type: "v4", value: n.toArray() })
                      : n && n.isMatrix3
                        ? (t.uniforms[i] = { type: "m3", value: n.toArray() })
                        : n && n.isMatrix4
                          ? (t.uniforms[i] = { type: "m4", value: n.toArray() })
                          : (t.uniforms[i] = { value: n });
          }
          Object.keys(this.defines).length > 0 && (t.defines = this.defines),
            (t.vertexShader = this.vertexShader),
            (t.fragmentShader = this.fragmentShader),
            (t.lights = this.lights),
            (t.clipping = this.clipping);
          const n = {};
          for (const i in this.extensions)
            !0 === this.extensions[i] && (n[i] = !0);
          return Object.keys(n).length > 0 && (t.extensions = n), t;
        }
      }
      class Ku extends Gc {
        constructor() {
          super(),
            (this.isCamera = !0),
            (this.type = "Camera"),
            (this.matrixWorldInverse = new gc()),
            (this.projectionMatrix = new gc()),
            (this.projectionMatrixInverse = new gc()),
            (this.coordinateSystem = Qs);
        }
        copy(e, t) {
          return (
            super.copy(e, t),
            this.matrixWorldInverse.copy(e.matrixWorldInverse),
            this.projectionMatrix.copy(e.projectionMatrix),
            this.projectionMatrixInverse.copy(e.projectionMatrixInverse),
            (this.coordinateSystem = e.coordinateSystem),
            this
          );
        }
        getWorldDirection(e) {
          return super.getWorldDirection(e).negate();
        }
        updateMatrixWorld(e) {
          super.updateMatrixWorld(e),
            this.matrixWorldInverse.copy(this.matrixWorld).invert();
        }
        updateWorldMatrix(e, t) {
          super.updateWorldMatrix(e, t),
            this.matrixWorldInverse.copy(this.matrixWorld).invert();
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      const Zu = new Bl(),
        Ju = new hl(),
        Qu = new hl();
      class $u extends Ku {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 50,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 1,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 0.1,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : 2e3;
          super(),
            (this.isPerspectiveCamera = !0),
            (this.type = "PerspectiveCamera"),
            (this.fov = e),
            (this.zoom = 1),
            (this.near = n),
            (this.far = i),
            (this.focus = 10),
            (this.aspect = t),
            (this.view = null),
            (this.filmGauge = 35),
            (this.filmOffset = 0),
            this.updateProjectionMatrix();
        }
        copy(e, t) {
          return (
            super.copy(e, t),
            (this.fov = e.fov),
            (this.zoom = e.zoom),
            (this.near = e.near),
            (this.far = e.far),
            (this.focus = e.focus),
            (this.aspect = e.aspect),
            (this.view = null === e.view ? null : Object.assign({}, e.view)),
            (this.filmGauge = e.filmGauge),
            (this.filmOffset = e.filmOffset),
            this
          );
        }
        setFocalLength(e) {
          const t = (0.5 * this.getFilmHeight()) / e;
          (this.fov = 2 * il * Math.atan(t)), this.updateProjectionMatrix();
        }
        getFocalLength() {
          const e = Math.tan(0.5 * nl * this.fov);
          return (0.5 * this.getFilmHeight()) / e;
        }
        getEffectiveFOV() {
          return 2 * il * Math.atan(Math.tan(0.5 * nl * this.fov) / this.zoom);
        }
        getFilmWidth() {
          return this.filmGauge * Math.min(this.aspect, 1);
        }
        getFilmHeight() {
          return this.filmGauge / Math.max(this.aspect, 1);
        }
        getViewBounds(e, t, n) {
          Zu.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse),
            t.set(Zu.x, Zu.y).multiplyScalar(-e / Zu.z),
            Zu.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse),
            n.set(Zu.x, Zu.y).multiplyScalar(-e / Zu.z);
        }
        getViewSize(e, t) {
          return this.getViewBounds(e, Ju, Qu), t.subVectors(Qu, Ju);
        }
        setViewOffset(e, t, n, i, r, a) {
          (this.aspect = e / t),
            null === this.view &&
            (this.view = {
              enabled: !0,
              fullWidth: 1,
              fullHeight: 1,
              offsetX: 0,
              offsetY: 0,
              width: 1,
              height: 1,
            }),
            (this.view.enabled = !0),
            (this.view.fullWidth = e),
            (this.view.fullHeight = t),
            (this.view.offsetX = n),
            (this.view.offsetY = i),
            (this.view.width = r),
            (this.view.height = a),
            this.updateProjectionMatrix();
        }
        clearViewOffset() {
          null !== this.view && (this.view.enabled = !1),
            this.updateProjectionMatrix();
        }
        updateProjectionMatrix() {
          const e = this.near;
          let t = (e * Math.tan(0.5 * nl * this.fov)) / this.zoom,
            n = 2 * t,
            i = this.aspect * n,
            r = -0.5 * i;
          const a = this.view;
          if (null !== this.view && this.view.enabled) {
            const e = a.fullWidth,
              o = a.fullHeight;
            (r += (a.offsetX * i) / e),
              (t -= (a.offsetY * n) / o),
              (i *= a.width / e),
              (n *= a.height / o);
          }
          const o = this.filmOffset;
          0 !== o && (r += (e * o) / this.getFilmWidth()),
            this.projectionMatrix.makePerspective(
              r,
              r + i,
              t,
              t - n,
              e,
              this.far,
              this.coordinateSystem
            ),
            this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        }
        toJSON(e) {
          const t = super.toJSON(e);
          return (
            (t.object.fov = this.fov),
            (t.object.zoom = this.zoom),
            (t.object.near = this.near),
            (t.object.far = this.far),
            (t.object.focus = this.focus),
            (t.object.aspect = this.aspect),
            null !== this.view &&
            (t.object.view = Object.assign({}, this.view)),
            (t.object.filmGauge = this.filmGauge),
            (t.object.filmOffset = this.filmOffset),
            t
          );
        }
      }
      const ed = -90;
      class td extends Gc {
        constructor(e, t, n) {
          super(),
            (this.type = "CubeCamera"),
            (this.renderTarget = n),
            (this.coordinateSystem = null),
            (this.activeMipmapLevel = 0);
          const i = new $u(ed, 1, e, t);
          (i.layers = this.layers), this.add(i);
          const r = new $u(ed, 1, e, t);
          (r.layers = this.layers), this.add(r);
          const a = new $u(ed, 1, e, t);
          (a.layers = this.layers), this.add(a);
          const o = new $u(ed, 1, e, t);
          (o.layers = this.layers), this.add(o);
          const s = new $u(ed, 1, e, t);
          (s.layers = this.layers), this.add(s);
          const l = new $u(ed, 1, e, t);
          (l.layers = this.layers), this.add(l);
        }
        updateCoordinateSystem() {
          const e = this.coordinateSystem,
            t = this.children.concat(),
            [n, i, r, a, o, s] = t;
          for (const l of t) this.remove(l);
          if (e === Qs)
            n.up.set(0, 1, 0),
              n.lookAt(1, 0, 0),
              i.up.set(0, 1, 0),
              i.lookAt(-1, 0, 0),
              r.up.set(0, 0, -1),
              r.lookAt(0, 1, 0),
              a.up.set(0, 0, 1),
              a.lookAt(0, -1, 0),
              o.up.set(0, 1, 0),
              o.lookAt(0, 0, 1),
              s.up.set(0, 1, 0),
              s.lookAt(0, 0, -1);
          else {
            if (e !== $s)
              throw new Error(
                "THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " +
                e
              );
            n.up.set(0, -1, 0),
              n.lookAt(-1, 0, 0),
              i.up.set(0, -1, 0),
              i.lookAt(1, 0, 0),
              r.up.set(0, 0, 1),
              r.lookAt(0, 1, 0),
              a.up.set(0, 0, -1),
              a.lookAt(0, -1, 0),
              o.up.set(0, -1, 0),
              o.lookAt(0, 0, 1),
              s.up.set(0, -1, 0),
              s.lookAt(0, 0, -1);
          }
          for (const l of t) this.add(l), l.updateMatrixWorld();
        }
        update(e, t) {
          null === this.parent && this.updateMatrixWorld();
          const { renderTarget: n, activeMipmapLevel: i } = this;
          this.coordinateSystem !== e.coordinateSystem &&
            ((this.coordinateSystem = e.coordinateSystem),
              this.updateCoordinateSystem());
          const [r, a, o, s, l, c] = this.children,
            u = e.getRenderTarget(),
            d = e.getActiveCubeFace(),
            h = e.getActiveMipmapLevel(),
            p = e.xr.enabled;
          e.xr.enabled = !1;
          const f = n.texture.generateMipmaps;
          (n.texture.generateMipmaps = !1),
            e.setRenderTarget(n, 0, i),
            e.render(t, r),
            e.setRenderTarget(n, 1, i),
            e.render(t, a),
            e.setRenderTarget(n, 2, i),
            e.render(t, o),
            e.setRenderTarget(n, 3, i),
            e.render(t, s),
            e.setRenderTarget(n, 4, i),
            e.render(t, l),
            (n.texture.generateMipmaps = f),
            e.setRenderTarget(n, 5, i),
            e.render(t, c),
            e.setRenderTarget(u, d, h),
            (e.xr.enabled = p),
            (n.texture.needsPMREMUpdate = !0);
        }
      }
      class nd extends Dl {
        constructor(e, t, n, i, r, a, o, s, l, c) {
          super(
            (e = void 0 !== e ? e : []),
            (t = void 0 !== t ? t : rs),
            n,
            i,
            r,
            a,
            o,
            s,
            l,
            c
          ),
            (this.isCubeTexture = !0),
            (this.flipY = !1);
        }
        get images() {
          return this.image;
        }
        set images(e) {
          this.image = e;
        }
      }
      class id extends Ol {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 1,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : {};
          super(e, e, t), (this.isWebGLCubeRenderTarget = !0);
          const n = { width: e, height: e, depth: 1 },
            i = [n, n, n, n, n, n];
          (this.texture = new nd(
            i,
            t.mapping,
            t.wrapS,
            t.wrapT,
            t.magFilter,
            t.minFilter,
            t.format,
            t.type,
            t.anisotropy,
            t.colorSpace
          )),
            (this.texture.isRenderTargetTexture = !0),
            (this.texture.generateMipmaps =
              void 0 !== t.generateMipmaps && t.generateMipmaps),
            (this.texture.minFilter =
              void 0 !== t.minFilter ? t.minFilter : ms);
        }
        fromEquirectangularTexture(e, t) {
          (this.texture.type = t.type),
            (this.texture.colorSpace = t.colorSpace),
            (this.texture.generateMipmaps = t.generateMipmaps),
            (this.texture.minFilter = t.minFilter),
            (this.texture.magFilter = t.magFilter);
          const n = { tEquirect: { value: null } },
            i =
              "\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
            r =
              "\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",
            a = new Gu(5, 5, 5),
            o = new qu({
              name: "CubemapFromEquirect",
              uniforms: Wu(n),
              vertexShader: i,
              fragmentShader: r,
              side: jo,
              blending: 0,
            });
          o.uniforms.tEquirect.value = t;
          const s = new Vu(a, o),
            l = t.minFilter;
          t.minFilter === vs && (t.minFilter = ms);
          return (
            new td(1, 10, this).update(e, s),
            (t.minFilter = l),
            s.geometry.dispose(),
            s.material.dispose(),
            this
          );
        }
        clear(e, t, n, i) {
          const r = e.getRenderTarget();
          for (let a = 0; a < 6; a++)
            e.setRenderTarget(this, a), e.clear(t, n, i);
          e.setRenderTarget(r);
        }
      }
      const rd = new Bl(),
        ad = new Bl(),
        od = new pl();
      class sd {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : new Bl(1, 0, 0),
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
          (this.isPlane = !0), (this.normal = e), (this.constant = t);
        }
        set(e, t) {
          return this.normal.copy(e), (this.constant = t), this;
        }
        setComponents(e, t, n, i) {
          return this.normal.set(e, t, n), (this.constant = i), this;
        }
        setFromNormalAndCoplanarPoint(e, t) {
          return (
            this.normal.copy(e), (this.constant = -t.dot(this.normal)), this
          );
        }
        setFromCoplanarPoints(e, t, n) {
          const i = rd.subVectors(n, t).cross(ad.subVectors(e, t)).normalize();
          return this.setFromNormalAndCoplanarPoint(i, e), this;
        }
        copy(e) {
          return this.normal.copy(e.normal), (this.constant = e.constant), this;
        }
        normalize() {
          const e = 1 / this.normal.length();
          return this.normal.multiplyScalar(e), (this.constant *= e), this;
        }
        negate() {
          return (this.constant *= -1), this.normal.negate(), this;
        }
        distanceToPoint(e) {
          return this.normal.dot(e) + this.constant;
        }
        distanceToSphere(e) {
          return this.distanceToPoint(e.center) - e.radius;
        }
        projectPoint(e, t) {
          return t
            .copy(e)
            .addScaledVector(this.normal, -this.distanceToPoint(e));
        }
        intersectLine(e, t) {
          const n = e.delta(rd),
            i = this.normal.dot(n);
          if (0 === i)
            return 0 === this.distanceToPoint(e.start) ? t.copy(e.start) : null;
          const r = -(e.start.dot(this.normal) + this.constant) / i;
          return r < 0 || r > 1 ? null : t.copy(e.start).addScaledVector(n, r);
        }
        intersectsLine(e) {
          const t = this.distanceToPoint(e.start),
            n = this.distanceToPoint(e.end);
          return (t < 0 && n > 0) || (n < 0 && t > 0);
        }
        intersectsBox(e) {
          return e.intersectsPlane(this);
        }
        intersectsSphere(e) {
          return e.intersectsPlane(this);
        }
        coplanarPoint(e) {
          return e.copy(this.normal).multiplyScalar(-this.constant);
        }
        applyMatrix4(e, t) {
          const n = t || od.getNormalMatrix(e),
            i = this.coplanarPoint(rd).applyMatrix4(e),
            r = this.normal.applyMatrix3(n).normalize();
          return (this.constant = -i.dot(r)), this;
        }
        translate(e) {
          return (this.constant -= e.dot(this.normal)), this;
        }
        equals(e) {
          return e.normal.equals(this.normal) && e.constant === this.constant;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      const ld = new sc(),
        cd = new Bl();
      class ud {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : new sd(),
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : new sd(),
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : new sd(),
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : new sd(),
            r =
              arguments.length > 4 && void 0 !== arguments[4]
                ? arguments[4]
                : new sd(),
            a =
              arguments.length > 5 && void 0 !== arguments[5]
                ? arguments[5]
                : new sd();
          this.planes = [e, t, n, i, r, a];
        }
        set(e, t, n, i, r, a) {
          const o = this.planes;
          return (
            o[0].copy(e),
            o[1].copy(t),
            o[2].copy(n),
            o[3].copy(i),
            o[4].copy(r),
            o[5].copy(a),
            this
          );
        }
        copy(e) {
          const t = this.planes;
          for (let n = 0; n < 6; n++) t[n].copy(e.planes[n]);
          return this;
        }
        setFromProjectionMatrix(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Qs;
          const n = this.planes,
            i = e.elements,
            r = i[0],
            a = i[1],
            o = i[2],
            s = i[3],
            l = i[4],
            c = i[5],
            u = i[6],
            d = i[7],
            h = i[8],
            p = i[9],
            f = i[10],
            m = i[11],
            g = i[12],
            v = i[13],
            _ = i[14],
            y = i[15];
          if (
            (n[0].setComponents(s - r, d - l, m - h, y - g).normalize(),
              n[1].setComponents(s + r, d + l, m + h, y + g).normalize(),
              n[2].setComponents(s + a, d + c, m + p, y + v).normalize(),
              n[3].setComponents(s - a, d - c, m - p, y - v).normalize(),
              n[4].setComponents(s - o, d - u, m - f, y - _).normalize(),
              t === Qs)
          )
            n[5].setComponents(s + o, d + u, m + f, y + _).normalize();
          else {
            if (t !== $s)
              throw new Error(
                "THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " +
                t
              );
            n[5].setComponents(o, u, f, _).normalize();
          }
          return this;
        }
        intersectsObject(e) {
          if (void 0 !== e.boundingSphere)
            null === e.boundingSphere && e.computeBoundingSphere(),
              ld.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
          else {
            const t = e.geometry;
            null === t.boundingSphere && t.computeBoundingSphere(),
              ld.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
          }
          return this.intersectsSphere(ld);
        }
        intersectsSprite(e) {
          return (
            ld.center.set(0, 0, 0),
            (ld.radius = 0.7071067811865476),
            ld.applyMatrix4(e.matrixWorld),
            this.intersectsSphere(ld)
          );
        }
        intersectsSphere(e) {
          const t = this.planes,
            n = e.center,
            i = -e.radius;
          for (let r = 0; r < 6; r++) {
            if (t[r].distanceToPoint(n) < i) return !1;
          }
          return !0;
        }
        intersectsBox(e) {
          const t = this.planes;
          for (let n = 0; n < 6; n++) {
            const i = t[n];
            if (
              ((cd.x = i.normal.x > 0 ? e.max.x : e.min.x),
                (cd.y = i.normal.y > 0 ? e.max.y : e.min.y),
                (cd.z = i.normal.z > 0 ? e.max.z : e.min.z),
                i.distanceToPoint(cd) < 0)
            )
              return !1;
          }
          return !0;
        }
        containsPoint(e) {
          const t = this.planes;
          for (let n = 0; n < 6; n++)
            if (t[n].distanceToPoint(e) < 0) return !1;
          return !0;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      function dd() {
        let e = null,
          t = !1,
          n = null,
          i = null;
        function r(t, a) {
          n(t, a), (i = e.requestAnimationFrame(r));
        }
        return {
          start: function () {
            !0 !== t &&
              null !== n &&
              ((i = e.requestAnimationFrame(r)), (t = !0));
          },
          stop: function () {
            e.cancelAnimationFrame(i), (t = !1);
          },
          setAnimationLoop: function (e) {
            n = e;
          },
          setContext: function (t) {
            e = t;
          },
        };
      }
      function hd(e, t) {
        const n = t.isWebGL2,
          i = new WeakMap();
        return {
          get: function (e) {
            return e.isInterleavedBufferAttribute && (e = e.data), i.get(e);
          },
          remove: function (t) {
            t.isInterleavedBufferAttribute && (t = t.data);
            const n = i.get(t);
            n && (e.deleteBuffer(n.buffer), i.delete(t));
          },
          update: function (t, r) {
            if (t.isGLBufferAttribute) {
              const e = i.get(t);
              return void (
                (!e || e.version < t.version) &&
                i.set(t, {
                  buffer: t.buffer,
                  type: t.type,
                  bytesPerElement: t.elementSize,
                  version: t.version,
                })
              );
            }
            t.isInterleavedBufferAttribute && (t = t.data);
            const a = i.get(t);
            if (void 0 === a)
              i.set(
                t,
                (function (t, i) {
                  const r = t.array,
                    a = t.usage,
                    o = r.byteLength,
                    s = e.createBuffer();
                  let l;
                  if (
                    (e.bindBuffer(i, s),
                      e.bufferData(i, r, a),
                      t.onUploadCallback(),
                      r instanceof Float32Array)
                  )
                    l = e.FLOAT;
                  else if (r instanceof Uint16Array)
                    if (t.isFloat16BufferAttribute) {
                      if (!n)
                        throw new Error(
                          "THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."
                        );
                      l = e.HALF_FLOAT;
                    } else l = e.UNSIGNED_SHORT;
                  else if (r instanceof Int16Array) l = e.SHORT;
                  else if (r instanceof Uint32Array) l = e.UNSIGNED_INT;
                  else if (r instanceof Int32Array) l = e.INT;
                  else if (r instanceof Int8Array) l = e.BYTE;
                  else if (r instanceof Uint8Array) l = e.UNSIGNED_BYTE;
                  else {
                    if (!(r instanceof Uint8ClampedArray))
                      throw new Error(
                        "THREE.WebGLAttributes: Unsupported buffer data format: " +
                        r
                      );
                    l = e.UNSIGNED_BYTE;
                  }
                  return {
                    buffer: s,
                    type: l,
                    bytesPerElement: r.BYTES_PER_ELEMENT,
                    version: t.version,
                    size: o,
                  };
                })(t, r)
              );
            else if (a.version < t.version) {
              if (a.size !== t.array.byteLength)
                throw new Error(
                  "THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported."
                );
              !(function (t, i, r) {
                const a = i.array,
                  o = i._updateRange,
                  s = i.updateRanges;
                if (
                  (e.bindBuffer(r, t),
                    -1 === o.count && 0 === s.length && e.bufferSubData(r, 0, a),
                    0 !== s.length)
                ) {
                  for (let t = 0, i = s.length; t < i; t++) {
                    const i = s[t];
                    n
                      ? e.bufferSubData(
                        r,
                        i.start * a.BYTES_PER_ELEMENT,
                        a,
                        i.start,
                        i.count
                      )
                      : e.bufferSubData(
                        r,
                        i.start * a.BYTES_PER_ELEMENT,
                        a.subarray(i.start, i.start + i.count)
                      );
                  }
                  i.clearUpdateRanges();
                }
                -1 !== o.count &&
                  (n
                    ? e.bufferSubData(
                      r,
                      o.offset * a.BYTES_PER_ELEMENT,
                      a,
                      o.offset,
                      o.count
                    )
                    : e.bufferSubData(
                      r,
                      o.offset * a.BYTES_PER_ELEMENT,
                      a.subarray(o.offset, o.offset + o.count)
                    ),
                    (o.count = -1)),
                  i.onUploadCallback();
              })(a.buffer, t, r),
                (a.version = t.version);
            }
          },
        };
      }
      class pd extends Eu {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 1,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 1,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 1,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : 1;
          super(),
            (this.type = "PlaneGeometry"),
            (this.parameters = {
              width: e,
              height: t,
              widthSegments: n,
              heightSegments: i,
            });
          const r = e / 2,
            a = t / 2,
            o = Math.floor(n),
            s = Math.floor(i),
            l = o + 1,
            c = s + 1,
            u = e / o,
            d = t / s,
            h = [],
            p = [],
            f = [],
            m = [];
          for (let g = 0; g < c; g++) {
            const e = g * d - a;
            for (let t = 0; t < l; t++) {
              const n = t * u - r;
              p.push(n, -e, 0),
                f.push(0, 0, 1),
                m.push(t / o),
                m.push(1 - g / s);
            }
          }
          for (let g = 0; g < s; g++)
            for (let e = 0; e < o; e++) {
              const t = e + l * g,
                n = e + l * (g + 1),
                i = e + 1 + l * (g + 1),
                r = e + 1 + l * g;
              h.push(t, n, r), h.push(n, i, r);
            }
          this.setIndex(h),
            this.setAttribute("position", new mu(p, 3)),
            this.setAttribute("normal", new mu(f, 3)),
            this.setAttribute("uv", new mu(m, 2));
        }
        copy(e) {
          return (
            super.copy(e),
            (this.parameters = Object.assign({}, e.parameters)),
            this
          );
        }
        static fromJSON(e) {
          return new pd(e.width, e.height, e.widthSegments, e.heightSegments);
        }
      }
      const fd = {
        alphahash_fragment:
          "#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",
        alphahash_pars_fragment:
          "#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",
        alphamap_fragment:
          "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",
        alphamap_pars_fragment:
          "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
        alphatest_fragment:
          "#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif",
        alphatest_pars_fragment:
          "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",
        aomap_fragment:
          "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",
        aomap_pars_fragment:
          "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
        batching_pars_vertex:
          "#ifdef USE_BATCHING\n\tattribute float batchId;\n\tuniform highp sampler2D batchingTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",
        batching_vertex:
          "#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif",
        begin_vertex:
          "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",
        beginnormal_vertex:
          "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",
        bsdfs:
          "float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",
        iridescence_fragment:
          "#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",
        bumpmap_pars_fragment:
          "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
        clipping_planes_fragment:
          "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif",
        clipping_planes_pars_fragment:
          "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",
        clipping_planes_pars_vertex:
          "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",
        clipping_planes_vertex:
          "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",
        color_fragment:
          "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",
        color_pars_fragment:
          "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",
        color_pars_vertex:
          "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",
        color_vertex:
          "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",
        common:
          "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",
        cube_uv_reflection_fragment:
          "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",
        defaultnormal_vertex:
          "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
        displacementmap_pars_vertex:
          "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
        displacementmap_vertex:
          "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",
        emissivemap_fragment:
          "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
        emissivemap_pars_fragment:
          "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
        colorspace_fragment:
          "gl_FragColor = linearToOutputTexel( gl_FragColor );",
        colorspace_pars_fragment:
          "\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}",
        envmap_fragment:
          "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
        envmap_common_pars_fragment:
          "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",
        envmap_pars_fragment:
          "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
        envmap_pars_vertex:
          "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",
        envmap_physical_pars_fragment:
          "#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",
        envmap_vertex:
          "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
        fog_vertex: "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",
        fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",
        fog_fragment:
          "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",
        fog_pars_fragment:
          "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
        gradientmap_pars_fragment:
          "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",
        lightmap_fragment:
          "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",
        lightmap_pars_fragment:
          "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
        lights_lambert_fragment:
          "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",
        lights_lambert_pars_fragment:
          "varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",
        lights_pars_begin:
          "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",
        lights_toon_fragment:
          "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",
        lights_toon_pars_fragment:
          "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",
        lights_phong_fragment:
          "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
        lights_phong_pars_fragment:
          "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",
        lights_physical_fragment:
          "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",
        lights_physical_pars_fragment:
          "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
        lights_fragment_begin:
          "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
        lights_fragment_maps:
          "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",
        lights_fragment_end:
          "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",
        logdepthbuf_fragment:
          "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
        logdepthbuf_pars_fragment:
          "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
        logdepthbuf_pars_vertex:
          "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",
        logdepthbuf_vertex:
          "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
        map_fragment:
          "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",
        map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",
        map_particle_fragment:
          "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
        map_particle_pars_fragment:
          "#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
        metalnessmap_fragment:
          "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
        metalnessmap_pars_fragment:
          "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
        morphinstance_vertex:
          "#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[MORPHTARGETS_COUNT];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif",
        morphcolor_vertex:
          "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",
        morphnormal_vertex:
          "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",
        morphtarget_pars_vertex:
          "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t#endif\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\t#ifndef USE_INSTANCING_MORPH\n\t\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\t#endif\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",
        morphtarget_vertex:
          "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",
        normal_fragment_begin:
          "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",
        normal_fragment_maps:
          "#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",
        normal_pars_fragment:
          "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",
        normal_pars_vertex:
          "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",
        normal_vertex:
          "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",
        normalmap_pars_fragment:
          "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",
        clearcoat_normal_fragment_begin:
          "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",
        clearcoat_normal_fragment_maps:
          "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",
        clearcoat_pars_fragment:
          "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",
        iridescence_pars_fragment:
          "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",
        opaque_fragment:
          "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",
        packing:
          "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",
        premultiplied_alpha_fragment:
          "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",
        project_vertex:
          "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",
        dithering_fragment:
          "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",
        dithering_pars_fragment:
          "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
        roughnessmap_fragment:
          "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",
        roughnessmap_pars_fragment:
          "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
        shadowmap_pars_fragment:
          "#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
        shadowmap_pars_vertex:
          "#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
        shadowmap_vertex:
          "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",
        shadowmask_pars_fragment:
          "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",
        skinbase_vertex:
          "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
        skinning_pars_vertex:
          "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",
        skinning_vertex:
          "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",
        skinnormal_vertex:
          "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
        specularmap_fragment:
          "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
        specularmap_pars_fragment:
          "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
        tonemapping_fragment:
          "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",
        tonemapping_pars_fragment:
          "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tfloat startCompression = 0.8 - 0.04;\n\tfloat desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min(color.r, min(color.g, color.b));\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max(color.r, max(color.g, color.b));\n\tif (peak < startCompression) return color;\n\tfloat d = 1. - startCompression;\n\tfloat newPeak = 1. - d * d / (peak + d - startCompression);\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);\n\treturn mix(color, vec3(1, 1, 1), g);\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",
        transmission_fragment:
          "#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",
        transmission_pars_fragment:
          "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",
        uv_pars_fragment:
          "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",
        uv_pars_vertex:
          "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",
        uv_vertex:
          "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",
        worldpos_vertex:
          "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",
        background_vert:
          "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
        background_frag:
          "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",
        backgroundCube_vert:
          "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
        backgroundCube_frag:
          "#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",
        cube_vert:
          "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
        cube_frag:
          "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",
        depth_vert:
          "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",
        depth_frag:
          "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",
        distanceRGBA_vert:
          "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
        distanceRGBA_frag:
          "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
        equirect_vert:
          "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
        equirect_frag:
          "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",
        linedashed_vert:
          "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
        linedashed_frag:
          "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
        meshbasic_vert:
          "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
        meshbasic_frag:
          "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshlambert_vert:
          "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        meshlambert_frag:
          "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshmatcap_vert:
          "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
        meshmatcap_frag:
          "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshnormal_vert:
          "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
        meshnormal_frag:
          "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",
        meshphong_vert:
          "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        meshphong_frag:
          "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshphysical_vert:
          "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",
        meshphysical_frag:
          "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshtoon_vert:
          "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        meshtoon_frag:
          "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        points_vert:
          "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
        points_frag:
          "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
        shadow_vert:
          "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        shadow_frag:
          "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",
        sprite_vert:
          "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
        sprite_frag:
          "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",
      },
        md = {
          common: {
            diffuse: { value: new au(16777215) },
            opacity: { value: 1 },
            map: { value: null },
            mapTransform: { value: new pl() },
            alphaMap: { value: null },
            alphaMapTransform: { value: new pl() },
            alphaTest: { value: 0 },
          },
          specularmap: {
            specularMap: { value: null },
            specularMapTransform: { value: new pl() },
          },
          envmap: {
            envMap: { value: null },
            envMapRotation: { value: new pl() },
            flipEnvMap: { value: -1 },
            reflectivity: { value: 1 },
            ior: { value: 1.5 },
            refractionRatio: { value: 0.98 },
          },
          aomap: {
            aoMap: { value: null },
            aoMapIntensity: { value: 1 },
            aoMapTransform: { value: new pl() },
          },
          lightmap: {
            lightMap: { value: null },
            lightMapIntensity: { value: 1 },
            lightMapTransform: { value: new pl() },
          },
          bumpmap: {
            bumpMap: { value: null },
            bumpMapTransform: { value: new pl() },
            bumpScale: { value: 1 },
          },
          normalmap: {
            normalMap: { value: null },
            normalMapTransform: { value: new pl() },
            normalScale: { value: new hl(1, 1) },
          },
          displacementmap: {
            displacementMap: { value: null },
            displacementMapTransform: { value: new pl() },
            displacementScale: { value: 1 },
            displacementBias: { value: 0 },
          },
          emissivemap: {
            emissiveMap: { value: null },
            emissiveMapTransform: { value: new pl() },
          },
          metalnessmap: {
            metalnessMap: { value: null },
            metalnessMapTransform: { value: new pl() },
          },
          roughnessmap: {
            roughnessMap: { value: null },
            roughnessMapTransform: { value: new pl() },
          },
          gradientmap: { gradientMap: { value: null } },
          fog: {
            fogDensity: { value: 25e-5 },
            fogNear: { value: 1 },
            fogFar: { value: 2e3 },
            fogColor: { value: new au(16777215) },
          },
          lights: {
            ambientLightColor: { value: [] },
            lightProbe: { value: [] },
            directionalLights: {
              value: [],
              properties: { direction: {}, color: {} },
            },
            directionalLightShadows: {
              value: [],
              properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
              },
            },
            directionalShadowMap: { value: [] },
            directionalShadowMatrix: { value: [] },
            spotLights: {
              value: [],
              properties: {
                color: {},
                position: {},
                direction: {},
                distance: {},
                coneCos: {},
                penumbraCos: {},
                decay: {},
              },
            },
            spotLightShadows: {
              value: [],
              properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
              },
            },
            spotLightMap: { value: [] },
            spotShadowMap: { value: [] },
            spotLightMatrix: { value: [] },
            pointLights: {
              value: [],
              properties: { color: {}, position: {}, decay: {}, distance: {} },
            },
            pointLightShadows: {
              value: [],
              properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
                shadowCameraNear: {},
                shadowCameraFar: {},
              },
            },
            pointShadowMap: { value: [] },
            pointShadowMatrix: { value: [] },
            hemisphereLights: {
              value: [],
              properties: { direction: {}, skyColor: {}, groundColor: {} },
            },
            rectAreaLights: {
              value: [],
              properties: { color: {}, position: {}, width: {}, height: {} },
            },
            ltc_1: { value: null },
            ltc_2: { value: null },
          },
          points: {
            diffuse: { value: new au(16777215) },
            opacity: { value: 1 },
            size: { value: 1 },
            scale: { value: 1 },
            map: { value: null },
            alphaMap: { value: null },
            alphaMapTransform: { value: new pl() },
            alphaTest: { value: 0 },
            uvTransform: { value: new pl() },
          },
          sprite: {
            diffuse: { value: new au(16777215) },
            opacity: { value: 1 },
            center: { value: new hl(0.5, 0.5) },
            rotation: { value: 0 },
            map: { value: null },
            mapTransform: { value: new pl() },
            alphaMap: { value: null },
            alphaMapTransform: { value: new pl() },
            alphaTest: { value: 0 },
          },
        },
        gd = {
          basic: {
            uniforms: ju([
              md.common,
              md.specularmap,
              md.envmap,
              md.aomap,
              md.lightmap,
              md.fog,
            ]),
            vertexShader: fd.meshbasic_vert,
            fragmentShader: fd.meshbasic_frag,
          },
          lambert: {
            uniforms: ju([
              md.common,
              md.specularmap,
              md.envmap,
              md.aomap,
              md.lightmap,
              md.emissivemap,
              md.bumpmap,
              md.normalmap,
              md.displacementmap,
              md.fog,
              md.lights,
              { emissive: { value: new au(0) } },
            ]),
            vertexShader: fd.meshlambert_vert,
            fragmentShader: fd.meshlambert_frag,
          },
          phong: {
            uniforms: ju([
              md.common,
              md.specularmap,
              md.envmap,
              md.aomap,
              md.lightmap,
              md.emissivemap,
              md.bumpmap,
              md.normalmap,
              md.displacementmap,
              md.fog,
              md.lights,
              {
                emissive: { value: new au(0) },
                specular: { value: new au(1118481) },
                shininess: { value: 30 },
              },
            ]),
            vertexShader: fd.meshphong_vert,
            fragmentShader: fd.meshphong_frag,
          },
          standard: {
            uniforms: ju([
              md.common,
              md.envmap,
              md.aomap,
              md.lightmap,
              md.emissivemap,
              md.bumpmap,
              md.normalmap,
              md.displacementmap,
              md.roughnessmap,
              md.metalnessmap,
              md.fog,
              md.lights,
              {
                emissive: { value: new au(0) },
                roughness: { value: 1 },
                metalness: { value: 0 },
                envMapIntensity: { value: 1 },
              },
            ]),
            vertexShader: fd.meshphysical_vert,
            fragmentShader: fd.meshphysical_frag,
          },
          toon: {
            uniforms: ju([
              md.common,
              md.aomap,
              md.lightmap,
              md.emissivemap,
              md.bumpmap,
              md.normalmap,
              md.displacementmap,
              md.gradientmap,
              md.fog,
              md.lights,
              { emissive: { value: new au(0) } },
            ]),
            vertexShader: fd.meshtoon_vert,
            fragmentShader: fd.meshtoon_frag,
          },
          matcap: {
            uniforms: ju([
              md.common,
              md.bumpmap,
              md.normalmap,
              md.displacementmap,
              md.fog,
              { matcap: { value: null } },
            ]),
            vertexShader: fd.meshmatcap_vert,
            fragmentShader: fd.meshmatcap_frag,
          },
          points: {
            uniforms: ju([md.points, md.fog]),
            vertexShader: fd.points_vert,
            fragmentShader: fd.points_frag,
          },
          dashed: {
            uniforms: ju([
              md.common,
              md.fog,
              {
                scale: { value: 1 },
                dashSize: { value: 1 },
                totalSize: { value: 2 },
              },
            ]),
            vertexShader: fd.linedashed_vert,
            fragmentShader: fd.linedashed_frag,
          },
          depth: {
            uniforms: ju([md.common, md.displacementmap]),
            vertexShader: fd.depth_vert,
            fragmentShader: fd.depth_frag,
          },
          normal: {
            uniforms: ju([
              md.common,
              md.bumpmap,
              md.normalmap,
              md.displacementmap,
              { opacity: { value: 1 } },
            ]),
            vertexShader: fd.meshnormal_vert,
            fragmentShader: fd.meshnormal_frag,
          },
          sprite: {
            uniforms: ju([md.sprite, md.fog]),
            vertexShader: fd.sprite_vert,
            fragmentShader: fd.sprite_frag,
          },
          background: {
            uniforms: {
              uvTransform: { value: new pl() },
              t2D: { value: null },
              backgroundIntensity: { value: 1 },
            },
            vertexShader: fd.background_vert,
            fragmentShader: fd.background_frag,
          },
          backgroundCube: {
            uniforms: {
              envMap: { value: null },
              flipEnvMap: { value: -1 },
              backgroundBlurriness: { value: 0 },
              backgroundIntensity: { value: 1 },
              backgroundRotation: { value: new pl() },
            },
            vertexShader: fd.backgroundCube_vert,
            fragmentShader: fd.backgroundCube_frag,
          },
          cube: {
            uniforms: {
              tCube: { value: null },
              tFlip: { value: -1 },
              opacity: { value: 1 },
            },
            vertexShader: fd.cube_vert,
            fragmentShader: fd.cube_frag,
          },
          equirect: {
            uniforms: { tEquirect: { value: null } },
            vertexShader: fd.equirect_vert,
            fragmentShader: fd.equirect_frag,
          },
          distanceRGBA: {
            uniforms: ju([
              md.common,
              md.displacementmap,
              {
                referencePosition: { value: new Bl() },
                nearDistance: { value: 1 },
                farDistance: { value: 1e3 },
              },
            ]),
            vertexShader: fd.distanceRGBA_vert,
            fragmentShader: fd.distanceRGBA_frag,
          },
          shadow: {
            uniforms: ju([
              md.lights,
              md.fog,
              { color: { value: new au(0) }, opacity: { value: 1 } },
            ]),
            vertexShader: fd.shadow_vert,
            fragmentShader: fd.shadow_frag,
          },
        };
      gd.physical = {
        uniforms: ju([
          gd.standard.uniforms,
          {
            clearcoat: { value: 0 },
            clearcoatMap: { value: null },
            clearcoatMapTransform: { value: new pl() },
            clearcoatNormalMap: { value: null },
            clearcoatNormalMapTransform: { value: new pl() },
            clearcoatNormalScale: { value: new hl(1, 1) },
            clearcoatRoughness: { value: 0 },
            clearcoatRoughnessMap: { value: null },
            clearcoatRoughnessMapTransform: { value: new pl() },
            iridescence: { value: 0 },
            iridescenceMap: { value: null },
            iridescenceMapTransform: { value: new pl() },
            iridescenceIOR: { value: 1.3 },
            iridescenceThicknessMinimum: { value: 100 },
            iridescenceThicknessMaximum: { value: 400 },
            iridescenceThicknessMap: { value: null },
            iridescenceThicknessMapTransform: { value: new pl() },
            sheen: { value: 0 },
            sheenColor: { value: new au(0) },
            sheenColorMap: { value: null },
            sheenColorMapTransform: { value: new pl() },
            sheenRoughness: { value: 1 },
            sheenRoughnessMap: { value: null },
            sheenRoughnessMapTransform: { value: new pl() },
            transmission: { value: 0 },
            transmissionMap: { value: null },
            transmissionMapTransform: { value: new pl() },
            transmissionSamplerSize: { value: new hl() },
            transmissionSamplerMap: { value: null },
            thickness: { value: 0 },
            thicknessMap: { value: null },
            thicknessMapTransform: { value: new pl() },
            attenuationDistance: { value: 0 },
            attenuationColor: { value: new au(0) },
            specularColor: { value: new au(1, 1, 1) },
            specularColorMap: { value: null },
            specularColorMapTransform: { value: new pl() },
            specularIntensity: { value: 1 },
            specularIntensityMap: { value: null },
            specularIntensityMapTransform: { value: new pl() },
            anisotropyVector: { value: new hl() },
            anisotropyMap: { value: null },
            anisotropyMapTransform: { value: new pl() },
          },
        ]),
        vertexShader: fd.meshphysical_vert,
        fragmentShader: fd.meshphysical_frag,
      };
      const vd = { r: 0, b: 0, g: 0 },
        _d = new wc(),
        yd = new gc();
      function xd(e, t, n, i, r, a, o) {
        const s = new au(0);
        let l,
          c,
          u = !0 === a ? 0 : 1,
          d = null,
          h = 0,
          p = null;
        function f(t, n) {
          t.getRGB(vd, Xu(e)), i.buffers.color.setClear(vd.r, vd.g, vd.b, n, o);
        }
        return {
          getClearColor: function () {
            return s;
          },
          setClearColor: function (e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 1;
            s.set(e), (u = t), f(s, u);
          },
          getClearAlpha: function () {
            return u;
          },
          setClearAlpha: function (e) {
            (u = e), f(s, u);
          },
          render: function (a, m) {
            let g = !1,
              v = !0 === m.isScene ? m.background : null;
            if (v && v.isTexture) {
              v = (m.backgroundBlurriness > 0 ? n : t).get(v);
            }
            null === v ? f(s, u) : v && v.isColor && (f(v, 1), (g = !0));
            const _ = e.xr.getEnvironmentBlendMode();
            "additive" === _
              ? i.buffers.color.setClear(0, 0, 0, 1, o)
              : "alpha-blend" === _ && i.buffers.color.setClear(0, 0, 0, 0, o),
              (e.autoClear || g) &&
              e.clear(e.autoClearColor, e.autoClearDepth, e.autoClearStencil),
              v && (v.isCubeTexture || v.mapping === ls)
                ? (void 0 === c &&
                  ((c = new Vu(
                    new Gu(1, 1, 1),
                    new qu({
                      name: "BackgroundCubeMaterial",
                      uniforms: Wu(gd.backgroundCube.uniforms),
                      vertexShader: gd.backgroundCube.vertexShader,
                      fragmentShader: gd.backgroundCube.fragmentShader,
                      side: jo,
                      depthTest: !1,
                      depthWrite: !1,
                      fog: !1,
                    })
                  )),
                    c.geometry.deleteAttribute("normal"),
                    c.geometry.deleteAttribute("uv"),
                    (c.onBeforeRender = function (e, t, n) {
                      this.matrixWorld.copyPosition(n.matrixWorld);
                    }),
                    Object.defineProperty(c.material, "envMap", {
                      get: function () {
                        return this.uniforms.envMap.value;
                      },
                    }),
                    r.update(c)),
                  _d.copy(m.backgroundRotation),
                  (_d.x *= -1),
                  (_d.y *= -1),
                  (_d.z *= -1),
                  v.isCubeTexture &&
                  !1 === v.isRenderTargetTexture &&
                  ((_d.y *= -1), (_d.z *= -1)),
                  (c.material.uniforms.envMap.value = v),
                  (c.material.uniforms.flipEnvMap.value =
                    v.isCubeTexture && !1 === v.isRenderTargetTexture ? -1 : 1),
                  (c.material.uniforms.backgroundBlurriness.value =
                    m.backgroundBlurriness),
                  (c.material.uniforms.backgroundIntensity.value =
                    m.backgroundIntensity),
                  c.material.uniforms.backgroundRotation.value.setFromMatrix4(
                    yd.makeRotationFromEuler(_d)
                  ),
                  (c.material.toneMapped = Ml.getTransfer(v.colorSpace) !== js),
                  (d === v && h === v.version && p === e.toneMapping) ||
                  ((c.material.needsUpdate = !0),
                    (d = v),
                    (h = v.version),
                    (p = e.toneMapping)),
                  c.layers.enableAll(),
                  a.unshift(c, c.geometry, c.material, 0, 0, null))
                : v &&
                v.isTexture &&
                (void 0 === l &&
                  ((l = new Vu(
                    new pd(2, 2),
                    new qu({
                      name: "BackgroundMaterial",
                      uniforms: Wu(gd.background.uniforms),
                      vertexShader: gd.background.vertexShader,
                      fragmentShader: gd.background.fragmentShader,
                      side: Wo,
                      depthTest: !1,
                      depthWrite: !1,
                      fog: !1,
                    })
                  )),
                    l.geometry.deleteAttribute("normal"),
                    Object.defineProperty(l.material, "map", {
                      get: function () {
                        return this.uniforms.t2D.value;
                      },
                    }),
                    r.update(l)),
                  (l.material.uniforms.t2D.value = v),
                  (l.material.uniforms.backgroundIntensity.value =
                    m.backgroundIntensity),
                  (l.material.toneMapped = Ml.getTransfer(v.colorSpace) !== js),
                  !0 === v.matrixAutoUpdate && v.updateMatrix(),
                  l.material.uniforms.uvTransform.value.copy(v.matrix),
                  (d === v && h === v.version && p === e.toneMapping) ||
                  ((l.material.needsUpdate = !0),
                    (d = v),
                    (h = v.version),
                    (p = e.toneMapping)),
                  l.layers.enableAll(),
                  a.unshift(l, l.geometry, l.material, 0, 0, null));
          },
        };
      }
      function bd(e, t, n, i) {
        const r = e.getParameter(e.MAX_VERTEX_ATTRIBS),
          a = i.isWebGL2 ? null : t.get("OES_vertex_array_object"),
          o = i.isWebGL2 || null !== a,
          s = {},
          l = p(null);
        let c = l,
          u = !1;
        function d(t) {
          return i.isWebGL2 ? e.bindVertexArray(t) : a.bindVertexArrayOES(t);
        }
        function h(t) {
          return i.isWebGL2
            ? e.deleteVertexArray(t)
            : a.deleteVertexArrayOES(t);
        }
        function p(e) {
          const t = [],
            n = [],
            i = [];
          for (let a = 0; a < r; a++) (t[a] = 0), (n[a] = 0), (i[a] = 0);
          return {
            geometry: null,
            program: null,
            wireframe: !1,
            newAttributes: t,
            enabledAttributes: n,
            attributeDivisors: i,
            object: e,
            attributes: {},
            index: null,
          };
        }
        function f() {
          const e = c.newAttributes;
          for (let t = 0, n = e.length; t < n; t++) e[t] = 0;
        }
        function m(e) {
          g(e, 0);
        }
        function g(n, r) {
          const a = c.newAttributes,
            o = c.enabledAttributes,
            s = c.attributeDivisors;
          if (
            ((a[n] = 1),
              0 === o[n] && (e.enableVertexAttribArray(n), (o[n] = 1)),
              s[n] !== r)
          ) {
            (i.isWebGL2 ? e : t.get("ANGLE_instanced_arrays"))[
              i.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"
            ](n, r),
              (s[n] = r);
          }
        }
        function v() {
          const t = c.newAttributes,
            n = c.enabledAttributes;
          for (let i = 0, r = n.length; i < r; i++)
            n[i] !== t[i] && (e.disableVertexAttribArray(i), (n[i] = 0));
        }
        function _(t, n, i, r, a, o, s) {
          !0 === s
            ? e.vertexAttribIPointer(t, n, i, a, o)
            : e.vertexAttribPointer(t, n, i, r, a, o);
        }
        function y() {
          x(), (u = !0), c !== l && ((c = l), d(c.object));
        }
        function x() {
          (l.geometry = null), (l.program = null), (l.wireframe = !1);
        }
        return {
          setup: function (r, l, h, y, x) {
            let b = !1;
            if (o) {
              const t = (function (t, n, r) {
                const o = !0 === r.wireframe;
                let l = s[t.id];
                void 0 === l && ((l = {}), (s[t.id] = l));
                let c = l[n.id];
                void 0 === c && ((c = {}), (l[n.id] = c));
                let u = c[o];
                void 0 === u &&
                  ((u = p(
                    i.isWebGL2
                      ? e.createVertexArray()
                      : a.createVertexArrayOES()
                  )),
                    (c[o] = u));
                return u;
              })(y, h, l);
              c !== t && ((c = t), d(c.object)),
                (b = (function (e, t, n, i) {
                  const r = c.attributes,
                    a = t.attributes;
                  let o = 0;
                  const s = n.getAttributes();
                  for (const l in s) {
                    if (s[l].location >= 0) {
                      const t = r[l];
                      let n = a[l];
                      if (
                        (void 0 === n &&
                          ("instanceMatrix" === l &&
                            e.instanceMatrix &&
                            (n = e.instanceMatrix),
                            "instanceColor" === l &&
                            e.instanceColor &&
                            (n = e.instanceColor)),
                          void 0 === t)
                      )
                        return !0;
                      if (t.attribute !== n) return !0;
                      if (n && t.data !== n.data) return !0;
                      o++;
                    }
                  }
                  return c.attributesNum !== o || c.index !== i;
                })(r, y, h, x)),
                b &&
                (function (e, t, n, i) {
                  const r = {},
                    a = t.attributes;
                  let o = 0;
                  const s = n.getAttributes();
                  for (const l in s) {
                    if (s[l].location >= 0) {
                      let t = a[l];
                      void 0 === t &&
                        ("instanceMatrix" === l &&
                          e.instanceMatrix &&
                          (t = e.instanceMatrix),
                          "instanceColor" === l &&
                          e.instanceColor &&
                          (t = e.instanceColor));
                      const n = {};
                      (n.attribute = t),
                        t && t.data && (n.data = t.data),
                        (r[l] = n),
                        o++;
                    }
                  }
                  (c.attributes = r), (c.attributesNum = o), (c.index = i);
                })(r, y, h, x);
            } else {
              const e = !0 === l.wireframe;
              (c.geometry === y.id &&
                c.program === h.id &&
                c.wireframe === e) ||
                ((c.geometry = y.id),
                  (c.program = h.id),
                  (c.wireframe = e),
                  (b = !0));
            }
            null !== x && n.update(x, e.ELEMENT_ARRAY_BUFFER),
              (b || u) &&
              ((u = !1),
                (function (r, a, o, s) {
                  if (
                    !1 === i.isWebGL2 &&
                    (r.isInstancedMesh || s.isInstancedBufferGeometry) &&
                    null === t.get("ANGLE_instanced_arrays")
                  )
                    return;
                  f();
                  const l = s.attributes,
                    c = o.getAttributes(),
                    u = a.defaultAttributeValues;
                  for (const t in c) {
                    const a = c[t];
                    if (a.location >= 0) {
                      let o = l[t];
                      if (
                        (void 0 === o &&
                          ("instanceMatrix" === t &&
                            r.instanceMatrix &&
                            (o = r.instanceMatrix),
                            "instanceColor" === t &&
                            r.instanceColor &&
                            (o = r.instanceColor)),
                          void 0 !== o)
                      ) {
                        const t = o.normalized,
                          l = o.itemSize,
                          c = n.get(o);
                        if (void 0 === c) continue;
                        const u = c.buffer,
                          d = c.type,
                          h = c.bytesPerElement,
                          p =
                            !0 === i.isWebGL2 &&
                            (d === e.INT ||
                              d === e.UNSIGNED_INT ||
                              o.gpuType === xs);
                        if (o.isInterleavedBufferAttribute) {
                          const n = o.data,
                            i = n.stride,
                            c = o.offset;
                          if (n.isInstancedInterleavedBuffer) {
                            for (let e = 0; e < a.locationSize; e++)
                              g(a.location + e, n.meshPerAttribute);
                            !0 !== r.isInstancedMesh &&
                              void 0 === s._maxInstanceCount &&
                              (s._maxInstanceCount =
                                n.meshPerAttribute * n.count);
                          } else
                            for (let e = 0; e < a.locationSize; e++)
                              m(a.location + e);
                          e.bindBuffer(e.ARRAY_BUFFER, u);
                          for (let e = 0; e < a.locationSize; e++)
                            _(
                              a.location + e,
                              l / a.locationSize,
                              d,
                              t,
                              i * h,
                              (c + (l / a.locationSize) * e) * h,
                              p
                            );
                        } else {
                          if (o.isInstancedBufferAttribute) {
                            for (let e = 0; e < a.locationSize; e++)
                              g(a.location + e, o.meshPerAttribute);
                            !0 !== r.isInstancedMesh &&
                              void 0 === s._maxInstanceCount &&
                              (s._maxInstanceCount =
                                o.meshPerAttribute * o.count);
                          } else
                            for (let e = 0; e < a.locationSize; e++)
                              m(a.location + e);
                          e.bindBuffer(e.ARRAY_BUFFER, u);
                          for (let e = 0; e < a.locationSize; e++)
                            _(
                              a.location + e,
                              l / a.locationSize,
                              d,
                              t,
                              l * h,
                              (l / a.locationSize) * e * h,
                              p
                            );
                        }
                      } else if (void 0 !== u) {
                        const n = u[t];
                        if (void 0 !== n)
                          switch (n.length) {
                            case 2:
                              e.vertexAttrib2fv(a.location, n);
                              break;
                            case 3:
                              e.vertexAttrib3fv(a.location, n);
                              break;
                            case 4:
                              e.vertexAttrib4fv(a.location, n);
                              break;
                            default:
                              e.vertexAttrib1fv(a.location, n);
                          }
                      }
                    }
                  }
                  v();
                })(r, l, h, y),
                null !== x &&
                e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, n.get(x).buffer));
          },
          reset: y,
          resetDefaultState: x,
          dispose: function () {
            y();
            for (const e in s) {
              const t = s[e];
              for (const e in t) {
                const n = t[e];
                for (const e in n) h(n[e].object), delete n[e];
                delete t[e];
              }
              delete s[e];
            }
          },
          releaseStatesOfGeometry: function (e) {
            if (void 0 === s[e.id]) return;
            const t = s[e.id];
            for (const n in t) {
              const e = t[n];
              for (const t in e) h(e[t].object), delete e[t];
              delete t[n];
            }
            delete s[e.id];
          },
          releaseStatesOfProgram: function (e) {
            for (const t in s) {
              const n = s[t];
              if (void 0 === n[e.id]) continue;
              const i = n[e.id];
              for (const e in i) h(i[e].object), delete i[e];
              delete n[e.id];
            }
          },
          initAttributes: f,
          enableAttribute: m,
          disableUnusedAttributes: v,
        };
      }
      function Sd(e, t, n, i) {
        const r = i.isWebGL2;
        let a;
        (this.setMode = function (e) {
          a = e;
        }),
          (this.render = function (t, i) {
            e.drawArrays(a, t, i), n.update(i, a, 1);
          }),
          (this.renderInstances = function (i, o, s) {
            if (0 === s) return;
            let l, c;
            if (r) (l = e), (c = "drawArraysInstanced");
            else if (
              ((l = t.get("ANGLE_instanced_arrays")),
                (c = "drawArraysInstancedANGLE"),
                null === l)
            )
              return void console.error(
                "THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."
              );
            l[c](a, i, o, s), n.update(o, a, s);
          }),
          (this.renderMultiDraw = function (e, i, r) {
            if (0 === r) return;
            const o = t.get("WEBGL_multi_draw");
            if (null === o) for (let t = 0; t < r; t++) this.render(e[t], i[t]);
            else {
              o.multiDrawArraysWEBGL(a, e, 0, i, 0, r);
              let t = 0;
              for (let e = 0; e < r; e++) t += i[e];
              n.update(t, a, 1);
            }
          });
      }
      function Ed(e, t, n) {
        let i;
        function r(t) {
          if ("highp" === t) {
            if (
              e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.HIGH_FLOAT)
                .precision > 0 &&
              e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.HIGH_FLOAT)
                .precision > 0
            )
              return "highp";
            t = "mediump";
          }
          return "mediump" === t &&
            e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.MEDIUM_FLOAT)
              .precision > 0 &&
            e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.MEDIUM_FLOAT)
              .precision > 0
            ? "mediump"
            : "lowp";
        }
        const a =
          "undefined" !== typeof WebGL2RenderingContext &&
          "WebGL2RenderingContext" === e.constructor.name;
        let o = void 0 !== n.precision ? n.precision : "highp";
        const s = r(o);
        s !== o &&
          (console.warn(
            "THREE.WebGLRenderer:",
            o,
            "not supported, using",
            s,
            "instead."
          ),
            (o = s));
        const l = a || t.has("WEBGL_draw_buffers"),
          c = !0 === n.logarithmicDepthBuffer,
          u = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),
          d = e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
          h = e.getParameter(e.MAX_TEXTURE_SIZE),
          p = e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),
          f = e.getParameter(e.MAX_VERTEX_ATTRIBS),
          m = e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),
          g = e.getParameter(e.MAX_VARYING_VECTORS),
          v = e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),
          _ = d > 0,
          y = a || t.has("OES_texture_float");
        return {
          isWebGL2: a,
          drawBuffers: l,
          getMaxAnisotropy: function () {
            if (void 0 !== i) return i;
            if (!0 === t.has("EXT_texture_filter_anisotropic")) {
              const n = t.get("EXT_texture_filter_anisotropic");
              i = e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
            } else i = 0;
            return i;
          },
          getMaxPrecision: r,
          precision: o,
          logarithmicDepthBuffer: c,
          maxTextures: u,
          maxVertexTextures: d,
          maxTextureSize: h,
          maxCubemapSize: p,
          maxAttributes: f,
          maxVertexUniforms: m,
          maxVaryings: g,
          maxFragmentUniforms: v,
          vertexTextures: _,
          floatFragmentTextures: y,
          floatVertexTextures: _ && y,
          maxSamples: a ? e.getParameter(e.MAX_SAMPLES) : 0,
        };
      }
      function Md(e) {
        const t = this;
        let n = null,
          i = 0,
          r = !1,
          a = !1;
        const o = new sd(),
          s = new pl(),
          l = { value: null, needsUpdate: !1 };
        function c(e, n, i, r) {
          const a = null !== e ? e.length : 0;
          let c = null;
          if (0 !== a) {
            if (((c = l.value), !0 !== r || null === c)) {
              const t = i + 4 * a,
                r = n.matrixWorldInverse;
              s.getNormalMatrix(r),
                (null === c || c.length < t) && (c = new Float32Array(t));
              for (let n = 0, l = i; n !== a; ++n, l += 4)
                o.copy(e[n]).applyMatrix4(r, s),
                  o.normal.toArray(c, l),
                  (c[l + 3] = o.constant);
            }
            (l.value = c), (l.needsUpdate = !0);
          }
          return (t.numPlanes = a), (t.numIntersection = 0), c;
        }
        (this.uniform = l),
          (this.numPlanes = 0),
          (this.numIntersection = 0),
          (this.init = function (e, t) {
            const n = 0 !== e.length || t || 0 !== i || r;
            return (r = t), (i = e.length), n;
          }),
          (this.beginShadows = function () {
            (a = !0), c(null);
          }),
          (this.endShadows = function () {
            a = !1;
          }),
          (this.setGlobalState = function (e, t) {
            n = c(e, t, 0);
          }),
          (this.setState = function (o, s, u) {
            const d = o.clippingPlanes,
              h = o.clipIntersection,
              p = o.clipShadows,
              f = e.get(o);
            if (!r || null === d || 0 === d.length || (a && !p))
              a
                ? c(null)
                : (function () {
                  l.value !== n && ((l.value = n), (l.needsUpdate = i > 0));
                  (t.numPlanes = i), (t.numIntersection = 0);
                })();
            else {
              const e = a ? 0 : i,
                t = 4 * e;
              let r = f.clippingState || null;
              (l.value = r), (r = c(d, s, t, u));
              for (let i = 0; i !== t; ++i) r[i] = n[i];
              (f.clippingState = r),
                (this.numIntersection = h ? this.numPlanes : 0),
                (this.numPlanes += e);
            }
          });
      }
      function Td(e) {
        let t = new WeakMap();
        function n(e, t) {
          return t === os ? (e.mapping = rs) : t === ss && (e.mapping = as), e;
        }
        function i(e) {
          const n = e.target;
          n.removeEventListener("dispose", i);
          const r = t.get(n);
          void 0 !== r && (t.delete(n), r.dispose());
        }
        return {
          get: function (r) {
            if (r && r.isTexture) {
              const a = r.mapping;
              if (a === os || a === ss) {
                if (t.has(r)) {
                  return n(t.get(r).texture, r.mapping);
                }
                {
                  const a = r.image;
                  if (a && a.height > 0) {
                    const o = new id(a.height);
                    return (
                      o.fromEquirectangularTexture(e, r),
                      t.set(r, o),
                      r.addEventListener("dispose", i),
                      n(o.texture, r.mapping)
                    );
                  }
                  return null;
                }
              }
            }
            return r;
          },
          dispose: function () {
            t = new WeakMap();
          },
        };
      }
      class wd extends Ku {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : -1,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 1,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 1,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : -1,
            r =
              arguments.length > 4 && void 0 !== arguments[4]
                ? arguments[4]
                : 0.1,
            a =
              arguments.length > 5 && void 0 !== arguments[5]
                ? arguments[5]
                : 2e3;
          super(),
            (this.isOrthographicCamera = !0),
            (this.type = "OrthographicCamera"),
            (this.zoom = 1),
            (this.view = null),
            (this.left = e),
            (this.right = t),
            (this.top = n),
            (this.bottom = i),
            (this.near = r),
            (this.far = a),
            this.updateProjectionMatrix();
        }
        copy(e, t) {
          return (
            super.copy(e, t),
            (this.left = e.left),
            (this.right = e.right),
            (this.top = e.top),
            (this.bottom = e.bottom),
            (this.near = e.near),
            (this.far = e.far),
            (this.zoom = e.zoom),
            (this.view = null === e.view ? null : Object.assign({}, e.view)),
            this
          );
        }
        setViewOffset(e, t, n, i, r, a) {
          null === this.view &&
            (this.view = {
              enabled: !0,
              fullWidth: 1,
              fullHeight: 1,
              offsetX: 0,
              offsetY: 0,
              width: 1,
              height: 1,
            }),
            (this.view.enabled = !0),
            (this.view.fullWidth = e),
            (this.view.fullHeight = t),
            (this.view.offsetX = n),
            (this.view.offsetY = i),
            (this.view.width = r),
            (this.view.height = a),
            this.updateProjectionMatrix();
        }
        clearViewOffset() {
          null !== this.view && (this.view.enabled = !1),
            this.updateProjectionMatrix();
        }
        updateProjectionMatrix() {
          const e = (this.right - this.left) / (2 * this.zoom),
            t = (this.top - this.bottom) / (2 * this.zoom),
            n = (this.right + this.left) / 2,
            i = (this.top + this.bottom) / 2;
          let r = n - e,
            a = n + e,
            o = i + t,
            s = i - t;
          if (null !== this.view && this.view.enabled) {
            const e =
              (this.right - this.left) / this.view.fullWidth / this.zoom,
              t = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            (r += e * this.view.offsetX),
              (a = r + e * this.view.width),
              (o -= t * this.view.offsetY),
              (s = o - t * this.view.height);
          }
          this.projectionMatrix.makeOrthographic(
            r,
            a,
            o,
            s,
            this.near,
            this.far,
            this.coordinateSystem
          ),
            this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        }
        toJSON(e) {
          const t = super.toJSON(e);
          return (
            (t.object.zoom = this.zoom),
            (t.object.left = this.left),
            (t.object.right = this.right),
            (t.object.top = this.top),
            (t.object.bottom = this.bottom),
            (t.object.near = this.near),
            (t.object.far = this.far),
            null !== this.view &&
            (t.object.view = Object.assign({}, this.view)),
            t
          );
        }
      }
      const Ad = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582],
        Rd = 20,
        Cd = new wd(),
        Pd = new au();
      let Ld = null,
        Nd = 0,
        Dd = 0;
      const Ud = (1 + Math.sqrt(5)) / 2,
        Id = 1 / Ud,
        Od = [
          new Bl(1, 1, 1),
          new Bl(-1, 1, 1),
          new Bl(1, 1, -1),
          new Bl(-1, 1, -1),
          new Bl(0, Ud, Id),
          new Bl(0, Ud, -Id),
          new Bl(Id, 0, Ud),
          new Bl(-Id, 0, Ud),
          new Bl(Ud, Id, 0),
          new Bl(-Ud, Id, 0),
        ];
      class kd {
        constructor(e) {
          (this._renderer = e),
            (this._pingPongRenderTarget = null),
            (this._lodMax = 0),
            (this._cubeSize = 0),
            (this._lodPlanes = []),
            (this._sizeLods = []),
            (this._sigmas = []),
            (this._blurMaterial = null),
            (this._cubemapMaterial = null),
            (this._equirectMaterial = null),
            this._compileMaterial(this._blurMaterial);
        }
        fromScene(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : 0,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 0.1,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : 100;
          (Ld = this._renderer.getRenderTarget()),
            (Nd = this._renderer.getActiveCubeFace()),
            (Dd = this._renderer.getActiveMipmapLevel()),
            this._setSize(256);
          const r = this._allocateTargets();
          return (
            (r.depthBuffer = !0),
            this._sceneToCubeUV(e, n, i, r),
            t > 0 && this._blur(r, 0, 0, t),
            this._applyPMREM(r),
            this._cleanup(r),
            r
          );
        }
        fromEquirectangular(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : null;
          return this._fromTexture(e, t);
        }
        fromCubemap(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : null;
          return this._fromTexture(e, t);
        }
        compileCubemapShader() {
          null === this._cubemapMaterial &&
            ((this._cubemapMaterial = Vd()),
              this._compileMaterial(this._cubemapMaterial));
        }
        compileEquirectangularShader() {
          null === this._equirectMaterial &&
            ((this._equirectMaterial = Bd()),
              this._compileMaterial(this._equirectMaterial));
        }
        dispose() {
          this._dispose(),
            null !== this._cubemapMaterial && this._cubemapMaterial.dispose(),
            null !== this._equirectMaterial && this._equirectMaterial.dispose();
        }
        _setSize(e) {
          (this._lodMax = Math.floor(Math.log2(e))),
            (this._cubeSize = Math.pow(2, this._lodMax));
        }
        _dispose() {
          null !== this._blurMaterial && this._blurMaterial.dispose(),
            null !== this._pingPongRenderTarget &&
            this._pingPongRenderTarget.dispose();
          for (let e = 0; e < this._lodPlanes.length; e++)
            this._lodPlanes[e].dispose();
        }
        _cleanup(e) {
          this._renderer.setRenderTarget(Ld, Nd, Dd),
            (e.scissorTest = !1),
            zd(e, 0, 0, e.width, e.height);
        }
        _fromTexture(e, t) {
          e.mapping === rs || e.mapping === as
            ? this._setSize(
              0 === e.image.length
                ? 16
                : e.image[0].width || e.image[0].image.width
            )
            : this._setSize(e.image.width / 4),
            (Ld = this._renderer.getRenderTarget()),
            (Nd = this._renderer.getActiveCubeFace()),
            (Dd = this._renderer.getActiveMipmapLevel());
          const n = t || this._allocateTargets();
          return (
            this._textureToCubeUV(e, n),
            this._applyPMREM(n),
            this._cleanup(n),
            n
          );
        }
        _allocateTargets() {
          const e = 3 * Math.max(this._cubeSize, 112),
            t = 4 * this._cubeSize,
            n = {
              magFilter: ms,
              minFilter: ms,
              generateMipmaps: !1,
              type: Es,
              format: Ts,
              colorSpace: Vs,
              depthBuffer: !1,
            },
            i = Fd(e, t, n);
          if (
            null === this._pingPongRenderTarget ||
            this._pingPongRenderTarget.width !== e ||
            this._pingPongRenderTarget.height !== t
          ) {
            null !== this._pingPongRenderTarget && this._dispose(),
              (this._pingPongRenderTarget = Fd(e, t, n));
            const { _lodMax: i } = this;
            ({
              sizeLods: this._sizeLods,
              lodPlanes: this._lodPlanes,
              sigmas: this._sigmas,
            } = (function (e) {
              const t = [],
                n = [],
                i = [];
              let r = e;
              const a = e - 4 + 1 + Ad.length;
              for (let o = 0; o < a; o++) {
                const a = Math.pow(2, r);
                n.push(a);
                let s = 1 / a;
                o > e - 4 ? (s = Ad[o - e + 4 - 1]) : 0 === o && (s = 0),
                  i.push(s);
                const l = 1 / (a - 2),
                  c = -l,
                  u = 1 + l,
                  d = [c, c, u, c, u, u, c, c, u, u, c, u],
                  h = 6,
                  p = 6,
                  f = 3,
                  m = 2,
                  g = 1,
                  v = new Float32Array(f * p * h),
                  _ = new Float32Array(m * p * h),
                  y = new Float32Array(g * p * h);
                for (let e = 0; e < h; e++) {
                  const t = ((e % 3) * 2) / 3 - 1,
                    n = e > 2 ? 0 : -1,
                    i = [
                      t,
                      n,
                      0,
                      t + 2 / 3,
                      n,
                      0,
                      t + 2 / 3,
                      n + 1,
                      0,
                      t,
                      n,
                      0,
                      t + 2 / 3,
                      n + 1,
                      0,
                      t,
                      n + 1,
                      0,
                    ];
                  v.set(i, f * p * e), _.set(d, m * p * e);
                  const r = [e, e, e, e, e, e];
                  y.set(r, g * p * e);
                }
                const x = new Eu();
                x.setAttribute("position", new hu(v, f)),
                  x.setAttribute("uv", new hu(_, m)),
                  x.setAttribute("faceIndex", new hu(y, g)),
                  t.push(x),
                  r > 4 && r--;
              }
              return { lodPlanes: t, sizeLods: n, sigmas: i };
            })(i)),
              (this._blurMaterial = (function (e, t, n) {
                const i = new Float32Array(Rd),
                  r = new Bl(0, 1, 0),
                  a = new qu({
                    name: "SphericalGaussianBlur",
                    defines: {
                      n: Rd,
                      CUBEUV_TEXEL_WIDTH: 1 / t,
                      CUBEUV_TEXEL_HEIGHT: 1 / n,
                      CUBEUV_MAX_MIP: "".concat(e, ".0"),
                    },
                    uniforms: {
                      envMap: { value: null },
                      samples: { value: 1 },
                      weights: { value: i },
                      latitudinal: { value: !1 },
                      dTheta: { value: 0 },
                      mipInt: { value: 0 },
                      poleAxis: { value: r },
                    },
                    vertexShader:
                      "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",
                    fragmentShader:
                      "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",
                    blending: 0,
                    depthTest: !1,
                    depthWrite: !1,
                  });
                return a;
              })(i, e, t));
          }
          return i;
        }
        _compileMaterial(e) {
          const t = new Vu(this._lodPlanes[0], e);
          this._renderer.compile(t, Cd);
        }
        _sceneToCubeUV(e, t, n, i) {
          const r = new $u(90, 1, t, n),
            a = [1, -1, 1, 1, 1, 1],
            o = [1, 1, 1, -1, -1, -1],
            s = this._renderer,
            l = s.autoClear,
            c = s.toneMapping;
          s.getClearColor(Pd), (s.toneMapping = Zo), (s.autoClear = !1);
          const u = new cu({
            name: "PMREM.Background",
            side: jo,
            depthWrite: !1,
            depthTest: !1,
          }),
            d = new Vu(new Gu(), u);
          let h = !1;
          const p = e.background;
          p
            ? p.isColor && (u.color.copy(p), (e.background = null), (h = !0))
            : (u.color.copy(Pd), (h = !0));
          for (let f = 0; f < 6; f++) {
            const t = f % 3;
            0 === t
              ? (r.up.set(0, a[f], 0), r.lookAt(o[f], 0, 0))
              : 1 === t
                ? (r.up.set(0, 0, a[f]), r.lookAt(0, o[f], 0))
                : (r.up.set(0, a[f], 0), r.lookAt(0, 0, o[f]));
            const n = this._cubeSize;
            zd(i, t * n, f > 2 ? n : 0, n, n),
              s.setRenderTarget(i),
              h && s.render(d, r),
              s.render(e, r);
          }
          d.geometry.dispose(),
            d.material.dispose(),
            (s.toneMapping = c),
            (s.autoClear = l),
            (e.background = p);
        }
        _textureToCubeUV(e, t) {
          const n = this._renderer,
            i = e.mapping === rs || e.mapping === as;
          i
            ? (null === this._cubemapMaterial && (this._cubemapMaterial = Vd()),
              (this._cubemapMaterial.uniforms.flipEnvMap.value =
                !1 === e.isRenderTargetTexture ? -1 : 1))
            : null === this._equirectMaterial &&
            (this._equirectMaterial = Bd());
          const r = i ? this._cubemapMaterial : this._equirectMaterial,
            a = new Vu(this._lodPlanes[0], r);
          r.uniforms.envMap.value = e;
          const o = this._cubeSize;
          zd(t, 0, 0, 3 * o, 2 * o), n.setRenderTarget(t), n.render(a, Cd);
        }
        _applyPMREM(e) {
          const t = this._renderer,
            n = t.autoClear;
          t.autoClear = !1;
          for (let i = 1; i < this._lodPlanes.length; i++) {
            const t = Math.sqrt(
              this._sigmas[i] * this._sigmas[i] -
              this._sigmas[i - 1] * this._sigmas[i - 1]
            ),
              n = Od[(i - 1) % Od.length];
            this._blur(e, i - 1, i, t, n);
          }
          t.autoClear = n;
        }
        _blur(e, t, n, i, r) {
          const a = this._pingPongRenderTarget;
          this._halfBlur(e, a, t, n, i, "latitudinal", r),
            this._halfBlur(a, e, n, n, i, "longitudinal", r);
        }
        _halfBlur(e, t, n, i, r, a, o) {
          const s = this._renderer,
            l = this._blurMaterial;
          "latitudinal" !== a &&
            "longitudinal" !== a &&
            console.error(
              "blur direction must be either latitudinal or longitudinal!"
            );
          const c = new Vu(this._lodPlanes[i], l),
            u = l.uniforms,
            d = this._sizeLods[n] - 1,
            h = isFinite(r) ? Math.PI / (2 * d) : (2 * Math.PI) / 39,
            p = r / h,
            f = isFinite(r) ? 1 + Math.floor(3 * p) : Rd;
          f > Rd &&
            console.warn(
              "sigmaRadians, "
                .concat(r, ", is too large and will clip, as it requested ")
                .concat(f, " samples when the maximum is set to ")
                .concat(Rd)
            );
          const m = [];
          let g = 0;
          for (let y = 0; y < Rd; ++y) {
            const e = y / p,
              t = Math.exp((-e * e) / 2);
            m.push(t), 0 === y ? (g += t) : y < f && (g += 2 * t);
          }
          for (let y = 0; y < m.length; y++) m[y] = m[y] / g;
          (u.envMap.value = e.texture),
            (u.samples.value = f),
            (u.weights.value = m),
            (u.latitudinal.value = "latitudinal" === a),
            o && (u.poleAxis.value = o);
          const { _lodMax: v } = this;
          (u.dTheta.value = h), (u.mipInt.value = v - n);
          const _ = this._sizeLods[i];
          zd(
            t,
            3 * _ * (i > v - 4 ? i - v + 4 : 0),
            4 * (this._cubeSize - _),
            3 * _,
            2 * _
          ),
            s.setRenderTarget(t),
            s.render(c, Cd);
        }
      }
      function Fd(e, t, n) {
        const i = new Ol(e, t, n);
        return (
          (i.texture.mapping = ls),
          (i.texture.name = "PMREM.cubeUv"),
          (i.scissorTest = !0),
          i
        );
      }
      function zd(e, t, n, i, r) {
        e.viewport.set(t, n, i, r), e.scissor.set(t, n, i, r);
      }
      function Bd() {
        return new qu({
          name: "EquirectangularToCubeUV",
          uniforms: { envMap: { value: null } },
          vertexShader:
            "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",
          fragmentShader:
            "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",
          blending: 0,
          depthTest: !1,
          depthWrite: !1,
        });
      }
      function Vd() {
        return new qu({
          name: "CubemapToCubeUV",
          uniforms: { envMap: { value: null }, flipEnvMap: { value: -1 } },
          vertexShader:
            "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",
          fragmentShader:
            "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",
          blending: 0,
          depthTest: !1,
          depthWrite: !1,
        });
      }
      function Hd(e) {
        let t = new WeakMap(),
          n = null;
        function i(e) {
          const n = e.target;
          n.removeEventListener("dispose", i);
          const r = t.get(n);
          void 0 !== r && (t.delete(n), r.dispose());
        }
        return {
          get: function (r) {
            if (r && r.isTexture) {
              const a = r.mapping,
                o = a === os || a === ss,
                s = a === rs || a === as;
              if (o || s) {
                if (r.isRenderTargetTexture && !0 === r.needsPMREMUpdate) {
                  r.needsPMREMUpdate = !1;
                  let i = t.get(r);
                  return (
                    null === n && (n = new kd(e)),
                    (i = o ? n.fromEquirectangular(r, i) : n.fromCubemap(r, i)),
                    t.set(r, i),
                    i.texture
                  );
                }
                if (t.has(r)) return t.get(r).texture;
                {
                  const a = r.image;
                  if (
                    (o && a && a.height > 0) ||
                    (s &&
                      a &&
                      (function (e) {
                        let t = 0;
                        const n = 6;
                        for (let i = 0; i < n; i++) void 0 !== e[i] && t++;
                        return t === n;
                      })(a))
                  ) {
                    null === n && (n = new kd(e));
                    const a = o ? n.fromEquirectangular(r) : n.fromCubemap(r);
                    return (
                      t.set(r, a), r.addEventListener("dispose", i), a.texture
                    );
                  }
                  return null;
                }
              }
            }
            return r;
          },
          dispose: function () {
            (t = new WeakMap()), null !== n && (n.dispose(), (n = null));
          },
        };
      }
      function Gd(e) {
        const t = {};
        function n(n) {
          if (void 0 !== t[n]) return t[n];
          let i;
          switch (n) {
            case "WEBGL_depth_texture":
              i =
                e.getExtension("WEBGL_depth_texture") ||
                e.getExtension("MOZ_WEBGL_depth_texture") ||
                e.getExtension("WEBKIT_WEBGL_depth_texture");
              break;
            case "EXT_texture_filter_anisotropic":
              i =
                e.getExtension("EXT_texture_filter_anisotropic") ||
                e.getExtension("MOZ_EXT_texture_filter_anisotropic") ||
                e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
              break;
            case "WEBGL_compressed_texture_s3tc":
              i =
                e.getExtension("WEBGL_compressed_texture_s3tc") ||
                e.getExtension("MOZ_WEBGL_compressed_texture_s3tc") ||
                e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
              break;
            case "WEBGL_compressed_texture_pvrtc":
              i =
                e.getExtension("WEBGL_compressed_texture_pvrtc") ||
                e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
              break;
            default:
              i = e.getExtension(n);
          }
          return (t[n] = i), i;
        }
        return {
          has: function (e) {
            return null !== n(e);
          },
          init: function (e) {
            e.isWebGL2
              ? (n("EXT_color_buffer_float"), n("WEBGL_clip_cull_distance"))
              : (n("WEBGL_depth_texture"),
                n("OES_texture_float"),
                n("OES_texture_half_float"),
                n("OES_texture_half_float_linear"),
                n("OES_standard_derivatives"),
                n("OES_element_index_uint"),
                n("OES_vertex_array_object"),
                n("ANGLE_instanced_arrays")),
              n("OES_texture_float_linear"),
              n("EXT_color_buffer_half_float"),
              n("WEBGL_multisampled_render_to_texture");
          },
          get: function (e) {
            const t = n(e);
            return (
              null === t &&
              console.warn(
                "THREE.WebGLRenderer: " + e + " extension not supported."
              ),
              t
            );
          },
        };
      }
      function Wd(e, t, n, i) {
        const r = {},
          a = new WeakMap();
        function o(e) {
          const s = e.target;
          null !== s.index && t.remove(s.index);
          for (const n in s.attributes) t.remove(s.attributes[n]);
          for (const n in s.morphAttributes) {
            const e = s.morphAttributes[n];
            for (let n = 0, i = e.length; n < i; n++) t.remove(e[n]);
          }
          s.removeEventListener("dispose", o), delete r[s.id];
          const l = a.get(s);
          l && (t.remove(l), a.delete(s)),
            i.releaseStatesOfGeometry(s),
            !0 === s.isInstancedBufferGeometry && delete s._maxInstanceCount,
            n.memory.geometries--;
        }
        function s(e) {
          const n = [],
            i = e.index,
            r = e.attributes.position;
          let o = 0;
          if (null !== i) {
            const e = i.array;
            o = i.version;
            for (let t = 0, i = e.length; t < i; t += 3) {
              const i = e[t + 0],
                r = e[t + 1],
                a = e[t + 2];
              n.push(i, r, r, a, a, i);
            }
          } else {
            if (void 0 === r) return;
            {
              const e = r.array;
              o = r.version;
              for (let t = 0, i = e.length / 3 - 1; t < i; t += 3) {
                const e = t + 0,
                  i = t + 1,
                  r = t + 2;
                n.push(e, i, i, r, r, e);
              }
            }
          }
          const s = new (ml(n) ? fu : pu)(n, 1);
          s.version = o;
          const l = a.get(e);
          l && t.remove(l), a.set(e, s);
        }
        return {
          get: function (e, t) {
            return (
              !0 === r[t.id] ||
              (t.addEventListener("dispose", o),
                (r[t.id] = !0),
                n.memory.geometries++),
              t
            );
          },
          update: function (n) {
            const i = n.attributes;
            for (const a in i) t.update(i[a], e.ARRAY_BUFFER);
            const r = n.morphAttributes;
            for (const a in r) {
              const n = r[a];
              for (let i = 0, r = n.length; i < r; i++)
                t.update(n[i], e.ARRAY_BUFFER);
            }
          },
          getWireframeAttribute: function (e) {
            const t = a.get(e);
            if (t) {
              const n = e.index;
              null !== n && t.version < n.version && s(e);
            } else s(e);
            return a.get(e);
          },
        };
      }
      function jd(e, t, n, i) {
        const r = i.isWebGL2;
        let a, o, s;
        (this.setMode = function (e) {
          a = e;
        }),
          (this.setIndex = function (e) {
            (o = e.type), (s = e.bytesPerElement);
          }),
          (this.render = function (t, i) {
            e.drawElements(a, i, o, t * s), n.update(i, a, 1);
          }),
          (this.renderInstances = function (i, l, c) {
            if (0 === c) return;
            let u, d;
            if (r) (u = e), (d = "drawElementsInstanced");
            else if (
              ((u = t.get("ANGLE_instanced_arrays")),
                (d = "drawElementsInstancedANGLE"),
                null === u)
            )
              return void console.error(
                "THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."
              );
            u[d](a, l, o, i * s, c), n.update(l, a, c);
          }),
          (this.renderMultiDraw = function (e, i, r) {
            if (0 === r) return;
            const l = t.get("WEBGL_multi_draw");
            if (null === l)
              for (let t = 0; t < r; t++) this.render(e[t] / s, i[t]);
            else {
              l.multiDrawElementsWEBGL(a, i, 0, o, e, 0, r);
              let t = 0;
              for (let e = 0; e < r; e++) t += i[e];
              n.update(t, a, 1);
            }
          });
      }
      function Xd(e) {
        const t = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 };
        return {
          memory: { geometries: 0, textures: 0 },
          render: t,
          programs: null,
          autoReset: !0,
          reset: function () {
            (t.calls = 0), (t.triangles = 0), (t.points = 0), (t.lines = 0);
          },
          update: function (n, i, r) {
            switch ((t.calls++, i)) {
              case e.TRIANGLES:
                t.triangles += r * (n / 3);
                break;
              case e.LINES:
                t.lines += r * (n / 2);
                break;
              case e.LINE_STRIP:
                t.lines += r * (n - 1);
                break;
              case e.LINE_LOOP:
                t.lines += r * n;
                break;
              case e.POINTS:
                t.points += r * n;
                break;
              default:
                console.error("THREE.WebGLInfo: Unknown draw mode:", i);
            }
          },
        };
      }
      function Yd(e, t) {
        return e[0] - t[0];
      }
      function qd(e, t) {
        return Math.abs(t[1]) - Math.abs(e[1]);
      }
      function Kd(e, t, n) {
        const i = {},
          r = new Float32Array(8),
          a = new WeakMap(),
          o = new Ul(),
          s = [];
        for (let l = 0; l < 8; l++) s[l] = [l, 0];
        return {
          update: function (l, c, u) {
            const d = l.morphTargetInfluences;
            if (!0 === t.isWebGL2) {
              const h =
                c.morphAttributes.position ||
                c.morphAttributes.normal ||
                c.morphAttributes.color,
                p = void 0 !== h ? h.length : 0;
              let f = a.get(c);
              if (void 0 === f || f.count !== p) {
                void 0 !== f && f.texture.dispose();
                const m = void 0 !== c.morphAttributes.position,
                  g = void 0 !== c.morphAttributes.normal,
                  v = void 0 !== c.morphAttributes.color,
                  _ = c.morphAttributes.position || [],
                  y = c.morphAttributes.normal || [],
                  x = c.morphAttributes.color || [];
                let b = 0;
                !0 === m && (b = 1), !0 === g && (b = 2), !0 === v && (b = 3);
                let S = c.attributes.position.count * b,
                  E = 1;
                S > t.maxTextureSize &&
                  ((E = Math.ceil(S / t.maxTextureSize)),
                    (S = t.maxTextureSize));
                const M = new Float32Array(S * E * 4 * p),
                  T = new kl(M, S, E, p);
                (T.type = Ss), (T.needsUpdate = !0);
                const w = 4 * b;
                for (let R = 0; R < p; R++) {
                  const C = _[R],
                    P = y[R],
                    L = x[R],
                    N = S * E * 4 * R;
                  for (let D = 0; D < C.count; D++) {
                    const U = D * w;
                    !0 === m &&
                      (o.fromBufferAttribute(C, D),
                        (M[N + U + 0] = o.x),
                        (M[N + U + 1] = o.y),
                        (M[N + U + 2] = o.z),
                        (M[N + U + 3] = 0)),
                      !0 === g &&
                      (o.fromBufferAttribute(P, D),
                        (M[N + U + 4] = o.x),
                        (M[N + U + 5] = o.y),
                        (M[N + U + 6] = o.z),
                        (M[N + U + 7] = 0)),
                      !0 === v &&
                      (o.fromBufferAttribute(L, D),
                        (M[N + U + 8] = o.x),
                        (M[N + U + 9] = o.y),
                        (M[N + U + 10] = o.z),
                        (M[N + U + 11] = 4 === L.itemSize ? o.w : 1));
                  }
                }
                function A() {
                  T.dispose(), a.delete(c), c.removeEventListener("dispose", A);
                }
                (f = { count: p, texture: T, size: new hl(S, E) }),
                  a.set(c, f),
                  c.addEventListener("dispose", A);
              }
              if (!0 === l.isInstancedMesh && null !== l.morphTexture)
                u.getUniforms().setValue(e, "morphTexture", l.morphTexture, n);
              else {
                let I = 0;
                for (let k = 0; k < d.length; k++) I += d[k];
                const O = c.morphTargetsRelative ? 1 : 1 - I;
                u.getUniforms().setValue(e, "morphTargetBaseInfluence", O),
                  u.getUniforms().setValue(e, "morphTargetInfluences", d);
              }
              u.getUniforms().setValue(e, "morphTargetsTexture", f.texture, n),
                u.getUniforms().setValue(e, "morphTargetsTextureSize", f.size);
            } else {
              const F = void 0 === d ? 0 : d.length;
              let z = i[c.id];
              if (void 0 === z || z.length !== F) {
                z = [];
                for (let W = 0; W < F; W++) z[W] = [W, 0];
                i[c.id] = z;
              }
              for (let j = 0; j < F; j++) {
                const X = z[j];
                (X[0] = j), (X[1] = d[j]);
              }
              z.sort(qd);
              for (let Y = 0; Y < 8; Y++)
                Y < F && z[Y][1]
                  ? ((s[Y][0] = z[Y][0]), (s[Y][1] = z[Y][1]))
                  : ((s[Y][0] = Number.MAX_SAFE_INTEGER), (s[Y][1] = 0));
              s.sort(Yd);
              const B = c.morphAttributes.position,
                V = c.morphAttributes.normal;
              let H = 0;
              for (let q = 0; q < 8; q++) {
                const K = s[q],
                  Z = K[0],
                  J = K[1];
                Z !== Number.MAX_SAFE_INTEGER && J
                  ? (B &&
                    c.getAttribute("morphTarget" + q) !== B[Z] &&
                    c.setAttribute("morphTarget" + q, B[Z]),
                    V &&
                    c.getAttribute("morphNormal" + q) !== V[Z] &&
                    c.setAttribute("morphNormal" + q, V[Z]),
                    (r[q] = J),
                    (H += J))
                  : (B &&
                    !0 === c.hasAttribute("morphTarget" + q) &&
                    c.deleteAttribute("morphTarget" + q),
                    V &&
                    !0 === c.hasAttribute("morphNormal" + q) &&
                    c.deleteAttribute("morphNormal" + q),
                    (r[q] = 0));
              }
              const G = c.morphTargetsRelative ? 1 : 1 - H;
              u.getUniforms().setValue(e, "morphTargetBaseInfluence", G),
                u.getUniforms().setValue(e, "morphTargetInfluences", r);
            }
          },
        };
      }
      function Zd(e, t, n, i) {
        let r = new WeakMap();
        function a(e) {
          const t = e.target;
          t.removeEventListener("dispose", a),
            n.remove(t.instanceMatrix),
            null !== t.instanceColor && n.remove(t.instanceColor);
        }
        return {
          update: function (o) {
            const s = i.render.frame,
              l = o.geometry,
              c = t.get(o, l);
            if (
              (r.get(c) !== s && (t.update(c), r.set(c, s)),
                o.isInstancedMesh &&
                (!1 === o.hasEventListener("dispose", a) &&
                  o.addEventListener("dispose", a),
                  r.get(o) !== s &&
                  (n.update(o.instanceMatrix, e.ARRAY_BUFFER),
                    null !== o.instanceColor &&
                    n.update(o.instanceColor, e.ARRAY_BUFFER),
                    r.set(o, s))),
                o.isSkinnedMesh)
            ) {
              const e = o.skeleton;
              r.get(e) !== s && (e.update(), r.set(e, s));
            }
            return c;
          },
          dispose: function () {
            r = new WeakMap();
          },
        };
      }
      class Jd extends Dl {
        constructor(e, t, n, i, r, a, o, s, l, c) {
          if ((c = void 0 !== c ? c : ws) !== ws && c !== As)
            throw new Error(
              "DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat"
            );
          void 0 === n && c === ws && (n = bs),
            void 0 === n && c === As && (n = Ms),
            super(null, i, r, a, o, s, c, n, l),
            (this.isDepthTexture = !0),
            (this.image = { width: e, height: t }),
            (this.magFilter = void 0 !== o ? o : hs),
            (this.minFilter = void 0 !== s ? s : hs),
            (this.flipY = !1),
            (this.generateMipmaps = !1),
            (this.compareFunction = null);
        }
        copy(e) {
          return (
            super.copy(e), (this.compareFunction = e.compareFunction), this
          );
        }
        toJSON(e) {
          const t = super.toJSON(e);
          return (
            null !== this.compareFunction &&
            (t.compareFunction = this.compareFunction),
            t
          );
        }
      }
      const Qd = new Dl(),
        $d = new Jd(1, 1);
      $d.compareFunction = 515;
      const eh = new kl(),
        th = new Fl(),
        nh = new nd(),
        ih = [],
        rh = [],
        ah = new Float32Array(16),
        oh = new Float32Array(9),
        sh = new Float32Array(4);
      function lh(e, t, n) {
        const i = e[0];
        if (i <= 0 || i > 0) return e;
        const r = t * n;
        let a = ih[r];
        if (
          (void 0 === a && ((a = new Float32Array(r)), (ih[r] = a)), 0 !== t)
        ) {
          i.toArray(a, 0);
          for (let i = 1, r = 0; i !== t; ++i) (r += n), e[i].toArray(a, r);
        }
        return a;
      }
      function ch(e, t) {
        if (e.length !== t.length) return !1;
        for (let n = 0, i = e.length; n < i; n++) if (e[n] !== t[n]) return !1;
        return !0;
      }
      function uh(e, t) {
        for (let n = 0, i = t.length; n < i; n++) e[n] = t[n];
      }
      function dh(e, t) {
        let n = rh[t];
        void 0 === n && ((n = new Int32Array(t)), (rh[t] = n));
        for (let i = 0; i !== t; ++i) n[i] = e.allocateTextureUnit();
        return n;
      }
      function hh(e, t) {
        const n = this.cache;
        n[0] !== t && (e.uniform1f(this.addr, t), (n[0] = t));
      }
      function ph(e, t) {
        const n = this.cache;
        if (void 0 !== t.x)
          (n[0] === t.x && n[1] === t.y) ||
            (e.uniform2f(this.addr, t.x, t.y), (n[0] = t.x), (n[1] = t.y));
        else {
          if (ch(n, t)) return;
          e.uniform2fv(this.addr, t), uh(n, t);
        }
      }
      function fh(e, t) {
        const n = this.cache;
        if (void 0 !== t.x)
          (n[0] === t.x && n[1] === t.y && n[2] === t.z) ||
            (e.uniform3f(this.addr, t.x, t.y, t.z),
              (n[0] = t.x),
              (n[1] = t.y),
              (n[2] = t.z));
        else if (void 0 !== t.r)
          (n[0] === t.r && n[1] === t.g && n[2] === t.b) ||
            (e.uniform3f(this.addr, t.r, t.g, t.b),
              (n[0] = t.r),
              (n[1] = t.g),
              (n[2] = t.b));
        else {
          if (ch(n, t)) return;
          e.uniform3fv(this.addr, t), uh(n, t);
        }
      }
      function mh(e, t) {
        const n = this.cache;
        if (void 0 !== t.x)
          (n[0] === t.x && n[1] === t.y && n[2] === t.z && n[3] === t.w) ||
            (e.uniform4f(this.addr, t.x, t.y, t.z, t.w),
              (n[0] = t.x),
              (n[1] = t.y),
              (n[2] = t.z),
              (n[3] = t.w));
        else {
          if (ch(n, t)) return;
          e.uniform4fv(this.addr, t), uh(n, t);
        }
      }
      function gh(e, t) {
        const n = this.cache,
          i = t.elements;
        if (void 0 === i) {
          if (ch(n, t)) return;
          e.uniformMatrix2fv(this.addr, !1, t), uh(n, t);
        } else {
          if (ch(n, i)) return;
          sh.set(i), e.uniformMatrix2fv(this.addr, !1, sh), uh(n, i);
        }
      }
      function vh(e, t) {
        const n = this.cache,
          i = t.elements;
        if (void 0 === i) {
          if (ch(n, t)) return;
          e.uniformMatrix3fv(this.addr, !1, t), uh(n, t);
        } else {
          if (ch(n, i)) return;
          oh.set(i), e.uniformMatrix3fv(this.addr, !1, oh), uh(n, i);
        }
      }
      function _h(e, t) {
        const n = this.cache,
          i = t.elements;
        if (void 0 === i) {
          if (ch(n, t)) return;
          e.uniformMatrix4fv(this.addr, !1, t), uh(n, t);
        } else {
          if (ch(n, i)) return;
          ah.set(i), e.uniformMatrix4fv(this.addr, !1, ah), uh(n, i);
        }
      }
      function yh(e, t) {
        const n = this.cache;
        n[0] !== t && (e.uniform1i(this.addr, t), (n[0] = t));
      }
      function xh(e, t) {
        const n = this.cache;
        if (void 0 !== t.x)
          (n[0] === t.x && n[1] === t.y) ||
            (e.uniform2i(this.addr, t.x, t.y), (n[0] = t.x), (n[1] = t.y));
        else {
          if (ch(n, t)) return;
          e.uniform2iv(this.addr, t), uh(n, t);
        }
      }
      function bh(e, t) {
        const n = this.cache;
        if (void 0 !== t.x)
          (n[0] === t.x && n[1] === t.y && n[2] === t.z) ||
            (e.uniform3i(this.addr, t.x, t.y, t.z),
              (n[0] = t.x),
              (n[1] = t.y),
              (n[2] = t.z));
        else {
          if (ch(n, t)) return;
          e.uniform3iv(this.addr, t), uh(n, t);
        }
      }
      function Sh(e, t) {
        const n = this.cache;
        if (void 0 !== t.x)
          (n[0] === t.x && n[1] === t.y && n[2] === t.z && n[3] === t.w) ||
            (e.uniform4i(this.addr, t.x, t.y, t.z, t.w),
              (n[0] = t.x),
              (n[1] = t.y),
              (n[2] = t.z),
              (n[3] = t.w));
        else {
          if (ch(n, t)) return;
          e.uniform4iv(this.addr, t), uh(n, t);
        }
      }
      function Eh(e, t) {
        const n = this.cache;
        n[0] !== t && (e.uniform1ui(this.addr, t), (n[0] = t));
      }
      function Mh(e, t) {
        const n = this.cache;
        if (void 0 !== t.x)
          (n[0] === t.x && n[1] === t.y) ||
            (e.uniform2ui(this.addr, t.x, t.y), (n[0] = t.x), (n[1] = t.y));
        else {
          if (ch(n, t)) return;
          e.uniform2uiv(this.addr, t), uh(n, t);
        }
      }
      function Th(e, t) {
        const n = this.cache;
        if (void 0 !== t.x)
          (n[0] === t.x && n[1] === t.y && n[2] === t.z) ||
            (e.uniform3ui(this.addr, t.x, t.y, t.z),
              (n[0] = t.x),
              (n[1] = t.y),
              (n[2] = t.z));
        else {
          if (ch(n, t)) return;
          e.uniform3uiv(this.addr, t), uh(n, t);
        }
      }
      function wh(e, t) {
        const n = this.cache;
        if (void 0 !== t.x)
          (n[0] === t.x && n[1] === t.y && n[2] === t.z && n[3] === t.w) ||
            (e.uniform4ui(this.addr, t.x, t.y, t.z, t.w),
              (n[0] = t.x),
              (n[1] = t.y),
              (n[2] = t.z),
              (n[3] = t.w));
        else {
          if (ch(n, t)) return;
          e.uniform4uiv(this.addr, t), uh(n, t);
        }
      }
      function Ah(e, t, n) {
        const i = this.cache,
          r = n.allocateTextureUnit();
        i[0] !== r && (e.uniform1i(this.addr, r), (i[0] = r));
        const a = this.type === e.SAMPLER_2D_SHADOW ? $d : Qd;
        n.setTexture2D(t || a, r);
      }
      function Rh(e, t, n) {
        const i = this.cache,
          r = n.allocateTextureUnit();
        i[0] !== r && (e.uniform1i(this.addr, r), (i[0] = r)),
          n.setTexture3D(t || th, r);
      }
      function Ch(e, t, n) {
        const i = this.cache,
          r = n.allocateTextureUnit();
        i[0] !== r && (e.uniform1i(this.addr, r), (i[0] = r)),
          n.setTextureCube(t || nh, r);
      }
      function Ph(e, t, n) {
        const i = this.cache,
          r = n.allocateTextureUnit();
        i[0] !== r && (e.uniform1i(this.addr, r), (i[0] = r)),
          n.setTexture2DArray(t || eh, r);
      }
      function Lh(e, t) {
        e.uniform1fv(this.addr, t);
      }
      function Nh(e, t) {
        const n = lh(t, this.size, 2);
        e.uniform2fv(this.addr, n);
      }
      function Dh(e, t) {
        const n = lh(t, this.size, 3);
        e.uniform3fv(this.addr, n);
      }
      function Uh(e, t) {
        const n = lh(t, this.size, 4);
        e.uniform4fv(this.addr, n);
      }
      function Ih(e, t) {
        const n = lh(t, this.size, 4);
        e.uniformMatrix2fv(this.addr, !1, n);
      }
      function Oh(e, t) {
        const n = lh(t, this.size, 9);
        e.uniformMatrix3fv(this.addr, !1, n);
      }
      function kh(e, t) {
        const n = lh(t, this.size, 16);
        e.uniformMatrix4fv(this.addr, !1, n);
      }
      function Fh(e, t) {
        e.uniform1iv(this.addr, t);
      }
      function zh(e, t) {
        e.uniform2iv(this.addr, t);
      }
      function Bh(e, t) {
        e.uniform3iv(this.addr, t);
      }
      function Vh(e, t) {
        e.uniform4iv(this.addr, t);
      }
      function Hh(e, t) {
        e.uniform1uiv(this.addr, t);
      }
      function Gh(e, t) {
        e.uniform2uiv(this.addr, t);
      }
      function Wh(e, t) {
        e.uniform3uiv(this.addr, t);
      }
      function jh(e, t) {
        e.uniform4uiv(this.addr, t);
      }
      function Xh(e, t, n) {
        const i = this.cache,
          r = t.length,
          a = dh(n, r);
        ch(i, a) || (e.uniform1iv(this.addr, a), uh(i, a));
        for (let o = 0; o !== r; ++o) n.setTexture2D(t[o] || Qd, a[o]);
      }
      function Yh(e, t, n) {
        const i = this.cache,
          r = t.length,
          a = dh(n, r);
        ch(i, a) || (e.uniform1iv(this.addr, a), uh(i, a));
        for (let o = 0; o !== r; ++o) n.setTexture3D(t[o] || th, a[o]);
      }
      function qh(e, t, n) {
        const i = this.cache,
          r = t.length,
          a = dh(n, r);
        ch(i, a) || (e.uniform1iv(this.addr, a), uh(i, a));
        for (let o = 0; o !== r; ++o) n.setTextureCube(t[o] || nh, a[o]);
      }
      function Kh(e, t, n) {
        const i = this.cache,
          r = t.length,
          a = dh(n, r);
        ch(i, a) || (e.uniform1iv(this.addr, a), uh(i, a));
        for (let o = 0; o !== r; ++o) n.setTexture2DArray(t[o] || eh, a[o]);
      }
      class Zh {
        constructor(e, t, n) {
          (this.id = e),
            (this.addr = n),
            (this.cache = []),
            (this.type = t.type),
            (this.setValue = (function (e) {
              switch (e) {
                case 5126:
                  return hh;
                case 35664:
                  return ph;
                case 35665:
                  return fh;
                case 35666:
                  return mh;
                case 35674:
                  return gh;
                case 35675:
                  return vh;
                case 35676:
                  return _h;
                case 5124:
                case 35670:
                  return yh;
                case 35667:
                case 35671:
                  return xh;
                case 35668:
                case 35672:
                  return bh;
                case 35669:
                case 35673:
                  return Sh;
                case 5125:
                  return Eh;
                case 36294:
                  return Mh;
                case 36295:
                  return Th;
                case 36296:
                  return wh;
                case 35678:
                case 36198:
                case 36298:
                case 36306:
                case 35682:
                  return Ah;
                case 35679:
                case 36299:
                case 36307:
                  return Rh;
                case 35680:
                case 36300:
                case 36308:
                case 36293:
                  return Ch;
                case 36289:
                case 36303:
                case 36311:
                case 36292:
                  return Ph;
              }
            })(t.type));
        }
      }
      class Jh {
        constructor(e, t, n) {
          (this.id = e),
            (this.addr = n),
            (this.cache = []),
            (this.type = t.type),
            (this.size = t.size),
            (this.setValue = (function (e) {
              switch (e) {
                case 5126:
                  return Lh;
                case 35664:
                  return Nh;
                case 35665:
                  return Dh;
                case 35666:
                  return Uh;
                case 35674:
                  return Ih;
                case 35675:
                  return Oh;
                case 35676:
                  return kh;
                case 5124:
                case 35670:
                  return Fh;
                case 35667:
                case 35671:
                  return zh;
                case 35668:
                case 35672:
                  return Bh;
                case 35669:
                case 35673:
                  return Vh;
                case 5125:
                  return Hh;
                case 36294:
                  return Gh;
                case 36295:
                  return Wh;
                case 36296:
                  return jh;
                case 35678:
                case 36198:
                case 36298:
                case 36306:
                case 35682:
                  return Xh;
                case 35679:
                case 36299:
                case 36307:
                  return Yh;
                case 35680:
                case 36300:
                case 36308:
                case 36293:
                  return qh;
                case 36289:
                case 36303:
                case 36311:
                case 36292:
                  return Kh;
              }
            })(t.type));
        }
      }
      class Qh {
        constructor(e) {
          (this.id = e), (this.seq = []), (this.map = {});
        }
        setValue(e, t, n) {
          const i = this.seq;
          for (let r = 0, a = i.length; r !== a; ++r) {
            const a = i[r];
            a.setValue(e, t[a.id], n);
          }
        }
      }
      const $h = /(\w+)(\])?(\[|\.)?/g;
      function ep(e, t) {
        e.seq.push(t), (e.map[t.id] = t);
      }
      function tp(e, t, n) {
        const i = e.name,
          r = i.length;
        for ($h.lastIndex = 0; ;) {
          const a = $h.exec(i),
            o = $h.lastIndex;
          let s = a[1];
          const l = "]" === a[2],
            c = a[3];
          if ((l && (s |= 0), void 0 === c || ("[" === c && o + 2 === r))) {
            ep(n, void 0 === c ? new Zh(s, e, t) : new Jh(s, e, t));
            break;
          }
          {
            let e = n.map[s];
            void 0 === e && ((e = new Qh(s)), ep(n, e)), (n = e);
          }
        }
      }
      class np {
        constructor(e, t) {
          (this.seq = []), (this.map = {});
          const n = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
          for (let i = 0; i < n; ++i) {
            const n = e.getActiveUniform(t, i);
            tp(n, e.getUniformLocation(t, n.name), this);
          }
        }
        setValue(e, t, n, i) {
          const r = this.map[t];
          void 0 !== r && r.setValue(e, n, i);
        }
        setOptional(e, t, n) {
          const i = t[n];
          void 0 !== i && this.setValue(e, n, i);
        }
        static upload(e, t, n, i) {
          for (let r = 0, a = t.length; r !== a; ++r) {
            const a = t[r],
              o = n[a.id];
            !1 !== o.needsUpdate && a.setValue(e, o.value, i);
          }
        }
        static seqWithValue(e, t) {
          const n = [];
          for (let i = 0, r = e.length; i !== r; ++i) {
            const r = e[i];
            r.id in t && n.push(r);
          }
          return n;
        }
      }
      function ip(e, t, n) {
        const i = e.createShader(t);
        return e.shaderSource(i, n), e.compileShader(i), i;
      }
      const rp = 37297;
      let ap = 0;
      function op(e, t, n) {
        const i = e.getShaderParameter(t, e.COMPILE_STATUS),
          r = e.getShaderInfoLog(t).trim();
        if (i && "" === r) return "";
        const a = /ERROR: 0:(\d+)/.exec(r);
        if (a) {
          const i = parseInt(a[1]);
          return (
            n.toUpperCase() +
            "\n\n" +
            r +
            "\n\n" +
            (function (e, t) {
              const n = e.split("\n"),
                i = [],
                r = Math.max(t - 6, 0),
                a = Math.min(t + 6, n.length);
              for (let o = r; o < a; o++) {
                const e = o + 1;
                i.push(
                  ""
                    .concat(e === t ? ">" : " ", " ")
                    .concat(e, ": ")
                    .concat(n[o])
                );
              }
              return i.join("\n");
            })(e.getShaderSource(t), i)
          );
        }
        return r;
      }
      function sp(e, t) {
        const n = (function (e) {
          const t = Ml.getPrimaries(Ml.workingColorSpace),
            n = Ml.getPrimaries(e);
          let i;
          switch (
          (t === n
            ? (i = "")
            : t === Ys && n === Xs
              ? (i = "LinearDisplayP3ToLinearSRGB")
              : t === Xs && n === Ys && (i = "LinearSRGBToLinearDisplayP3"),
            e)
          ) {
            case Vs:
            case Gs:
              return [i, "LinearTransferOETF"];
            case Bs:
            case Hs:
              return [i, "sRGBTransferOETF"];
            default:
              return (
                console.warn("THREE.WebGLProgram: Unsupported color space:", e),
                [i, "LinearTransferOETF"]
              );
          }
        })(t);
        return "vec4 "
          .concat(e, "( vec4 value ) { return ")
          .concat(n[0], "( ")
          .concat(n[1], "( value ) ); }");
      }
      function lp(e, t) {
        let n;
        switch (t) {
          case Jo:
            n = "Linear";
            break;
          case Qo:
            n = "Reinhard";
            break;
          case $o:
            n = "OptimizedCineon";
            break;
          case es:
            n = "ACESFilmic";
            break;
          case ns:
            n = "AgX";
            break;
          case is:
            n = "Neutral";
            break;
          case ts:
            n = "Custom";
            break;
          default:
            console.warn("THREE.WebGLProgram: Unsupported toneMapping:", t),
              (n = "Linear");
        }
        return (
          "vec3 " +
          e +
          "( vec3 color ) { return " +
          n +
          "ToneMapping( color ); }"
        );
      }
      function cp(e) {
        return "" !== e;
      }
      function up(e, t) {
        const n =
          t.numSpotLightShadows +
          t.numSpotLightMaps -
          t.numSpotLightShadowsWithMaps;
        return e
          .replace(/NUM_DIR_LIGHTS/g, t.numDirLights)
          .replace(/NUM_SPOT_LIGHTS/g, t.numSpotLights)
          .replace(/NUM_SPOT_LIGHT_MAPS/g, t.numSpotLightMaps)
          .replace(/NUM_SPOT_LIGHT_COORDS/g, n)
          .replace(/NUM_RECT_AREA_LIGHTS/g, t.numRectAreaLights)
          .replace(/NUM_POINT_LIGHTS/g, t.numPointLights)
          .replace(/NUM_HEMI_LIGHTS/g, t.numHemiLights)
          .replace(/NUM_DIR_LIGHT_SHADOWS/g, t.numDirLightShadows)
          .replace(
            /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,
            t.numSpotLightShadowsWithMaps
          )
          .replace(/NUM_SPOT_LIGHT_SHADOWS/g, t.numSpotLightShadows)
          .replace(/NUM_POINT_LIGHT_SHADOWS/g, t.numPointLightShadows);
      }
      function dp(e, t) {
        return e
          .replace(/NUM_CLIPPING_PLANES/g, t.numClippingPlanes)
          .replace(
            /UNION_CLIPPING_PLANES/g,
            t.numClippingPlanes - t.numClipIntersection
          );
      }
      const hp = /^[ \t]*#include +<([\w\d./]+)>/gm;
      function pp(e) {
        return e.replace(hp, mp);
      }
      const fp = new Map([
        ["encodings_fragment", "colorspace_fragment"],
        ["encodings_pars_fragment", "colorspace_pars_fragment"],
        ["output_fragment", "opaque_fragment"],
      ]);
      function mp(e, t) {
        let n = fd[t];
        if (void 0 === n) {
          const e = fp.get(t);
          if (void 0 === e)
            throw new Error("Can not resolve #include <" + t + ">");
          (n = fd[e]),
            console.warn(
              'THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',
              t,
              e
            );
        }
        return pp(n);
      }
      const gp =
        /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
      function vp(e) {
        return e.replace(gp, _p);
      }
      function _p(e, t, n, i) {
        let r = "";
        for (let a = parseInt(t); a < parseInt(n); a++)
          r += i
            .replace(/\[\s*i\s*\]/g, "[ " + a + " ]")
            .replace(/UNROLLED_LOOP_INDEX/g, a);
        return r;
      }
      function yp(e) {
        let t = "precision "
          .concat(e.precision, " float;\n\tprecision ")
          .concat(e.precision, " int;\n\tprecision ")
          .concat(e.precision, " sampler2D;\n\tprecision ")
          .concat(e.precision, " samplerCube;\n\t");
        return (
          e.isWebGL2 &&
          (t += "precision "
            .concat(e.precision, " sampler3D;\n\t\tprecision ")
            .concat(e.precision, " sampler2DArray;\n\t\tprecision ")
            .concat(e.precision, " sampler2DShadow;\n\t\tprecision ")
            .concat(e.precision, " samplerCubeShadow;\n\t\tprecision ")
            .concat(e.precision, " sampler2DArrayShadow;\n\t\tprecision ")
            .concat(e.precision, " isampler2D;\n\t\tprecision ")
            .concat(e.precision, " isampler3D;\n\t\tprecision ")
            .concat(e.precision, " isamplerCube;\n\t\tprecision ")
            .concat(e.precision, " isampler2DArray;\n\t\tprecision ")
            .concat(e.precision, " usampler2D;\n\t\tprecision ")
            .concat(e.precision, " usampler3D;\n\t\tprecision ")
            .concat(e.precision, " usamplerCube;\n\t\tprecision ")
            .concat(e.precision, " usampler2DArray;\n\t\t")),
          "highp" === e.precision
            ? (t += "\n#define HIGH_PRECISION")
            : "mediump" === e.precision
              ? (t += "\n#define MEDIUM_PRECISION")
              : "lowp" === e.precision && (t += "\n#define LOW_PRECISION"),
          t
        );
      }
      function xp(e, t, n, i) {
        const r = e.getContext(),
          a = n.defines;
        let o = n.vertexShader,
          s = n.fragmentShader;
        const l = (function (e) {
          let t = "SHADOWMAP_TYPE_BASIC";
          return (
            e.shadowMapType === Vo
              ? (t = "SHADOWMAP_TYPE_PCF")
              : e.shadowMapType === Ho
                ? (t = "SHADOWMAP_TYPE_PCF_SOFT")
                : e.shadowMapType === Go && (t = "SHADOWMAP_TYPE_VSM"),
            t
          );
        })(n),
          c = (function (e) {
            let t = "ENVMAP_TYPE_CUBE";
            if (e.envMap)
              switch (e.envMapMode) {
                case rs:
                case as:
                  t = "ENVMAP_TYPE_CUBE";
                  break;
                case ls:
                  t = "ENVMAP_TYPE_CUBE_UV";
              }
            return t;
          })(n),
          u = (function (e) {
            let t = "ENVMAP_MODE_REFLECTION";
            e.envMap && e.envMapMode === as && (t = "ENVMAP_MODE_REFRACTION");
            return t;
          })(n),
          d = (function (e) {
            let t = "ENVMAP_BLENDING_NONE";
            if (e.envMap)
              switch (e.combine) {
                case Yo:
                  t = "ENVMAP_BLENDING_MULTIPLY";
                  break;
                case qo:
                  t = "ENVMAP_BLENDING_MIX";
                  break;
                case Ko:
                  t = "ENVMAP_BLENDING_ADD";
              }
            return t;
          })(n),
          h = (function (e) {
            const t = e.envMapCubeUVHeight;
            if (null === t) return null;
            const n = Math.log2(t) - 2,
              i = 1 / t;
            return {
              texelWidth: 1 / (3 * Math.max(Math.pow(2, n), 112)),
              texelHeight: i,
              maxMip: n,
            };
          })(n),
          p = n.isWebGL2
            ? ""
            : (function (e) {
              return [
                e.extensionDerivatives ||
                  e.envMapCubeUVHeight ||
                  e.bumpMap ||
                  e.normalMapTangentSpace ||
                  e.clearcoatNormalMap ||
                  e.flatShading ||
                  e.alphaToCoverage ||
                  "physical" === e.shaderID
                  ? "#extension GL_OES_standard_derivatives : enable"
                  : "",
                (e.extensionFragDepth || e.logarithmicDepthBuffer) &&
                  e.rendererExtensionFragDepth
                  ? "#extension GL_EXT_frag_depth : enable"
                  : "",
                e.extensionDrawBuffers && e.rendererExtensionDrawBuffers
                  ? "#extension GL_EXT_draw_buffers : require"
                  : "",
                (e.extensionShaderTextureLOD || e.envMap || e.transmission) &&
                  e.rendererExtensionShaderTextureLod
                  ? "#extension GL_EXT_shader_texture_lod : enable"
                  : "",
              ]
                .filter(cp)
                .join("\n");
            })(n),
          f = (function (e) {
            return [
              e.extensionClipCullDistance
                ? "#extension GL_ANGLE_clip_cull_distance : require"
                : "",
              e.extensionMultiDraw
                ? "#extension GL_ANGLE_multi_draw : require"
                : "",
            ]
              .filter(cp)
              .join("\n");
          })(n),
          m = (function (e) {
            const t = [];
            for (const n in e) {
              const i = e[n];
              !1 !== i && t.push("#define " + n + " " + i);
            }
            return t.join("\n");
          })(a),
          g = r.createProgram();
        let v,
          _,
          y = n.glslVersion ? "#version " + n.glslVersion + "\n" : "";
        n.isRawShaderMaterial
          ? ((v = [
            "#define SHADER_TYPE " + n.shaderType,
            "#define SHADER_NAME " + n.shaderName,
            m,
          ]
            .filter(cp)
            .join("\n")),
            v.length > 0 && (v += "\n"),
            (_ = [
              p,
              "#define SHADER_TYPE " + n.shaderType,
              "#define SHADER_NAME " + n.shaderName,
              m,
            ]
              .filter(cp)
              .join("\n")),
            _.length > 0 && (_ += "\n"))
          : ((v = [
            yp(n),
            "#define SHADER_TYPE " + n.shaderType,
            "#define SHADER_NAME " + n.shaderName,
            m,
            n.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
            n.batching ? "#define USE_BATCHING" : "",
            n.instancing ? "#define USE_INSTANCING" : "",
            n.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
            n.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
            n.useFog && n.fog ? "#define USE_FOG" : "",
            n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "",
            n.map ? "#define USE_MAP" : "",
            n.envMap ? "#define USE_ENVMAP" : "",
            n.envMap ? "#define " + u : "",
            n.lightMap ? "#define USE_LIGHTMAP" : "",
            n.aoMap ? "#define USE_AOMAP" : "",
            n.bumpMap ? "#define USE_BUMPMAP" : "",
            n.normalMap ? "#define USE_NORMALMAP" : "",
            n.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
            n.normalMapTangentSpace
              ? "#define USE_NORMALMAP_TANGENTSPACE"
              : "",
            n.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
            n.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            n.anisotropy ? "#define USE_ANISOTROPY" : "",
            n.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
            n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
            n.clearcoatRoughnessMap
              ? "#define USE_CLEARCOAT_ROUGHNESSMAP"
              : "",
            n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
            n.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
            n.iridescenceThicknessMap
              ? "#define USE_IRIDESCENCE_THICKNESSMAP"
              : "",
            n.specularMap ? "#define USE_SPECULARMAP" : "",
            n.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
            n.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
            n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            n.metalnessMap ? "#define USE_METALNESSMAP" : "",
            n.alphaMap ? "#define USE_ALPHAMAP" : "",
            n.alphaHash ? "#define USE_ALPHAHASH" : "",
            n.transmission ? "#define USE_TRANSMISSION" : "",
            n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
            n.thicknessMap ? "#define USE_THICKNESSMAP" : "",
            n.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
            n.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
            n.mapUv ? "#define MAP_UV " + n.mapUv : "",
            n.alphaMapUv ? "#define ALPHAMAP_UV " + n.alphaMapUv : "",
            n.lightMapUv ? "#define LIGHTMAP_UV " + n.lightMapUv : "",
            n.aoMapUv ? "#define AOMAP_UV " + n.aoMapUv : "",
            n.emissiveMapUv
              ? "#define EMISSIVEMAP_UV " + n.emissiveMapUv
              : "",
            n.bumpMapUv ? "#define BUMPMAP_UV " + n.bumpMapUv : "",
            n.normalMapUv ? "#define NORMALMAP_UV " + n.normalMapUv : "",
            n.displacementMapUv
              ? "#define DISPLACEMENTMAP_UV " + n.displacementMapUv
              : "",
            n.metalnessMapUv
              ? "#define METALNESSMAP_UV " + n.metalnessMapUv
              : "",
            n.roughnessMapUv
              ? "#define ROUGHNESSMAP_UV " + n.roughnessMapUv
              : "",
            n.anisotropyMapUv
              ? "#define ANISOTROPYMAP_UV " + n.anisotropyMapUv
              : "",
            n.clearcoatMapUv
              ? "#define CLEARCOATMAP_UV " + n.clearcoatMapUv
              : "",
            n.clearcoatNormalMapUv
              ? "#define CLEARCOAT_NORMALMAP_UV " + n.clearcoatNormalMapUv
              : "",
            n.clearcoatRoughnessMapUv
              ? "#define CLEARCOAT_ROUGHNESSMAP_UV " +
              n.clearcoatRoughnessMapUv
              : "",
            n.iridescenceMapUv
              ? "#define IRIDESCENCEMAP_UV " + n.iridescenceMapUv
              : "",
            n.iridescenceThicknessMapUv
              ? "#define IRIDESCENCE_THICKNESSMAP_UV " +
              n.iridescenceThicknessMapUv
              : "",
            n.sheenColorMapUv
              ? "#define SHEEN_COLORMAP_UV " + n.sheenColorMapUv
              : "",
            n.sheenRoughnessMapUv
              ? "#define SHEEN_ROUGHNESSMAP_UV " + n.sheenRoughnessMapUv
              : "",
            n.specularMapUv
              ? "#define SPECULARMAP_UV " + n.specularMapUv
              : "",
            n.specularColorMapUv
              ? "#define SPECULAR_COLORMAP_UV " + n.specularColorMapUv
              : "",
            n.specularIntensityMapUv
              ? "#define SPECULAR_INTENSITYMAP_UV " + n.specularIntensityMapUv
              : "",
            n.transmissionMapUv
              ? "#define TRANSMISSIONMAP_UV " + n.transmissionMapUv
              : "",
            n.thicknessMapUv
              ? "#define THICKNESSMAP_UV " + n.thicknessMapUv
              : "",
            n.vertexTangents && !1 === n.flatShading
              ? "#define USE_TANGENT"
              : "",
            n.vertexColors ? "#define USE_COLOR" : "",
            n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
            n.vertexUv1s ? "#define USE_UV1" : "",
            n.vertexUv2s ? "#define USE_UV2" : "",
            n.vertexUv3s ? "#define USE_UV3" : "",
            n.pointsUvs ? "#define USE_POINTS_UV" : "",
            n.flatShading ? "#define FLAT_SHADED" : "",
            n.skinning ? "#define USE_SKINNING" : "",
            n.morphTargets ? "#define USE_MORPHTARGETS" : "",
            n.morphNormals && !1 === n.flatShading
              ? "#define USE_MORPHNORMALS"
              : "",
            n.morphColors && n.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
            n.morphTargetsCount > 0 && n.isWebGL2
              ? "#define MORPHTARGETS_TEXTURE"
              : "",
            n.morphTargetsCount > 0 && n.isWebGL2
              ? "#define MORPHTARGETS_TEXTURE_STRIDE " + n.morphTextureStride
              : "",
            n.morphTargetsCount > 0 && n.isWebGL2
              ? "#define MORPHTARGETS_COUNT " + n.morphTargetsCount
              : "",
            n.doubleSided ? "#define DOUBLE_SIDED" : "",
            n.flipSided ? "#define FLIP_SIDED" : "",
            n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            n.shadowMapEnabled ? "#define " + l : "",
            n.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
            n.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
            n.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
            n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            n.logarithmicDepthBuffer && n.rendererExtensionFragDepth
              ? "#define USE_LOGDEPTHBUF_EXT"
              : "",
            "uniform mat4 modelMatrix;",
            "uniform mat4 modelViewMatrix;",
            "uniform mat4 projectionMatrix;",
            "uniform mat4 viewMatrix;",
            "uniform mat3 normalMatrix;",
            "uniform vec3 cameraPosition;",
            "uniform bool isOrthographic;",
            "#ifdef USE_INSTANCING",
            "\tattribute mat4 instanceMatrix;",
            "#endif",
            "#ifdef USE_INSTANCING_COLOR",
            "\tattribute vec3 instanceColor;",
            "#endif",
            "#ifdef USE_INSTANCING_MORPH",
            "\tuniform sampler2D morphTexture;",
            "#endif",
            "attribute vec3 position;",
            "attribute vec3 normal;",
            "attribute vec2 uv;",
            "#ifdef USE_UV1",
            "\tattribute vec2 uv1;",
            "#endif",
            "#ifdef USE_UV2",
            "\tattribute vec2 uv2;",
            "#endif",
            "#ifdef USE_UV3",
            "\tattribute vec2 uv3;",
            "#endif",
            "#ifdef USE_TANGENT",
            "\tattribute vec4 tangent;",
            "#endif",
            "#if defined( USE_COLOR_ALPHA )",
            "\tattribute vec4 color;",
            "#elif defined( USE_COLOR )",
            "\tattribute vec3 color;",
            "#endif",
            "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
            "\tattribute vec3 morphTarget0;",
            "\tattribute vec3 morphTarget1;",
            "\tattribute vec3 morphTarget2;",
            "\tattribute vec3 morphTarget3;",
            "\t#ifdef USE_MORPHNORMALS",
            "\t\tattribute vec3 morphNormal0;",
            "\t\tattribute vec3 morphNormal1;",
            "\t\tattribute vec3 morphNormal2;",
            "\t\tattribute vec3 morphNormal3;",
            "\t#else",
            "\t\tattribute vec3 morphTarget4;",
            "\t\tattribute vec3 morphTarget5;",
            "\t\tattribute vec3 morphTarget6;",
            "\t\tattribute vec3 morphTarget7;",
            "\t#endif",
            "#endif",
            "#ifdef USE_SKINNING",
            "\tattribute vec4 skinIndex;",
            "\tattribute vec4 skinWeight;",
            "#endif",
            "\n",
          ]
            .filter(cp)
            .join("\n")),
            (_ = [
              p,
              yp(n),
              "#define SHADER_TYPE " + n.shaderType,
              "#define SHADER_NAME " + n.shaderName,
              m,
              n.useFog && n.fog ? "#define USE_FOG" : "",
              n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "",
              n.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
              n.map ? "#define USE_MAP" : "",
              n.matcap ? "#define USE_MATCAP" : "",
              n.envMap ? "#define USE_ENVMAP" : "",
              n.envMap ? "#define " + c : "",
              n.envMap ? "#define " + u : "",
              n.envMap ? "#define " + d : "",
              h ? "#define CUBEUV_TEXEL_WIDTH " + h.texelWidth : "",
              h ? "#define CUBEUV_TEXEL_HEIGHT " + h.texelHeight : "",
              h ? "#define CUBEUV_MAX_MIP " + h.maxMip + ".0" : "",
              n.lightMap ? "#define USE_LIGHTMAP" : "",
              n.aoMap ? "#define USE_AOMAP" : "",
              n.bumpMap ? "#define USE_BUMPMAP" : "",
              n.normalMap ? "#define USE_NORMALMAP" : "",
              n.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
              n.normalMapTangentSpace
                ? "#define USE_NORMALMAP_TANGENTSPACE"
                : "",
              n.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
              n.anisotropy ? "#define USE_ANISOTROPY" : "",
              n.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
              n.clearcoat ? "#define USE_CLEARCOAT" : "",
              n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
              n.clearcoatRoughnessMap
                ? "#define USE_CLEARCOAT_ROUGHNESSMAP"
                : "",
              n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
              n.iridescence ? "#define USE_IRIDESCENCE" : "",
              n.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
              n.iridescenceThicknessMap
                ? "#define USE_IRIDESCENCE_THICKNESSMAP"
                : "",
              n.specularMap ? "#define USE_SPECULARMAP" : "",
              n.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
              n.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
              n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
              n.metalnessMap ? "#define USE_METALNESSMAP" : "",
              n.alphaMap ? "#define USE_ALPHAMAP" : "",
              n.alphaTest ? "#define USE_ALPHATEST" : "",
              n.alphaHash ? "#define USE_ALPHAHASH" : "",
              n.sheen ? "#define USE_SHEEN" : "",
              n.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
              n.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
              n.transmission ? "#define USE_TRANSMISSION" : "",
              n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
              n.thicknessMap ? "#define USE_THICKNESSMAP" : "",
              n.vertexTangents && !1 === n.flatShading
                ? "#define USE_TANGENT"
                : "",
              n.vertexColors || n.instancingColor ? "#define USE_COLOR" : "",
              n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
              n.vertexUv1s ? "#define USE_UV1" : "",
              n.vertexUv2s ? "#define USE_UV2" : "",
              n.vertexUv3s ? "#define USE_UV3" : "",
              n.pointsUvs ? "#define USE_POINTS_UV" : "",
              n.gradientMap ? "#define USE_GRADIENTMAP" : "",
              n.flatShading ? "#define FLAT_SHADED" : "",
              n.doubleSided ? "#define DOUBLE_SIDED" : "",
              n.flipSided ? "#define FLIP_SIDED" : "",
              n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
              n.shadowMapEnabled ? "#define " + l : "",
              n.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
              n.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
              n.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
              n.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
              n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
              n.logarithmicDepthBuffer && n.rendererExtensionFragDepth
                ? "#define USE_LOGDEPTHBUF_EXT"
                : "",
              "uniform mat4 viewMatrix;",
              "uniform vec3 cameraPosition;",
              "uniform bool isOrthographic;",
              n.toneMapping !== Zo ? "#define TONE_MAPPING" : "",
              n.toneMapping !== Zo ? fd.tonemapping_pars_fragment : "",
              n.toneMapping !== Zo ? lp("toneMapping", n.toneMapping) : "",
              n.dithering ? "#define DITHERING" : "",
              n.opaque ? "#define OPAQUE" : "",
              fd.colorspace_pars_fragment,
              sp("linearToOutputTexel", n.outputColorSpace),
              n.useDepthPacking
                ? "#define DEPTH_PACKING " + n.depthPacking
                : "",
              "\n",
            ]
              .filter(cp)
              .join("\n"))),
          (o = pp(o)),
          (o = up(o, n)),
          (o = dp(o, n)),
          (s = pp(s)),
          (s = up(s, n)),
          (s = dp(s, n)),
          (o = vp(o)),
          (s = vp(s)),
          n.isWebGL2 &&
          !0 !== n.isRawShaderMaterial &&
          ((y = "#version 300 es\n"),
            (v =
              [
                f,
                "precision mediump sampler2DArray;",
                "#define attribute in",
                "#define varying out",
                "#define texture2D texture",
              ].join("\n") +
              "\n" +
              v),
            (_ =
              [
                "precision mediump sampler2DArray;",
                "#define varying in",
                n.glslVersion === Zs
                  ? ""
                  : "layout(location = 0) out highp vec4 pc_fragColor;",
                n.glslVersion === Zs ? "" : "#define gl_FragColor pc_fragColor",
                "#define gl_FragDepthEXT gl_FragDepth",
                "#define texture2D texture",
                "#define textureCube texture",
                "#define texture2DProj textureProj",
                "#define texture2DLodEXT textureLod",
                "#define texture2DProjLodEXT textureProjLod",
                "#define textureCubeLodEXT textureLod",
                "#define texture2DGradEXT textureGrad",
                "#define texture2DProjGradEXT textureProjGrad",
                "#define textureCubeGradEXT textureGrad",
              ].join("\n") +
              "\n" +
              _));
        const x = y + v + o,
          b = y + _ + s,
          S = ip(r, r.VERTEX_SHADER, x),
          E = ip(r, r.FRAGMENT_SHADER, b);
        function M(t) {
          if (e.debug.checkShaderErrors) {
            const n = r.getProgramInfoLog(g).trim(),
              i = r.getShaderInfoLog(S).trim(),
              a = r.getShaderInfoLog(E).trim();
            let o = !0,
              s = !0;
            if (!1 === r.getProgramParameter(g, r.LINK_STATUS))
              if (((o = !1), "function" === typeof e.debug.onShaderError))
                e.debug.onShaderError(r, g, S, E);
              else {
                const e = op(r, S, "vertex"),
                  i = op(r, E, "fragment");
                console.error(
                  "THREE.WebGLProgram: Shader Error " +
                  r.getError() +
                  " - VALIDATE_STATUS " +
                  r.getProgramParameter(g, r.VALIDATE_STATUS) +
                  "\n\nMaterial Name: " +
                  t.name +
                  "\nMaterial Type: " +
                  t.type +
                  "\n\nProgram Info Log: " +
                  n +
                  "\n" +
                  e +
                  "\n" +
                  i
                );
              }
            else
              "" !== n
                ? console.warn("THREE.WebGLProgram: Program Info Log:", n)
                : ("" !== i && "" !== a) || (s = !1);
            s &&
              (t.diagnostics = {
                runnable: o,
                programLog: n,
                vertexShader: { log: i, prefix: v },
                fragmentShader: { log: a, prefix: _ },
              });
          }
          r.deleteShader(S),
            r.deleteShader(E),
            (T = new np(r, g)),
            (w = (function (e, t) {
              const n = {},
                i = e.getProgramParameter(t, e.ACTIVE_ATTRIBUTES);
              for (let r = 0; r < i; r++) {
                const i = e.getActiveAttrib(t, r),
                  a = i.name;
                let o = 1;
                i.type === e.FLOAT_MAT2 && (o = 2),
                  i.type === e.FLOAT_MAT3 && (o = 3),
                  i.type === e.FLOAT_MAT4 && (o = 4),
                  (n[a] = {
                    type: i.type,
                    location: e.getAttribLocation(t, a),
                    locationSize: o,
                  });
              }
              return n;
            })(r, g));
        }
        let T, w;
        r.attachShader(g, S),
          r.attachShader(g, E),
          void 0 !== n.index0AttributeName
            ? r.bindAttribLocation(g, 0, n.index0AttributeName)
            : !0 === n.morphTargets && r.bindAttribLocation(g, 0, "position"),
          r.linkProgram(g),
          (this.getUniforms = function () {
            return void 0 === T && M(this), T;
          }),
          (this.getAttributes = function () {
            return void 0 === w && M(this), w;
          });
        let A = !1 === n.rendererExtensionParallelShaderCompile;
        return (
          (this.isReady = function () {
            return !1 === A && (A = r.getProgramParameter(g, rp)), A;
          }),
          (this.destroy = function () {
            i.releaseStatesOfProgram(this),
              r.deleteProgram(g),
              (this.program = void 0);
          }),
          (this.type = n.shaderType),
          (this.name = n.shaderName),
          (this.id = ap++),
          (this.cacheKey = t),
          (this.usedTimes = 1),
          (this.program = g),
          (this.vertexShader = S),
          (this.fragmentShader = E),
          this
        );
      }
      let bp = 0;
      class Sp {
        constructor() {
          (this.shaderCache = new Map()), (this.materialCache = new Map());
        }
        update(e) {
          const t = e.vertexShader,
            n = e.fragmentShader,
            i = this._getShaderStage(t),
            r = this._getShaderStage(n),
            a = this._getShaderCacheForMaterial(e);
          return (
            !1 === a.has(i) && (a.add(i), i.usedTimes++),
            !1 === a.has(r) && (a.add(r), r.usedTimes++),
            this
          );
        }
        remove(e) {
          const t = this.materialCache.get(e);
          for (const n of t)
            n.usedTimes--, 0 === n.usedTimes && this.shaderCache.delete(n.code);
          return this.materialCache.delete(e), this;
        }
        getVertexShaderID(e) {
          return this._getShaderStage(e.vertexShader).id;
        }
        getFragmentShaderID(e) {
          return this._getShaderStage(e.fragmentShader).id;
        }
        dispose() {
          this.shaderCache.clear(), this.materialCache.clear();
        }
        _getShaderCacheForMaterial(e) {
          const t = this.materialCache;
          let n = t.get(e);
          return void 0 === n && ((n = new Set()), t.set(e, n)), n;
        }
        _getShaderStage(e) {
          const t = this.shaderCache;
          let n = t.get(e);
          return void 0 === n && ((n = new Ep(e)), t.set(e, n)), n;
        }
      }
      class Ep {
        constructor(e) {
          (this.id = bp++), (this.code = e), (this.usedTimes = 0);
        }
      }
      function Mp(e, t, n, i, r, a, o) {
        const s = new Ac(),
          l = new Sp(),
          c = new Set(),
          u = [],
          d = r.isWebGL2,
          h = r.logarithmicDepthBuffer,
          p = r.vertexTextures;
        let f = r.precision;
        const m = {
          MeshDepthMaterial: "depth",
          MeshDistanceMaterial: "distanceRGBA",
          MeshNormalMaterial: "normal",
          MeshBasicMaterial: "basic",
          MeshLambertMaterial: "lambert",
          MeshPhongMaterial: "phong",
          MeshToonMaterial: "toon",
          MeshStandardMaterial: "physical",
          MeshPhysicalMaterial: "physical",
          MeshMatcapMaterial: "matcap",
          LineBasicMaterial: "basic",
          LineDashedMaterial: "dashed",
          PointsMaterial: "points",
          ShadowMaterial: "shadow",
          SpriteMaterial: "sprite",
        };
        function g(e) {
          return c.add(e), 0 === e ? "uv" : "uv".concat(e);
        }
        return {
          getParameters: function (a, s, u, v, _) {
            const y = v.fog,
              x = _.geometry,
              b = a.isMeshStandardMaterial ? v.environment : null,
              S = (a.isMeshStandardMaterial ? n : t).get(a.envMap || b),
              E = S && S.mapping === ls ? S.image.height : null,
              M = m[a.type];
            null !== a.precision &&
              ((f = r.getMaxPrecision(a.precision)),
                f !== a.precision &&
                console.warn(
                  "THREE.WebGLProgram.getParameters:",
                  a.precision,
                  "not supported, using",
                  f,
                  "instead."
                ));
            const T =
              x.morphAttributes.position ||
              x.morphAttributes.normal ||
              x.morphAttributes.color,
              w = void 0 !== T ? T.length : 0;
            let A,
              R,
              C,
              P,
              L = 0;
            if (
              (void 0 !== x.morphAttributes.position && (L = 1),
                void 0 !== x.morphAttributes.normal && (L = 2),
                void 0 !== x.morphAttributes.color && (L = 3),
                M)
            ) {
              const e = gd[M];
              (A = e.vertexShader), (R = e.fragmentShader);
            } else
              (A = a.vertexShader),
                (R = a.fragmentShader),
                l.update(a),
                (C = l.getVertexShaderID(a)),
                (P = l.getFragmentShaderID(a));
            const N = e.getRenderTarget(),
              D = !0 === _.isInstancedMesh,
              U = !0 === _.isBatchedMesh,
              I = !!a.map,
              O = !!a.matcap,
              k = !!S,
              F = !!a.aoMap,
              z = !!a.lightMap,
              B = !!a.bumpMap,
              V = !!a.normalMap,
              H = !!a.displacementMap,
              G = !!a.emissiveMap,
              W = !!a.metalnessMap,
              j = !!a.roughnessMap,
              X = a.anisotropy > 0,
              Y = a.clearcoat > 0,
              q = a.iridescence > 0,
              K = a.sheen > 0,
              Z = a.transmission > 0,
              J = X && !!a.anisotropyMap,
              Q = Y && !!a.clearcoatMap,
              $ = Y && !!a.clearcoatNormalMap,
              ee = Y && !!a.clearcoatRoughnessMap,
              te = q && !!a.iridescenceMap,
              ne = q && !!a.iridescenceThicknessMap,
              ie = K && !!a.sheenColorMap,
              re = K && !!a.sheenRoughnessMap,
              ae = !!a.specularMap,
              oe = !!a.specularColorMap,
              se = !!a.specularIntensityMap,
              le = Z && !!a.transmissionMap,
              ce = Z && !!a.thicknessMap,
              ue = !!a.gradientMap,
              de = !!a.alphaMap,
              he = a.alphaTest > 0,
              pe = !!a.alphaHash,
              fe = !!a.extensions;
            let me = Zo;
            a.toneMapped &&
              ((null !== N && !0 !== N.isXRRenderTarget) ||
                (me = e.toneMapping));
            const ge = {
              isWebGL2: d,
              shaderID: M,
              shaderType: a.type,
              shaderName: a.name,
              vertexShader: A,
              fragmentShader: R,
              defines: a.defines,
              customVertexShaderID: C,
              customFragmentShaderID: P,
              isRawShaderMaterial: !0 === a.isRawShaderMaterial,
              glslVersion: a.glslVersion,
              precision: f,
              batching: U,
              instancing: D,
              instancingColor: D && null !== _.instanceColor,
              instancingMorph: D && null !== _.morphTexture,
              supportsVertexTextures: p,
              outputColorSpace:
                null === N
                  ? e.outputColorSpace
                  : !0 === N.isXRRenderTarget
                    ? N.texture.colorSpace
                    : Vs,
              alphaToCoverage: !!a.alphaToCoverage,
              map: I,
              matcap: O,
              envMap: k,
              envMapMode: k && S.mapping,
              envMapCubeUVHeight: E,
              aoMap: F,
              lightMap: z,
              bumpMap: B,
              normalMap: V,
              displacementMap: p && H,
              emissiveMap: G,
              normalMapObjectSpace: V && 1 === a.normalMapType,
              normalMapTangentSpace: V && 0 === a.normalMapType,
              metalnessMap: W,
              roughnessMap: j,
              anisotropy: X,
              anisotropyMap: J,
              clearcoat: Y,
              clearcoatMap: Q,
              clearcoatNormalMap: $,
              clearcoatRoughnessMap: ee,
              iridescence: q,
              iridescenceMap: te,
              iridescenceThicknessMap: ne,
              sheen: K,
              sheenColorMap: ie,
              sheenRoughnessMap: re,
              specularMap: ae,
              specularColorMap: oe,
              specularIntensityMap: se,
              transmission: Z,
              transmissionMap: le,
              thicknessMap: ce,
              gradientMap: ue,
              opaque:
                !1 === a.transparent &&
                1 === a.blending &&
                !1 === a.alphaToCoverage,
              alphaMap: de,
              alphaTest: he,
              alphaHash: pe,
              combine: a.combine,
              mapUv: I && g(a.map.channel),
              aoMapUv: F && g(a.aoMap.channel),
              lightMapUv: z && g(a.lightMap.channel),
              bumpMapUv: B && g(a.bumpMap.channel),
              normalMapUv: V && g(a.normalMap.channel),
              displacementMapUv: H && g(a.displacementMap.channel),
              emissiveMapUv: G && g(a.emissiveMap.channel),
              metalnessMapUv: W && g(a.metalnessMap.channel),
              roughnessMapUv: j && g(a.roughnessMap.channel),
              anisotropyMapUv: J && g(a.anisotropyMap.channel),
              clearcoatMapUv: Q && g(a.clearcoatMap.channel),
              clearcoatNormalMapUv: $ && g(a.clearcoatNormalMap.channel),
              clearcoatRoughnessMapUv: ee && g(a.clearcoatRoughnessMap.channel),
              iridescenceMapUv: te && g(a.iridescenceMap.channel),
              iridescenceThicknessMapUv:
                ne && g(a.iridescenceThicknessMap.channel),
              sheenColorMapUv: ie && g(a.sheenColorMap.channel),
              sheenRoughnessMapUv: re && g(a.sheenRoughnessMap.channel),
              specularMapUv: ae && g(a.specularMap.channel),
              specularColorMapUv: oe && g(a.specularColorMap.channel),
              specularIntensityMapUv: se && g(a.specularIntensityMap.channel),
              transmissionMapUv: le && g(a.transmissionMap.channel),
              thicknessMapUv: ce && g(a.thicknessMap.channel),
              alphaMapUv: de && g(a.alphaMap.channel),
              vertexTangents: !!x.attributes.tangent && (V || X),
              vertexColors: a.vertexColors,
              vertexAlphas:
                !0 === a.vertexColors &&
                !!x.attributes.color &&
                4 === x.attributes.color.itemSize,
              pointsUvs: !0 === _.isPoints && !!x.attributes.uv && (I || de),
              fog: !!y,
              useFog: !0 === a.fog,
              fogExp2: !!y && y.isFogExp2,
              flatShading: !0 === a.flatShading,
              sizeAttenuation: !0 === a.sizeAttenuation,
              logarithmicDepthBuffer: h,
              skinning: !0 === _.isSkinnedMesh,
              morphTargets: void 0 !== x.morphAttributes.position,
              morphNormals: void 0 !== x.morphAttributes.normal,
              morphColors: void 0 !== x.morphAttributes.color,
              morphTargetsCount: w,
              morphTextureStride: L,
              numDirLights: s.directional.length,
              numPointLights: s.point.length,
              numSpotLights: s.spot.length,
              numSpotLightMaps: s.spotLightMap.length,
              numRectAreaLights: s.rectArea.length,
              numHemiLights: s.hemi.length,
              numDirLightShadows: s.directionalShadowMap.length,
              numPointLightShadows: s.pointShadowMap.length,
              numSpotLightShadows: s.spotShadowMap.length,
              numSpotLightShadowsWithMaps: s.numSpotLightShadowsWithMaps,
              numLightProbes: s.numLightProbes,
              numClippingPlanes: o.numPlanes,
              numClipIntersection: o.numIntersection,
              dithering: a.dithering,
              shadowMapEnabled: e.shadowMap.enabled && u.length > 0,
              shadowMapType: e.shadowMap.type,
              toneMapping: me,
              useLegacyLights: e._useLegacyLights,
              decodeVideoTexture:
                I &&
                !0 === a.map.isVideoTexture &&
                Ml.getTransfer(a.map.colorSpace) === js,
              premultipliedAlpha: a.premultipliedAlpha,
              doubleSided: 2 === a.side,
              flipSided: a.side === jo,
              useDepthPacking: a.depthPacking >= 0,
              depthPacking: a.depthPacking || 0,
              index0AttributeName: a.index0AttributeName,
              extensionDerivatives: fe && !0 === a.extensions.derivatives,
              extensionFragDepth: fe && !0 === a.extensions.fragDepth,
              extensionDrawBuffers: fe && !0 === a.extensions.drawBuffers,
              extensionShaderTextureLOD:
                fe && !0 === a.extensions.shaderTextureLOD,
              extensionClipCullDistance:
                fe &&
                !0 === a.extensions.clipCullDistance &&
                i.has("WEBGL_clip_cull_distance"),
              extensionMultiDraw:
                fe &&
                !0 === a.extensions.multiDraw &&
                i.has("WEBGL_multi_draw"),
              rendererExtensionFragDepth: d || i.has("EXT_frag_depth"),
              rendererExtensionDrawBuffers: d || i.has("WEBGL_draw_buffers"),
              rendererExtensionShaderTextureLod:
                d || i.has("EXT_shader_texture_lod"),
              rendererExtensionParallelShaderCompile: i.has(
                "KHR_parallel_shader_compile"
              ),
              customProgramCacheKey: a.customProgramCacheKey(),
            };
            return (
              (ge.vertexUv1s = c.has(1)),
              (ge.vertexUv2s = c.has(2)),
              (ge.vertexUv3s = c.has(3)),
              c.clear(),
              ge
            );
          },
          getProgramCacheKey: function (t) {
            const n = [];
            if (
              (t.shaderID
                ? n.push(t.shaderID)
                : (n.push(t.customVertexShaderID),
                  n.push(t.customFragmentShaderID)),
                void 0 !== t.defines)
            )
              for (const e in t.defines) n.push(e), n.push(t.defines[e]);
            return (
              !1 === t.isRawShaderMaterial &&
              (!(function (e, t) {
                e.push(t.precision),
                  e.push(t.outputColorSpace),
                  e.push(t.envMapMode),
                  e.push(t.envMapCubeUVHeight),
                  e.push(t.mapUv),
                  e.push(t.alphaMapUv),
                  e.push(t.lightMapUv),
                  e.push(t.aoMapUv),
                  e.push(t.bumpMapUv),
                  e.push(t.normalMapUv),
                  e.push(t.displacementMapUv),
                  e.push(t.emissiveMapUv),
                  e.push(t.metalnessMapUv),
                  e.push(t.roughnessMapUv),
                  e.push(t.anisotropyMapUv),
                  e.push(t.clearcoatMapUv),
                  e.push(t.clearcoatNormalMapUv),
                  e.push(t.clearcoatRoughnessMapUv),
                  e.push(t.iridescenceMapUv),
                  e.push(t.iridescenceThicknessMapUv),
                  e.push(t.sheenColorMapUv),
                  e.push(t.sheenRoughnessMapUv),
                  e.push(t.specularMapUv),
                  e.push(t.specularColorMapUv),
                  e.push(t.specularIntensityMapUv),
                  e.push(t.transmissionMapUv),
                  e.push(t.thicknessMapUv),
                  e.push(t.combine),
                  e.push(t.fogExp2),
                  e.push(t.sizeAttenuation),
                  e.push(t.morphTargetsCount),
                  e.push(t.morphAttributeCount),
                  e.push(t.numDirLights),
                  e.push(t.numPointLights),
                  e.push(t.numSpotLights),
                  e.push(t.numSpotLightMaps),
                  e.push(t.numHemiLights),
                  e.push(t.numRectAreaLights),
                  e.push(t.numDirLightShadows),
                  e.push(t.numPointLightShadows),
                  e.push(t.numSpotLightShadows),
                  e.push(t.numSpotLightShadowsWithMaps),
                  e.push(t.numLightProbes),
                  e.push(t.shadowMapType),
                  e.push(t.toneMapping),
                  e.push(t.numClippingPlanes),
                  e.push(t.numClipIntersection),
                  e.push(t.depthPacking);
              })(n, t),
                (function (e, t) {
                  s.disableAll(), t.isWebGL2 && s.enable(0);
                  t.supportsVertexTextures && s.enable(1);
                  t.instancing && s.enable(2);
                  t.instancingColor && s.enable(3);
                  t.instancingMorph && s.enable(4);
                  t.matcap && s.enable(5);
                  t.envMap && s.enable(6);
                  t.normalMapObjectSpace && s.enable(7);
                  t.normalMapTangentSpace && s.enable(8);
                  t.clearcoat && s.enable(9);
                  t.iridescence && s.enable(10);
                  t.alphaTest && s.enable(11);
                  t.vertexColors && s.enable(12);
                  t.vertexAlphas && s.enable(13);
                  t.vertexUv1s && s.enable(14);
                  t.vertexUv2s && s.enable(15);
                  t.vertexUv3s && s.enable(16);
                  t.vertexTangents && s.enable(17);
                  t.anisotropy && s.enable(18);
                  t.alphaHash && s.enable(19);
                  t.batching && s.enable(20);
                  e.push(s.mask), s.disableAll(), t.fog && s.enable(0);
                  t.useFog && s.enable(1);
                  t.flatShading && s.enable(2);
                  t.logarithmicDepthBuffer && s.enable(3);
                  t.skinning && s.enable(4);
                  t.morphTargets && s.enable(5);
                  t.morphNormals && s.enable(6);
                  t.morphColors && s.enable(7);
                  t.premultipliedAlpha && s.enable(8);
                  t.shadowMapEnabled && s.enable(9);
                  t.useLegacyLights && s.enable(10);
                  t.doubleSided && s.enable(11);
                  t.flipSided && s.enable(12);
                  t.useDepthPacking && s.enable(13);
                  t.dithering && s.enable(14);
                  t.transmission && s.enable(15);
                  t.sheen && s.enable(16);
                  t.opaque && s.enable(17);
                  t.pointsUvs && s.enable(18);
                  t.decodeVideoTexture && s.enable(19);
                  t.alphaToCoverage && s.enable(20);
                  e.push(s.mask);
                })(n, t),
                n.push(e.outputColorSpace)),
              n.push(t.customProgramCacheKey),
              n.join()
            );
          },
          getUniforms: function (e) {
            const t = m[e.type];
            let n;
            if (t) {
              const e = gd[t];
              n = Yu.clone(e.uniforms);
            } else n = e.uniforms;
            return n;
          },
          acquireProgram: function (t, n) {
            let i;
            for (let e = 0, r = u.length; e < r; e++) {
              const t = u[e];
              if (t.cacheKey === n) {
                (i = t), ++i.usedTimes;
                break;
              }
            }
            return void 0 === i && ((i = new xp(e, n, t, a)), u.push(i)), i;
          },
          releaseProgram: function (e) {
            if (0 === --e.usedTimes) {
              const t = u.indexOf(e);
              (u[t] = u[u.length - 1]), u.pop(), e.destroy();
            }
          },
          releaseShaderCache: function (e) {
            l.remove(e);
          },
          programs: u,
          dispose: function () {
            l.dispose();
          },
        };
      }
      function Tp() {
        let e = new WeakMap();
        return {
          get: function (t) {
            let n = e.get(t);
            return void 0 === n && ((n = {}), e.set(t, n)), n;
          },
          remove: function (t) {
            e.delete(t);
          },
          update: function (t, n, i) {
            e.get(t)[n] = i;
          },
          dispose: function () {
            e = new WeakMap();
          },
        };
      }
      function wp(e, t) {
        return e.groupOrder !== t.groupOrder
          ? e.groupOrder - t.groupOrder
          : e.renderOrder !== t.renderOrder
            ? e.renderOrder - t.renderOrder
            : e.material.id !== t.material.id
              ? e.material.id - t.material.id
              : e.z !== t.z
                ? e.z - t.z
                : e.id - t.id;
      }
      function Ap(e, t) {
        return e.groupOrder !== t.groupOrder
          ? e.groupOrder - t.groupOrder
          : e.renderOrder !== t.renderOrder
            ? e.renderOrder - t.renderOrder
            : e.z !== t.z
              ? t.z - e.z
              : e.id - t.id;
      }
      function Rp() {
        const e = [];
        let t = 0;
        const n = [],
          i = [],
          r = [];
        function a(n, i, r, a, o, s) {
          let l = e[t];
          return (
            void 0 === l
              ? ((l = {
                id: n.id,
                object: n,
                geometry: i,
                material: r,
                groupOrder: a,
                renderOrder: n.renderOrder,
                z: o,
                group: s,
              }),
                (e[t] = l))
              : ((l.id = n.id),
                (l.object = n),
                (l.geometry = i),
                (l.material = r),
                (l.groupOrder = a),
                (l.renderOrder = n.renderOrder),
                (l.z = o),
                (l.group = s)),
            t++,
            l
          );
        }
        return {
          opaque: n,
          transmissive: i,
          transparent: r,
          init: function () {
            (t = 0), (n.length = 0), (i.length = 0), (r.length = 0);
          },
          push: function (e, t, o, s, l, c) {
            const u = a(e, t, o, s, l, c);
            o.transmission > 0
              ? i.push(u)
              : !0 === o.transparent
                ? r.push(u)
                : n.push(u);
          },
          unshift: function (e, t, o, s, l, c) {
            const u = a(e, t, o, s, l, c);
            o.transmission > 0
              ? i.unshift(u)
              : !0 === o.transparent
                ? r.unshift(u)
                : n.unshift(u);
          },
          finish: function () {
            for (let n = t, i = e.length; n < i; n++) {
              const t = e[n];
              if (null === t.id) break;
              (t.id = null),
                (t.object = null),
                (t.geometry = null),
                (t.material = null),
                (t.group = null);
            }
          },
          sort: function (e, t) {
            n.length > 1 && n.sort(e || wp),
              i.length > 1 && i.sort(t || Ap),
              r.length > 1 && r.sort(t || Ap);
          },
        };
      }
      function Cp() {
        let e = new WeakMap();
        return {
          get: function (t, n) {
            const i = e.get(t);
            let r;
            return (
              void 0 === i
                ? ((r = new Rp()), e.set(t, [r]))
                : n >= i.length
                  ? ((r = new Rp()), i.push(r))
                  : (r = i[n]),
              r
            );
          },
          dispose: function () {
            e = new WeakMap();
          },
        };
      }
      function Pp() {
        const e = {};
        return {
          get: function (t) {
            if (void 0 !== e[t.id]) return e[t.id];
            let n;
            switch (t.type) {
              case "DirectionalLight":
                n = { direction: new Bl(), color: new au() };
                break;
              case "SpotLight":
                n = {
                  position: new Bl(),
                  direction: new Bl(),
                  color: new au(),
                  distance: 0,
                  coneCos: 0,
                  penumbraCos: 0,
                  decay: 0,
                };
                break;
              case "PointLight":
                n = {
                  position: new Bl(),
                  color: new au(),
                  distance: 0,
                  decay: 0,
                };
                break;
              case "HemisphereLight":
                n = {
                  direction: new Bl(),
                  skyColor: new au(),
                  groundColor: new au(),
                };
                break;
              case "RectAreaLight":
                n = {
                  color: new au(),
                  position: new Bl(),
                  halfWidth: new Bl(),
                  halfHeight: new Bl(),
                };
            }
            return (e[t.id] = n), n;
          },
        };
      }
      let Lp = 0;
      function Np(e, t) {
        return (
          (t.castShadow ? 2 : 0) -
          (e.castShadow ? 2 : 0) +
          (t.map ? 1 : 0) -
          (e.map ? 1 : 0)
        );
      }
      function Dp(e, t) {
        const n = new Pp(),
          i = (function () {
            const e = {};
            return {
              get: function (t) {
                if (void 0 !== e[t.id]) return e[t.id];
                let n;
                switch (t.type) {
                  case "DirectionalLight":
                  case "SpotLight":
                    n = {
                      shadowBias: 0,
                      shadowNormalBias: 0,
                      shadowRadius: 1,
                      shadowMapSize: new hl(),
                    };
                    break;
                  case "PointLight":
                    n = {
                      shadowBias: 0,
                      shadowNormalBias: 0,
                      shadowRadius: 1,
                      shadowMapSize: new hl(),
                      shadowCameraNear: 1,
                      shadowCameraFar: 1e3,
                    };
                }
                return (e[t.id] = n), n;
              },
            };
          })(),
          r = {
            version: 0,
            hash: {
              directionalLength: -1,
              pointLength: -1,
              spotLength: -1,
              rectAreaLength: -1,
              hemiLength: -1,
              numDirectionalShadows: -1,
              numPointShadows: -1,
              numSpotShadows: -1,
              numSpotMaps: -1,
              numLightProbes: -1,
            },
            ambient: [0, 0, 0],
            probe: [],
            directional: [],
            directionalShadow: [],
            directionalShadowMap: [],
            directionalShadowMatrix: [],
            spot: [],
            spotLightMap: [],
            spotShadow: [],
            spotShadowMap: [],
            spotLightMatrix: [],
            rectArea: [],
            rectAreaLTC1: null,
            rectAreaLTC2: null,
            point: [],
            pointShadow: [],
            pointShadowMap: [],
            pointShadowMatrix: [],
            hemi: [],
            numSpotLightShadowsWithMaps: 0,
            numLightProbes: 0,
          };
        for (let l = 0; l < 9; l++) r.probe.push(new Bl());
        const a = new Bl(),
          o = new gc(),
          s = new gc();
        return {
          setup: function (a, o) {
            let s = 0,
              l = 0,
              c = 0;
            for (let e = 0; e < 9; e++) r.probe[e].set(0, 0, 0);
            let u = 0,
              d = 0,
              h = 0,
              p = 0,
              f = 0,
              m = 0,
              g = 0,
              v = 0,
              _ = 0,
              y = 0,
              x = 0;
            a.sort(Np);
            const b = !0 === o ? Math.PI : 1;
            for (let e = 0, t = a.length; e < t; e++) {
              const t = a[e],
                o = t.color,
                S = t.intensity,
                E = t.distance,
                M = t.shadow && t.shadow.map ? t.shadow.map.texture : null;
              if (t.isAmbientLight)
                (s += o.r * S * b), (l += o.g * S * b), (c += o.b * S * b);
              else if (t.isLightProbe) {
                for (let e = 0; e < 9; e++)
                  r.probe[e].addScaledVector(t.sh.coefficients[e], S);
                x++;
              } else if (t.isDirectionalLight) {
                const e = n.get(t);
                if (
                  (e.color.copy(t.color).multiplyScalar(t.intensity * b),
                    t.castShadow)
                ) {
                  const e = t.shadow,
                    n = i.get(t);
                  (n.shadowBias = e.bias),
                    (n.shadowNormalBias = e.normalBias),
                    (n.shadowRadius = e.radius),
                    (n.shadowMapSize = e.mapSize),
                    (r.directionalShadow[u] = n),
                    (r.directionalShadowMap[u] = M),
                    (r.directionalShadowMatrix[u] = t.shadow.matrix),
                    m++;
                }
                (r.directional[u] = e), u++;
              } else if (t.isSpotLight) {
                const e = n.get(t);
                e.position.setFromMatrixPosition(t.matrixWorld),
                  e.color.copy(o).multiplyScalar(S * b),
                  (e.distance = E),
                  (e.coneCos = Math.cos(t.angle)),
                  (e.penumbraCos = Math.cos(t.angle * (1 - t.penumbra))),
                  (e.decay = t.decay),
                  (r.spot[h] = e);
                const a = t.shadow;
                if (
                  (t.map &&
                    ((r.spotLightMap[_] = t.map),
                      _++,
                      a.updateMatrices(t),
                      t.castShadow && y++),
                    (r.spotLightMatrix[h] = a.matrix),
                    t.castShadow)
                ) {
                  const e = i.get(t);
                  (e.shadowBias = a.bias),
                    (e.shadowNormalBias = a.normalBias),
                    (e.shadowRadius = a.radius),
                    (e.shadowMapSize = a.mapSize),
                    (r.spotShadow[h] = e),
                    (r.spotShadowMap[h] = M),
                    v++;
                }
                h++;
              } else if (t.isRectAreaLight) {
                const e = n.get(t);
                e.color.copy(o).multiplyScalar(S),
                  e.halfWidth.set(0.5 * t.width, 0, 0),
                  e.halfHeight.set(0, 0.5 * t.height, 0),
                  (r.rectArea[p] = e),
                  p++;
              } else if (t.isPointLight) {
                const e = n.get(t);
                if (
                  (e.color.copy(t.color).multiplyScalar(t.intensity * b),
                    (e.distance = t.distance),
                    (e.decay = t.decay),
                    t.castShadow)
                ) {
                  const e = t.shadow,
                    n = i.get(t);
                  (n.shadowBias = e.bias),
                    (n.shadowNormalBias = e.normalBias),
                    (n.shadowRadius = e.radius),
                    (n.shadowMapSize = e.mapSize),
                    (n.shadowCameraNear = e.camera.near),
                    (n.shadowCameraFar = e.camera.far),
                    (r.pointShadow[d] = n),
                    (r.pointShadowMap[d] = M),
                    (r.pointShadowMatrix[d] = t.shadow.matrix),
                    g++;
                }
                (r.point[d] = e), d++;
              } else if (t.isHemisphereLight) {
                const e = n.get(t);
                e.skyColor.copy(t.color).multiplyScalar(S * b),
                  e.groundColor.copy(t.groundColor).multiplyScalar(S * b),
                  (r.hemi[f] = e),
                  f++;
              }
            }
            p > 0 &&
              (t.isWebGL2
                ? !0 === e.has("OES_texture_float_linear")
                  ? ((r.rectAreaLTC1 = md.LTC_FLOAT_1),
                    (r.rectAreaLTC2 = md.LTC_FLOAT_2))
                  : ((r.rectAreaLTC1 = md.LTC_HALF_1),
                    (r.rectAreaLTC2 = md.LTC_HALF_2))
                : !0 === e.has("OES_texture_float_linear")
                  ? ((r.rectAreaLTC1 = md.LTC_FLOAT_1),
                    (r.rectAreaLTC2 = md.LTC_FLOAT_2))
                  : !0 === e.has("OES_texture_half_float_linear")
                    ? ((r.rectAreaLTC1 = md.LTC_HALF_1),
                      (r.rectAreaLTC2 = md.LTC_HALF_2))
                    : console.error(
                      "THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions."
                    )),
              (r.ambient[0] = s),
              (r.ambient[1] = l),
              (r.ambient[2] = c);
            const S = r.hash;
            (S.directionalLength === u &&
              S.pointLength === d &&
              S.spotLength === h &&
              S.rectAreaLength === p &&
              S.hemiLength === f &&
              S.numDirectionalShadows === m &&
              S.numPointShadows === g &&
              S.numSpotShadows === v &&
              S.numSpotMaps === _ &&
              S.numLightProbes === x) ||
              ((r.directional.length = u),
                (r.spot.length = h),
                (r.rectArea.length = p),
                (r.point.length = d),
                (r.hemi.length = f),
                (r.directionalShadow.length = m),
                (r.directionalShadowMap.length = m),
                (r.pointShadow.length = g),
                (r.pointShadowMap.length = g),
                (r.spotShadow.length = v),
                (r.spotShadowMap.length = v),
                (r.directionalShadowMatrix.length = m),
                (r.pointShadowMatrix.length = g),
                (r.spotLightMatrix.length = v + _ - y),
                (r.spotLightMap.length = _),
                (r.numSpotLightShadowsWithMaps = y),
                (r.numLightProbes = x),
                (S.directionalLength = u),
                (S.pointLength = d),
                (S.spotLength = h),
                (S.rectAreaLength = p),
                (S.hemiLength = f),
                (S.numDirectionalShadows = m),
                (S.numPointShadows = g),
                (S.numSpotShadows = v),
                (S.numSpotMaps = _),
                (S.numLightProbes = x),
                (r.version = Lp++));
          },
          setupView: function (e, t) {
            let n = 0,
              i = 0,
              l = 0,
              c = 0,
              u = 0;
            const d = t.matrixWorldInverse;
            for (let h = 0, p = e.length; h < p; h++) {
              const t = e[h];
              if (t.isDirectionalLight) {
                const e = r.directional[n];
                e.direction.setFromMatrixPosition(t.matrixWorld),
                  a.setFromMatrixPosition(t.target.matrixWorld),
                  e.direction.sub(a),
                  e.direction.transformDirection(d),
                  n++;
              } else if (t.isSpotLight) {
                const e = r.spot[l];
                e.position.setFromMatrixPosition(t.matrixWorld),
                  e.position.applyMatrix4(d),
                  e.direction.setFromMatrixPosition(t.matrixWorld),
                  a.setFromMatrixPosition(t.target.matrixWorld),
                  e.direction.sub(a),
                  e.direction.transformDirection(d),
                  l++;
              } else if (t.isRectAreaLight) {
                const e = r.rectArea[c];
                e.position.setFromMatrixPosition(t.matrixWorld),
                  e.position.applyMatrix4(d),
                  s.identity(),
                  o.copy(t.matrixWorld),
                  o.premultiply(d),
                  s.extractRotation(o),
                  e.halfWidth.set(0.5 * t.width, 0, 0),
                  e.halfHeight.set(0, 0.5 * t.height, 0),
                  e.halfWidth.applyMatrix4(s),
                  e.halfHeight.applyMatrix4(s),
                  c++;
              } else if (t.isPointLight) {
                const e = r.point[i];
                e.position.setFromMatrixPosition(t.matrixWorld),
                  e.position.applyMatrix4(d),
                  i++;
              } else if (t.isHemisphereLight) {
                const e = r.hemi[u];
                e.direction.setFromMatrixPosition(t.matrixWorld),
                  e.direction.transformDirection(d),
                  u++;
              }
            }
          },
          state: r,
        };
      }
      function Up(e, t) {
        const n = new Dp(e, t),
          i = [],
          r = [];
        return {
          init: function () {
            (i.length = 0), (r.length = 0);
          },
          state: { lightsArray: i, shadowsArray: r, lights: n },
          setupLights: function (e) {
            n.setup(i, e);
          },
          setupLightsView: function (e) {
            n.setupView(i, e);
          },
          pushLight: function (e) {
            i.push(e);
          },
          pushShadow: function (e) {
            r.push(e);
          },
        };
      }
      function Ip(e, t) {
        let n = new WeakMap();
        return {
          get: function (i) {
            let r =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
            const a = n.get(i);
            let o;
            return (
              void 0 === a
                ? ((o = new Up(e, t)), n.set(i, [o]))
                : r >= a.length
                  ? ((o = new Up(e, t)), a.push(o))
                  : (o = a[r]),
              o
            );
          },
          dispose: function () {
            n = new WeakMap();
          },
        };
      }
      class Op extends lu {
        constructor(e) {
          super(),
            (this.isMeshDepthMaterial = !0),
            (this.type = "MeshDepthMaterial"),
            (this.depthPacking = 3200),
            (this.map = null),
            (this.alphaMap = null),
            (this.displacementMap = null),
            (this.displacementScale = 1),
            (this.displacementBias = 0),
            (this.wireframe = !1),
            (this.wireframeLinewidth = 1),
            this.setValues(e);
        }
        copy(e) {
          return (
            super.copy(e),
            (this.depthPacking = e.depthPacking),
            (this.map = e.map),
            (this.alphaMap = e.alphaMap),
            (this.displacementMap = e.displacementMap),
            (this.displacementScale = e.displacementScale),
            (this.displacementBias = e.displacementBias),
            (this.wireframe = e.wireframe),
            (this.wireframeLinewidth = e.wireframeLinewidth),
            this
          );
        }
      }
      class kp extends lu {
        constructor(e) {
          super(),
            (this.isMeshDistanceMaterial = !0),
            (this.type = "MeshDistanceMaterial"),
            (this.map = null),
            (this.alphaMap = null),
            (this.displacementMap = null),
            (this.displacementScale = 1),
            (this.displacementBias = 0),
            this.setValues(e);
        }
        copy(e) {
          return (
            super.copy(e),
            (this.map = e.map),
            (this.alphaMap = e.alphaMap),
            (this.displacementMap = e.displacementMap),
            (this.displacementScale = e.displacementScale),
            (this.displacementBias = e.displacementBias),
            this
          );
        }
      }
      function Fp(e, t, n) {
        let i = new ud();
        const r = new hl(),
          a = new hl(),
          o = new Ul(),
          s = new Op({ depthPacking: 3201 }),
          l = new kp(),
          c = {},
          u = n.maxTextureSize,
          d = { [Wo]: jo, [jo]: Wo, 2: 2 },
          h = new qu({
            defines: { VSM_SAMPLES: 8 },
            uniforms: {
              shadow_pass: { value: null },
              resolution: { value: new hl() },
              radius: { value: 4 },
            },
            vertexShader:
              "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",
            fragmentShader:
              "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}",
          }),
          p = h.clone();
        p.defines.HORIZONTAL_PASS = 1;
        const f = new Eu();
        f.setAttribute(
          "position",
          new hu(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3)
        );
        const m = new Vu(f, h),
          g = this;
        (this.enabled = !1),
          (this.autoUpdate = !0),
          (this.needsUpdate = !1),
          (this.type = Vo);
        let v = this.type;
        function _(n, i) {
          const a = t.update(m);
          h.defines.VSM_SAMPLES !== n.blurSamples &&
            ((h.defines.VSM_SAMPLES = n.blurSamples),
              (p.defines.VSM_SAMPLES = n.blurSamples),
              (h.needsUpdate = !0),
              (p.needsUpdate = !0)),
            null === n.mapPass && (n.mapPass = new Ol(r.x, r.y)),
            (h.uniforms.shadow_pass.value = n.map.texture),
            (h.uniforms.resolution.value = n.mapSize),
            (h.uniforms.radius.value = n.radius),
            e.setRenderTarget(n.mapPass),
            e.clear(),
            e.renderBufferDirect(i, null, a, h, m, null),
            (p.uniforms.shadow_pass.value = n.mapPass.texture),
            (p.uniforms.resolution.value = n.mapSize),
            (p.uniforms.radius.value = n.radius),
            e.setRenderTarget(n.map),
            e.clear(),
            e.renderBufferDirect(i, null, a, p, m, null);
        }
        function y(t, n, i, r) {
          let a = null;
          const o =
            !0 === i.isPointLight
              ? t.customDistanceMaterial
              : t.customDepthMaterial;
          if (void 0 !== o) a = o;
          else if (
            ((a = !0 === i.isPointLight ? l : s),
              (e.localClippingEnabled &&
                !0 === n.clipShadows &&
                Array.isArray(n.clippingPlanes) &&
                0 !== n.clippingPlanes.length) ||
              (n.displacementMap && 0 !== n.displacementScale) ||
              (n.alphaMap && n.alphaTest > 0) ||
              (n.map && n.alphaTest > 0))
          ) {
            const e = a.uuid,
              t = n.uuid;
            let i = c[e];
            void 0 === i && ((i = {}), (c[e] = i));
            let r = i[t];
            void 0 === r &&
              ((r = a.clone()), (i[t] = r), n.addEventListener("dispose", b)),
              (a = r);
          }
          if (
            ((a.visible = n.visible),
              (a.wireframe = n.wireframe),
              (a.side =
                r === Go
                  ? null !== n.shadowSide
                    ? n.shadowSide
                    : n.side
                  : null !== n.shadowSide
                    ? n.shadowSide
                    : d[n.side]),
              (a.alphaMap = n.alphaMap),
              (a.alphaTest = n.alphaTest),
              (a.map = n.map),
              (a.clipShadows = n.clipShadows),
              (a.clippingPlanes = n.clippingPlanes),
              (a.clipIntersection = n.clipIntersection),
              (a.displacementMap = n.displacementMap),
              (a.displacementScale = n.displacementScale),
              (a.displacementBias = n.displacementBias),
              (a.wireframeLinewidth = n.wireframeLinewidth),
              (a.linewidth = n.linewidth),
              !0 === i.isPointLight && !0 === a.isMeshDistanceMaterial)
          ) {
            e.properties.get(a).light = i;
          }
          return a;
        }
        function x(n, r, a, o, s) {
          if (!1 === n.visible) return;
          if (
            n.layers.test(r.layers) &&
            (n.isMesh || n.isLine || n.isPoints) &&
            (n.castShadow || (n.receiveShadow && s === Go)) &&
            (!n.frustumCulled || i.intersectsObject(n))
          ) {
            n.modelViewMatrix.multiplyMatrices(
              a.matrixWorldInverse,
              n.matrixWorld
            );
            const i = t.update(n),
              l = n.material;
            if (Array.isArray(l)) {
              const t = i.groups;
              for (let c = 0, u = t.length; c < u; c++) {
                const u = t[c],
                  d = l[u.materialIndex];
                if (d && d.visible) {
                  const t = y(n, d, o, s);
                  n.onBeforeShadow(e, n, r, a, i, t, u),
                    e.renderBufferDirect(a, null, i, t, n, u),
                    n.onAfterShadow(e, n, r, a, i, t, u);
                }
              }
            } else if (l.visible) {
              const t = y(n, l, o, s);
              n.onBeforeShadow(e, n, r, a, i, t, null),
                e.renderBufferDirect(a, null, i, t, n, null),
                n.onAfterShadow(e, n, r, a, i, t, null);
            }
          }
          const l = n.children;
          for (let e = 0, t = l.length; e < t; e++) x(l[e], r, a, o, s);
        }
        function b(e) {
          e.target.removeEventListener("dispose", b);
          for (const t in c) {
            const n = c[t],
              i = e.target.uuid;
            if (i in n) {
              n[i].dispose(), delete n[i];
            }
          }
        }
        this.render = function (t, n, s) {
          if (!1 === g.enabled) return;
          if (!1 === g.autoUpdate && !1 === g.needsUpdate) return;
          if (0 === t.length) return;
          const l = e.getRenderTarget(),
            c = e.getActiveCubeFace(),
            d = e.getActiveMipmapLevel(),
            h = e.state;
          h.setBlending(0),
            h.buffers.color.setClear(1, 1, 1, 1),
            h.buffers.depth.setTest(!0),
            h.setScissorTest(!1);
          const p = v !== Go && this.type === Go,
            f = v === Go && this.type !== Go;
          for (let m = 0, g = t.length; m < g; m++) {
            const l = t[m],
              c = l.shadow;
            if (void 0 === c) {
              console.warn("THREE.WebGLShadowMap:", l, "has no shadow.");
              continue;
            }
            if (!1 === c.autoUpdate && !1 === c.needsUpdate) continue;
            r.copy(c.mapSize);
            const d = c.getFrameExtents();
            if (
              (r.multiply(d),
                a.copy(c.mapSize),
                (r.x > u || r.y > u) &&
                (r.x > u &&
                  ((a.x = Math.floor(u / d.x)),
                    (r.x = a.x * d.x),
                    (c.mapSize.x = a.x)),
                  r.y > u &&
                  ((a.y = Math.floor(u / d.y)),
                    (r.y = a.y * d.y),
                    (c.mapSize.y = a.y))),
                null === c.map || !0 === p || !0 === f)
            ) {
              const e =
                this.type !== Go ? { minFilter: hs, magFilter: hs } : {};
              null !== c.map && c.map.dispose(),
                (c.map = new Ol(r.x, r.y, e)),
                (c.map.texture.name = l.name + ".shadowMap"),
                c.camera.updateProjectionMatrix();
            }
            e.setRenderTarget(c.map), e.clear();
            const g = c.getViewportCount();
            for (let e = 0; e < g; e++) {
              const t = c.getViewport(e);
              o.set(a.x * t.x, a.y * t.y, a.x * t.z, a.y * t.w),
                h.viewport(o),
                c.updateMatrices(l, e),
                (i = c.getFrustum()),
                x(n, s, c.camera, l, this.type);
            }
            !0 !== c.isPointLightShadow && this.type === Go && _(c, s),
              (c.needsUpdate = !1);
          }
          (v = this.type), (g.needsUpdate = !1), e.setRenderTarget(l, c, d);
        };
      }
      function zp(e, t, n) {
        const i = n.isWebGL2;
        const r = new (function () {
          let t = !1;
          const n = new Ul();
          let i = null;
          const r = new Ul(0, 0, 0, 0);
          return {
            setMask: function (n) {
              i === n || t || (e.colorMask(n, n, n, n), (i = n));
            },
            setLocked: function (e) {
              t = e;
            },
            setClear: function (t, i, a, o, s) {
              !0 === s && ((t *= o), (i *= o), (a *= o)),
                n.set(t, i, a, o),
                !1 === r.equals(n) && (e.clearColor(t, i, a, o), r.copy(n));
            },
            reset: function () {
              (t = !1), (i = null), r.set(-1, 0, 0, 0);
            },
          };
        })(),
          a = new (function () {
            let t = !1,
              n = null,
              i = null,
              r = null;
            return {
              setTest: function (t) {
                t ? H(e.DEPTH_TEST) : G(e.DEPTH_TEST);
              },
              setMask: function (i) {
                n === i || t || (e.depthMask(i), (n = i));
              },
              setFunc: function (t) {
                if (i !== t) {
                  switch (t) {
                    case 0:
                      e.depthFunc(e.NEVER);
                      break;
                    case 1:
                      e.depthFunc(e.ALWAYS);
                      break;
                    case 2:
                      e.depthFunc(e.LESS);
                      break;
                    case 3:
                    default:
                      e.depthFunc(e.LEQUAL);
                      break;
                    case 4:
                      e.depthFunc(e.EQUAL);
                      break;
                    case 5:
                      e.depthFunc(e.GEQUAL);
                      break;
                    case 6:
                      e.depthFunc(e.GREATER);
                      break;
                    case 7:
                      e.depthFunc(e.NOTEQUAL);
                  }
                  i = t;
                }
              },
              setLocked: function (e) {
                t = e;
              },
              setClear: function (t) {
                r !== t && (e.clearDepth(t), (r = t));
              },
              reset: function () {
                (t = !1), (n = null), (i = null), (r = null);
              },
            };
          })(),
          o = new (function () {
            let t = !1,
              n = null,
              i = null,
              r = null,
              a = null,
              o = null,
              s = null,
              l = null,
              c = null;
            return {
              setTest: function (n) {
                t || (n ? H(e.STENCIL_TEST) : G(e.STENCIL_TEST));
              },
              setMask: function (i) {
                n === i || t || (e.stencilMask(i), (n = i));
              },
              setFunc: function (t, n, o) {
                (i === t && r === n && a === o) ||
                  (e.stencilFunc(t, n, o), (i = t), (r = n), (a = o));
              },
              setOp: function (t, n, i) {
                (o === t && s === n && l === i) ||
                  (e.stencilOp(t, n, i), (o = t), (s = n), (l = i));
              },
              setLocked: function (e) {
                t = e;
              },
              setClear: function (t) {
                c !== t && (e.clearStencil(t), (c = t));
              },
              reset: function () {
                (t = !1),
                  (n = null),
                  (i = null),
                  (r = null),
                  (a = null),
                  (o = null),
                  (s = null),
                  (l = null),
                  (c = null);
              },
            };
          })(),
          s = new WeakMap(),
          l = new WeakMap();
        let c = {},
          u = {},
          d = new WeakMap(),
          h = [],
          p = null,
          f = !1,
          m = null,
          g = null,
          v = null,
          _ = null,
          y = null,
          x = null,
          b = null,
          S = new au(0, 0, 0),
          E = 0,
          M = !1,
          T = null,
          w = null,
          A = null,
          R = null,
          C = null;
        const P = e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
        let L = !1,
          N = 0;
        const D = e.getParameter(e.VERSION);
        -1 !== D.indexOf("WebGL")
          ? ((N = parseFloat(/^WebGL (\d)/.exec(D)[1])), (L = N >= 1))
          : -1 !== D.indexOf("OpenGL ES") &&
          ((N = parseFloat(/^OpenGL ES (\d)/.exec(D)[1])), (L = N >= 2));
        let U = null,
          I = {};
        const O = e.getParameter(e.SCISSOR_BOX),
          k = e.getParameter(e.VIEWPORT),
          F = new Ul().fromArray(O),
          z = new Ul().fromArray(k);
        function B(t, n, r, a) {
          const o = new Uint8Array(4),
            s = e.createTexture();
          e.bindTexture(t, s),
            e.texParameteri(t, e.TEXTURE_MIN_FILTER, e.NEAREST),
            e.texParameteri(t, e.TEXTURE_MAG_FILTER, e.NEAREST);
          for (let l = 0; l < r; l++)
            !i || (t !== e.TEXTURE_3D && t !== e.TEXTURE_2D_ARRAY)
              ? e.texImage2D(
                n + l,
                0,
                e.RGBA,
                1,
                1,
                0,
                e.RGBA,
                e.UNSIGNED_BYTE,
                o
              )
              : e.texImage3D(
                n,
                0,
                e.RGBA,
                1,
                1,
                a,
                0,
                e.RGBA,
                e.UNSIGNED_BYTE,
                o
              );
          return s;
        }
        const V = {};
        function H(t) {
          !0 !== c[t] && (e.enable(t), (c[t] = !0));
        }
        function G(t) {
          !1 !== c[t] && (e.disable(t), (c[t] = !1));
        }
        (V[e.TEXTURE_2D] = B(e.TEXTURE_2D, e.TEXTURE_2D, 1)),
          (V[e.TEXTURE_CUBE_MAP] = B(
            e.TEXTURE_CUBE_MAP,
            e.TEXTURE_CUBE_MAP_POSITIVE_X,
            6
          )),
          i &&
          ((V[e.TEXTURE_2D_ARRAY] = B(
            e.TEXTURE_2D_ARRAY,
            e.TEXTURE_2D_ARRAY,
            1,
            1
          )),
            (V[e.TEXTURE_3D] = B(e.TEXTURE_3D, e.TEXTURE_3D, 1, 1))),
          r.setClear(0, 0, 0, 1),
          a.setClear(1),
          o.setClear(0),
          H(e.DEPTH_TEST),
          a.setFunc(3),
          Y(!1),
          q(1),
          H(e.CULL_FACE),
          X(0);
        const W = {
          [Xo]: e.FUNC_ADD,
          101: e.FUNC_SUBTRACT,
          102: e.FUNC_REVERSE_SUBTRACT,
        };
        if (i) (W[103] = e.MIN), (W[104] = e.MAX);
        else {
          const e = t.get("EXT_blend_minmax");
          null !== e && ((W[103] = e.MIN_EXT), (W[104] = e.MAX_EXT));
        }
        const j = {
          200: e.ZERO,
          201: e.ONE,
          202: e.SRC_COLOR,
          204: e.SRC_ALPHA,
          210: e.SRC_ALPHA_SATURATE,
          208: e.DST_COLOR,
          206: e.DST_ALPHA,
          203: e.ONE_MINUS_SRC_COLOR,
          205: e.ONE_MINUS_SRC_ALPHA,
          209: e.ONE_MINUS_DST_COLOR,
          207: e.ONE_MINUS_DST_ALPHA,
          211: e.CONSTANT_COLOR,
          212: e.ONE_MINUS_CONSTANT_COLOR,
          213: e.CONSTANT_ALPHA,
          214: e.ONE_MINUS_CONSTANT_ALPHA,
        };
        function X(t, n, i, r, a, o, s, l, c, u) {
          if (0 !== t) {
            if ((!1 === f && (H(e.BLEND), (f = !0)), 5 === t))
              (a = a || n),
                (o = o || i),
                (s = s || r),
                (n === g && a === y) ||
                (e.blendEquationSeparate(W[n], W[a]), (g = n), (y = a)),
                (i === v && r === _ && o === x && s === b) ||
                (e.blendFuncSeparate(j[i], j[r], j[o], j[s]),
                  (v = i),
                  (_ = r),
                  (x = o),
                  (b = s)),
                (!1 !== l.equals(S) && c === E) ||
                (e.blendColor(l.r, l.g, l.b, c), S.copy(l), (E = c)),
                (m = t),
                (M = !1);
            else if (t !== m || u !== M) {
              if (
                ((g === Xo && y === Xo) ||
                  (e.blendEquation(e.FUNC_ADD), (g = Xo), (y = Xo)),
                  u)
              )
                switch (t) {
                  case 1:
                    e.blendFuncSeparate(
                      e.ONE,
                      e.ONE_MINUS_SRC_ALPHA,
                      e.ONE,
                      e.ONE_MINUS_SRC_ALPHA
                    );
                    break;
                  case 2:
                    e.blendFunc(e.ONE, e.ONE);
                    break;
                  case 3:
                    e.blendFuncSeparate(
                      e.ZERO,
                      e.ONE_MINUS_SRC_COLOR,
                      e.ZERO,
                      e.ONE
                    );
                    break;
                  case 4:
                    e.blendFuncSeparate(
                      e.ZERO,
                      e.SRC_COLOR,
                      e.ZERO,
                      e.SRC_ALPHA
                    );
                    break;
                  default:
                    console.error("THREE.WebGLState: Invalid blending: ", t);
                }
              else
                switch (t) {
                  case 1:
                    e.blendFuncSeparate(
                      e.SRC_ALPHA,
                      e.ONE_MINUS_SRC_ALPHA,
                      e.ONE,
                      e.ONE_MINUS_SRC_ALPHA
                    );
                    break;
                  case 2:
                    e.blendFunc(e.SRC_ALPHA, e.ONE);
                    break;
                  case 3:
                    e.blendFuncSeparate(
                      e.ZERO,
                      e.ONE_MINUS_SRC_COLOR,
                      e.ZERO,
                      e.ONE
                    );
                    break;
                  case 4:
                    e.blendFunc(e.ZERO, e.SRC_COLOR);
                    break;
                  default:
                    console.error("THREE.WebGLState: Invalid blending: ", t);
                }
              (v = null),
                (_ = null),
                (x = null),
                (b = null),
                S.set(0, 0, 0),
                (E = 0),
                (m = t),
                (M = u);
            }
          } else !0 === f && (G(e.BLEND), (f = !1));
        }
        function Y(t) {
          T !== t && (t ? e.frontFace(e.CW) : e.frontFace(e.CCW), (T = t));
        }
        function q(t) {
          0 !== t
            ? (H(e.CULL_FACE),
              t !== w &&
              (1 === t
                ? e.cullFace(e.BACK)
                : 2 === t
                  ? e.cullFace(e.FRONT)
                  : e.cullFace(e.FRONT_AND_BACK)))
            : G(e.CULL_FACE),
            (w = t);
        }
        function K(t, n, i) {
          t
            ? (H(e.POLYGON_OFFSET_FILL),
              (R === n && C === i) || (e.polygonOffset(n, i), (R = n), (C = i)))
            : G(e.POLYGON_OFFSET_FILL);
        }
        return {
          buffers: { color: r, depth: a, stencil: o },
          enable: H,
          disable: G,
          bindFramebuffer: function (t, n) {
            return (
              u[t] !== n &&
              (e.bindFramebuffer(t, n),
                (u[t] = n),
                i &&
                (t === e.DRAW_FRAMEBUFFER && (u[e.FRAMEBUFFER] = n),
                  t === e.FRAMEBUFFER && (u[e.DRAW_FRAMEBUFFER] = n)),
                !0)
            );
          },
          drawBuffers: function (i, r) {
            let a = h,
              o = !1;
            if (i) {
              (a = d.get(r)), void 0 === a && ((a = []), d.set(r, a));
              const t = i.textures;
              if (a.length !== t.length || a[0] !== e.COLOR_ATTACHMENT0) {
                for (let n = 0, i = t.length; n < i; n++)
                  a[n] = e.COLOR_ATTACHMENT0 + n;
                (a.length = t.length), (o = !0);
              }
            } else a[0] !== e.BACK && ((a[0] = e.BACK), (o = !0));
            if (o)
              if (n.isWebGL2) e.drawBuffers(a);
              else {
                if (!0 !== t.has("WEBGL_draw_buffers"))
                  throw new Error(
                    "THREE.WebGLState: Usage of gl.drawBuffers() require WebGL2 or WEBGL_draw_buffers extension"
                  );
                t.get("WEBGL_draw_buffers").drawBuffersWEBGL(a);
              }
          },
          useProgram: function (t) {
            return p !== t && (e.useProgram(t), (p = t), !0);
          },
          setBlending: X,
          setMaterial: function (t, n) {
            2 === t.side ? G(e.CULL_FACE) : H(e.CULL_FACE);
            let i = t.side === jo;
            n && (i = !i),
              Y(i),
              1 === t.blending && !1 === t.transparent
                ? X(0)
                : X(
                  t.blending,
                  t.blendEquation,
                  t.blendSrc,
                  t.blendDst,
                  t.blendEquationAlpha,
                  t.blendSrcAlpha,
                  t.blendDstAlpha,
                  t.blendColor,
                  t.blendAlpha,
                  t.premultipliedAlpha
                ),
              a.setFunc(t.depthFunc),
              a.setTest(t.depthTest),
              a.setMask(t.depthWrite),
              r.setMask(t.colorWrite);
            const s = t.stencilWrite;
            o.setTest(s),
              s &&
              (o.setMask(t.stencilWriteMask),
                o.setFunc(t.stencilFunc, t.stencilRef, t.stencilFuncMask),
                o.setOp(t.stencilFail, t.stencilZFail, t.stencilZPass)),
              K(t.polygonOffset, t.polygonOffsetFactor, t.polygonOffsetUnits),
              !0 === t.alphaToCoverage
                ? H(e.SAMPLE_ALPHA_TO_COVERAGE)
                : G(e.SAMPLE_ALPHA_TO_COVERAGE);
          },
          setFlipSided: Y,
          setCullFace: q,
          setLineWidth: function (t) {
            t !== A && (L && e.lineWidth(t), (A = t));
          },
          setPolygonOffset: K,
          setScissorTest: function (t) {
            t ? H(e.SCISSOR_TEST) : G(e.SCISSOR_TEST);
          },
          activeTexture: function (t) {
            void 0 === t && (t = e.TEXTURE0 + P - 1),
              U !== t && (e.activeTexture(t), (U = t));
          },
          bindTexture: function (t, n, i) {
            void 0 === i && (i = null === U ? e.TEXTURE0 + P - 1 : U);
            let r = I[i];
            void 0 === r &&
              ((r = { type: void 0, texture: void 0 }), (I[i] = r)),
              (r.type === t && r.texture === n) ||
              (U !== i && (e.activeTexture(i), (U = i)),
                e.bindTexture(t, n || V[t]),
                (r.type = t),
                (r.texture = n));
          },
          unbindTexture: function () {
            const t = I[U];
            void 0 !== t &&
              void 0 !== t.type &&
              (e.bindTexture(t.type, null),
                (t.type = void 0),
                (t.texture = void 0));
          },
          compressedTexImage2D: function () {
            try {
              e.compressedTexImage2D.apply(e, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          compressedTexImage3D: function () {
            try {
              e.compressedTexImage3D.apply(e, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          texImage2D: function () {
            try {
              e.texImage2D.apply(e, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          texImage3D: function () {
            try {
              e.texImage3D.apply(e, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          updateUBOMapping: function (t, n) {
            let i = l.get(n);
            void 0 === i && ((i = new WeakMap()), l.set(n, i));
            let r = i.get(t);
            void 0 === r &&
              ((r = e.getUniformBlockIndex(n, t.name)), i.set(t, r));
          },
          uniformBlockBinding: function (t, n) {
            const i = l.get(n).get(t);
            s.get(n) !== i &&
              (e.uniformBlockBinding(n, i, t.__bindingPointIndex), s.set(n, i));
          },
          texStorage2D: function () {
            try {
              e.texStorage2D.apply(e, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          texStorage3D: function () {
            try {
              e.texStorage3D.apply(e, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          texSubImage2D: function () {
            try {
              e.texSubImage2D.apply(e, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          texSubImage3D: function () {
            try {
              e.texSubImage3D.apply(e, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          compressedTexSubImage2D: function () {
            try {
              e.compressedTexSubImage2D.apply(e, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          compressedTexSubImage3D: function () {
            try {
              e.compressedTexSubImage3D.apply(e, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          scissor: function (t) {
            !1 === F.equals(t) && (e.scissor(t.x, t.y, t.z, t.w), F.copy(t));
          },
          viewport: function (t) {
            !1 === z.equals(t) && (e.viewport(t.x, t.y, t.z, t.w), z.copy(t));
          },
          reset: function () {
            e.disable(e.BLEND),
              e.disable(e.CULL_FACE),
              e.disable(e.DEPTH_TEST),
              e.disable(e.POLYGON_OFFSET_FILL),
              e.disable(e.SCISSOR_TEST),
              e.disable(e.STENCIL_TEST),
              e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),
              e.blendEquation(e.FUNC_ADD),
              e.blendFunc(e.ONE, e.ZERO),
              e.blendFuncSeparate(e.ONE, e.ZERO, e.ONE, e.ZERO),
              e.blendColor(0, 0, 0, 0),
              e.colorMask(!0, !0, !0, !0),
              e.clearColor(0, 0, 0, 0),
              e.depthMask(!0),
              e.depthFunc(e.LESS),
              e.clearDepth(1),
              e.stencilMask(4294967295),
              e.stencilFunc(e.ALWAYS, 0, 4294967295),
              e.stencilOp(e.KEEP, e.KEEP, e.KEEP),
              e.clearStencil(0),
              e.cullFace(e.BACK),
              e.frontFace(e.CCW),
              e.polygonOffset(0, 0),
              e.activeTexture(e.TEXTURE0),
              e.bindFramebuffer(e.FRAMEBUFFER, null),
              !0 === i &&
              (e.bindFramebuffer(e.DRAW_FRAMEBUFFER, null),
                e.bindFramebuffer(e.READ_FRAMEBUFFER, null)),
              e.useProgram(null),
              e.lineWidth(1),
              e.scissor(0, 0, e.canvas.width, e.canvas.height),
              e.viewport(0, 0, e.canvas.width, e.canvas.height),
              (c = {}),
              (U = null),
              (I = {}),
              (u = {}),
              (d = new WeakMap()),
              (h = []),
              (p = null),
              (f = !1),
              (m = null),
              (g = null),
              (v = null),
              (_ = null),
              (y = null),
              (x = null),
              (b = null),
              (S = new au(0, 0, 0)),
              (E = 0),
              (M = !1),
              (T = null),
              (w = null),
              (A = null),
              (R = null),
              (C = null),
              F.set(0, 0, e.canvas.width, e.canvas.height),
              z.set(0, 0, e.canvas.width, e.canvas.height),
              r.reset(),
              a.reset(),
              o.reset();
          },
        };
      }
      function Bp(e, t, n, i, r, a, o) {
        const s = r.isWebGL2,
          l = t.has("WEBGL_multisampled_render_to_texture")
            ? t.get("WEBGL_multisampled_render_to_texture")
            : null,
          c =
            "undefined" !== typeof navigator &&
            /OculusBrowser/g.test(navigator.userAgent),
          u = new hl(),
          d = new WeakMap();
        let h;
        const p = new WeakMap();
        let f = !1;
        try {
          f =
            "undefined" !== typeof OffscreenCanvas &&
            null !== new OffscreenCanvas(1, 1).getContext("2d");
        } catch (V) { }
        function m(e, t) {
          return f ? new OffscreenCanvas(e, t) : gl("canvas");
        }
        function g(e, t, n, i) {
          let r = 1;
          const a = B(e);
          if (
            ((a.width > i || a.height > i) &&
              (r = i / Math.max(a.width, a.height)),
              r < 1 || !0 === t)
          ) {
            if (
              ("undefined" !== typeof HTMLImageElement &&
                e instanceof HTMLImageElement) ||
              ("undefined" !== typeof HTMLCanvasElement &&
                e instanceof HTMLCanvasElement) ||
              ("undefined" !== typeof ImageBitmap &&
                e instanceof ImageBitmap) ||
              ("undefined" !== typeof VideoFrame && e instanceof VideoFrame)
            ) {
              const i = t ? cl : Math.floor,
                o = i(r * a.width),
                s = i(r * a.height);
              void 0 === h && (h = m(o, s));
              const l = n ? m(o, s) : h;
              (l.width = o), (l.height = s);
              return (
                l.getContext("2d").drawImage(e, 0, 0, o, s),
                console.warn(
                  "THREE.WebGLRenderer: Texture has been resized from (" +
                  a.width +
                  "x" +
                  a.height +
                  ") to (" +
                  o +
                  "x" +
                  s +
                  ")."
                ),
                l
              );
            }
            return (
              "data" in e &&
              console.warn(
                "THREE.WebGLRenderer: Image in DataTexture is too big (" +
                a.width +
                "x" +
                a.height +
                ")."
              ),
              e
            );
          }
          return e;
        }
        function v(e) {
          const t = B(e);
          return ll(t.width) && ll(t.height);
        }
        function _(e, t) {
          return (
            e.generateMipmaps && t && e.minFilter !== hs && e.minFilter !== ms
          );
        }
        function y(t) {
          e.generateMipmap(t);
        }
        function x(n, i, r, a) {
          let o =
            arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
          if (!1 === s) return i;
          if (null !== n) {
            if (void 0 !== e[n]) return e[n];
            console.warn(
              "THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" +
              n +
              "'"
            );
          }
          let l = i;
          if (
            (i === e.RED &&
              (r === e.FLOAT && (l = e.R32F),
                r === e.HALF_FLOAT && (l = e.R16F),
                r === e.UNSIGNED_BYTE && (l = e.R8)),
              i === e.RED_INTEGER &&
              (r === e.UNSIGNED_BYTE && (l = e.R8UI),
                r === e.UNSIGNED_SHORT && (l = e.R16UI),
                r === e.UNSIGNED_INT && (l = e.R32UI),
                r === e.BYTE && (l = e.R8I),
                r === e.SHORT && (l = e.R16I),
                r === e.INT && (l = e.R32I)),
              i === e.RG &&
              (r === e.FLOAT && (l = e.RG32F),
                r === e.HALF_FLOAT && (l = e.RG16F),
                r === e.UNSIGNED_BYTE && (l = e.RG8)),
              i === e.RG_INTEGER &&
              (r === e.UNSIGNED_BYTE && (l = e.RG8UI),
                r === e.UNSIGNED_SHORT && (l = e.RG16UI),
                r === e.UNSIGNED_INT && (l = e.RG32UI),
                r === e.BYTE && (l = e.RG8I),
                r === e.SHORT && (l = e.RG16I),
                r === e.INT && (l = e.RG32I)),
              i === e.RGBA)
          ) {
            const t = o ? Ws : Ml.getTransfer(a);
            r === e.FLOAT && (l = e.RGBA32F),
              r === e.HALF_FLOAT && (l = e.RGBA16F),
              r === e.UNSIGNED_BYTE &&
              (l = t === js ? e.SRGB8_ALPHA8 : e.RGBA8),
              r === e.UNSIGNED_SHORT_4_4_4_4 && (l = e.RGBA4),
              r === e.UNSIGNED_SHORT_5_5_5_1 && (l = e.RGB5_A1);
          }
          return (
            (l !== e.R16F &&
              l !== e.R32F &&
              l !== e.RG16F &&
              l !== e.RG32F &&
              l !== e.RGBA16F &&
              l !== e.RGBA32F) ||
            t.get("EXT_color_buffer_float"),
            l
          );
        }
        function b(e, t, n) {
          return !0 === _(e, n) ||
            (e.isFramebufferTexture && e.minFilter !== hs && e.minFilter !== ms)
            ? Math.log2(Math.max(t.width, t.height)) + 1
            : void 0 !== e.mipmaps && e.mipmaps.length > 0
              ? e.mipmaps.length
              : e.isCompressedTexture && Array.isArray(e.image)
                ? t.mipmaps.length
                : 1;
        }
        function S(t) {
          return t === hs || t === ps || t === fs ? e.NEAREST : e.LINEAR;
        }
        function E(e) {
          const t = e.target;
          t.removeEventListener("dispose", E),
            (function (e) {
              const t = i.get(e);
              if (void 0 === t.__webglInit) return;
              const n = e.source,
                r = p.get(n);
              if (r) {
                const i = r[t.__cacheKey];
                i.usedTimes--,
                  0 === i.usedTimes && T(e),
                  0 === Object.keys(r).length && p.delete(n);
              }
              i.remove(e);
            })(t),
            t.isVideoTexture && d.delete(t);
        }
        function M(t) {
          const n = t.target;
          n.removeEventListener("dispose", M),
            (function (t) {
              const n = i.get(t);
              t.depthTexture && t.depthTexture.dispose();
              if (t.isWebGLCubeRenderTarget)
                for (let i = 0; i < 6; i++) {
                  if (Array.isArray(n.__webglFramebuffer[i]))
                    for (let t = 0; t < n.__webglFramebuffer[i].length; t++)
                      e.deleteFramebuffer(n.__webglFramebuffer[i][t]);
                  else e.deleteFramebuffer(n.__webglFramebuffer[i]);
                  n.__webglDepthbuffer &&
                    e.deleteRenderbuffer(n.__webglDepthbuffer[i]);
                }
              else {
                if (Array.isArray(n.__webglFramebuffer))
                  for (let t = 0; t < n.__webglFramebuffer.length; t++)
                    e.deleteFramebuffer(n.__webglFramebuffer[t]);
                else e.deleteFramebuffer(n.__webglFramebuffer);
                if (
                  (n.__webglDepthbuffer &&
                    e.deleteRenderbuffer(n.__webglDepthbuffer),
                    n.__webglMultisampledFramebuffer &&
                    e.deleteFramebuffer(n.__webglMultisampledFramebuffer),
                    n.__webglColorRenderbuffer)
                )
                  for (let t = 0; t < n.__webglColorRenderbuffer.length; t++)
                    n.__webglColorRenderbuffer[t] &&
                      e.deleteRenderbuffer(n.__webglColorRenderbuffer[t]);
                n.__webglDepthRenderbuffer &&
                  e.deleteRenderbuffer(n.__webglDepthRenderbuffer);
              }
              const r = t.textures;
              for (let a = 0, s = r.length; a < s; a++) {
                const t = i.get(r[a]);
                t.__webglTexture &&
                  (e.deleteTexture(t.__webglTexture), o.memory.textures--),
                  i.remove(r[a]);
              }
              i.remove(t);
            })(n);
        }
        function T(t) {
          const n = i.get(t);
          e.deleteTexture(n.__webglTexture);
          const r = t.source;
          delete p.get(r)[n.__cacheKey], o.memory.textures--;
        }
        let w = 0;
        function A(t, r) {
          const a = i.get(t);
          if (
            (t.isVideoTexture &&
              (function (e) {
                const t = o.render.frame;
                d.get(e) !== t && (d.set(e, t), e.update());
              })(t),
              !1 === t.isRenderTargetTexture &&
              t.version > 0 &&
              a.__version !== t.version)
          ) {
            const e = t.image;
            if (null === e)
              console.warn(
                "THREE.WebGLRenderer: Texture marked for update but no image data found."
              );
            else {
              if (!1 !== e.complete) return void D(a, t, r);
              console.warn(
                "THREE.WebGLRenderer: Texture marked for update but image is incomplete"
              );
            }
          }
          n.bindTexture(e.TEXTURE_2D, a.__webglTexture, e.TEXTURE0 + r);
        }
        const R = {
          [cs]: e.REPEAT,
          [us]: e.CLAMP_TO_EDGE,
          [ds]: e.MIRRORED_REPEAT,
        },
          C = {
            [hs]: e.NEAREST,
            [ps]: e.NEAREST_MIPMAP_NEAREST,
            [fs]: e.NEAREST_MIPMAP_LINEAR,
            [ms]: e.LINEAR,
            [gs]: e.LINEAR_MIPMAP_NEAREST,
            [vs]: e.LINEAR_MIPMAP_LINEAR,
          },
          P = {
            512: e.NEVER,
            519: e.ALWAYS,
            513: e.LESS,
            515: e.LEQUAL,
            514: e.EQUAL,
            518: e.GEQUAL,
            516: e.GREATER,
            517: e.NOTEQUAL,
          };
        function L(n, a, o) {
          if (
            (a.type !== Ss ||
              !1 !== t.has("OES_texture_float_linear") ||
              (a.magFilter !== ms &&
                a.magFilter !== gs &&
                a.magFilter !== fs &&
                a.magFilter !== vs &&
                a.minFilter !== ms &&
                a.minFilter !== gs &&
                a.minFilter !== fs &&
                a.minFilter !== vs) ||
              console.warn(
                "THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."
              ),
              o
                ? (e.texParameteri(n, e.TEXTURE_WRAP_S, R[a.wrapS]),
                  e.texParameteri(n, e.TEXTURE_WRAP_T, R[a.wrapT]),
                  (n !== e.TEXTURE_3D && n !== e.TEXTURE_2D_ARRAY) ||
                  e.texParameteri(n, e.TEXTURE_WRAP_R, R[a.wrapR]),
                  e.texParameteri(n, e.TEXTURE_MAG_FILTER, C[a.magFilter]),
                  e.texParameteri(n, e.TEXTURE_MIN_FILTER, C[a.minFilter]))
                : (e.texParameteri(n, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE),
                  e.texParameteri(n, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE),
                  (n !== e.TEXTURE_3D && n !== e.TEXTURE_2D_ARRAY) ||
                  e.texParameteri(n, e.TEXTURE_WRAP_R, e.CLAMP_TO_EDGE),
                  (a.wrapS === us && a.wrapT === us) ||
                  console.warn(
                    "THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."
                  ),
                  e.texParameteri(n, e.TEXTURE_MAG_FILTER, S(a.magFilter)),
                  e.texParameteri(n, e.TEXTURE_MIN_FILTER, S(a.minFilter)),
                  a.minFilter !== hs &&
                  a.minFilter !== ms &&
                  console.warn(
                    "THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."
                  )),
              a.compareFunction &&
              (e.texParameteri(
                n,
                e.TEXTURE_COMPARE_MODE,
                e.COMPARE_REF_TO_TEXTURE
              ),
                e.texParameteri(n, e.TEXTURE_COMPARE_FUNC, P[a.compareFunction])),
              !0 === t.has("EXT_texture_filter_anisotropic"))
          ) {
            if (a.magFilter === hs) return;
            if (a.minFilter !== fs && a.minFilter !== vs) return;
            if (a.type === Ss && !1 === t.has("OES_texture_float_linear"))
              return;
            if (
              !1 === s &&
              a.type === Es &&
              !1 === t.has("OES_texture_half_float_linear")
            )
              return;
            if (a.anisotropy > 1 || i.get(a).__currentAnisotropy) {
              const o = t.get("EXT_texture_filter_anisotropic");
              e.texParameterf(
                n,
                o.TEXTURE_MAX_ANISOTROPY_EXT,
                Math.min(a.anisotropy, r.getMaxAnisotropy())
              ),
                (i.get(a).__currentAnisotropy = a.anisotropy);
            }
          }
        }
        function N(t, n) {
          let i = !1;
          void 0 === t.__webglInit &&
            ((t.__webglInit = !0), n.addEventListener("dispose", E));
          const r = n.source;
          let a = p.get(r);
          void 0 === a && ((a = {}), p.set(r, a));
          const s = (function (e) {
            const t = [];
            return (
              t.push(e.wrapS),
              t.push(e.wrapT),
              t.push(e.wrapR || 0),
              t.push(e.magFilter),
              t.push(e.minFilter),
              t.push(e.anisotropy),
              t.push(e.internalFormat),
              t.push(e.format),
              t.push(e.type),
              t.push(e.generateMipmaps),
              t.push(e.premultiplyAlpha),
              t.push(e.flipY),
              t.push(e.unpackAlignment),
              t.push(e.colorSpace),
              t.join()
            );
          })(n);
          if (s !== t.__cacheKey) {
            void 0 === a[s] &&
              ((a[s] = { texture: e.createTexture(), usedTimes: 0 }),
                o.memory.textures++,
                (i = !0)),
              a[s].usedTimes++;
            const r = a[t.__cacheKey];
            void 0 !== r &&
              (a[t.__cacheKey].usedTimes--, 0 === r.usedTimes && T(n)),
              (t.__cacheKey = s),
              (t.__webglTexture = a[s].texture);
          }
          return i;
        }
        function D(t, o, l) {
          let c = e.TEXTURE_2D;
          (o.isDataArrayTexture || o.isCompressedArrayTexture) &&
            (c = e.TEXTURE_2D_ARRAY),
            o.isData3DTexture && (c = e.TEXTURE_3D);
          const u = N(t, o),
            d = o.source;
          n.bindTexture(c, t.__webglTexture, e.TEXTURE0 + l);
          const h = i.get(d);
          if (d.version !== h.__version || !0 === u) {
            n.activeTexture(e.TEXTURE0 + l);
            const t = Ml.getPrimaries(Ml.workingColorSpace),
              i = o.colorSpace === zs ? null : Ml.getPrimaries(o.colorSpace),
              p =
                o.colorSpace === zs || t === i
                  ? e.NONE
                  : e.BROWSER_DEFAULT_WEBGL;
            e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL, o.flipY),
              e.pixelStorei(
                e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                o.premultiplyAlpha
              ),
              e.pixelStorei(e.UNPACK_ALIGNMENT, o.unpackAlignment),
              e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL, p);
            const f =
              (function (e) {
                return (
                  !s &&
                  (e.wrapS !== us ||
                    e.wrapT !== us ||
                    (e.minFilter !== hs && e.minFilter !== ms))
                );
              })(o) && !1 === v(o.image);
            let m = g(o.image, f, !1, r.maxTextureSize);
            m = z(o, m);
            const S = v(m) || s,
              E = a.convert(o.format, o.colorSpace);
            let M,
              T = a.convert(o.type),
              w = x(o.internalFormat, E, T, o.colorSpace, o.isVideoTexture);
            L(c, o, S);
            const A = o.mipmaps,
              R = s && !0 !== o.isVideoTexture && 36196 !== w,
              C = void 0 === h.__version || !0 === u,
              P = d.dataReady,
              N = b(o, m, S);
            if (o.isDepthTexture)
              (w = e.DEPTH_COMPONENT),
                s
                  ? (w =
                    o.type === Ss
                      ? e.DEPTH_COMPONENT32F
                      : o.type === bs
                        ? e.DEPTH_COMPONENT24
                        : o.type === Ms
                          ? e.DEPTH24_STENCIL8
                          : e.DEPTH_COMPONENT16)
                  : o.type === Ss &&
                  console.error(
                    "WebGLRenderer: Floating point depth texture requires WebGL2."
                  ),
                o.format === ws &&
                w === e.DEPTH_COMPONENT &&
                o.type !== ys &&
                o.type !== bs &&
                (console.warn(
                  "THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."
                ),
                  (o.type = bs),
                  (T = a.convert(o.type))),
                o.format === As &&
                w === e.DEPTH_COMPONENT &&
                ((w = e.DEPTH_STENCIL),
                  o.type !== Ms &&
                  (console.warn(
                    "THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."
                  ),
                    (o.type = Ms),
                    (T = a.convert(o.type)))),
                C &&
                (R
                  ? n.texStorage2D(e.TEXTURE_2D, 1, w, m.width, m.height)
                  : n.texImage2D(
                    e.TEXTURE_2D,
                    0,
                    w,
                    m.width,
                    m.height,
                    0,
                    E,
                    T,
                    null
                  ));
            else if (o.isDataTexture)
              if (A.length > 0 && S) {
                R &&
                  C &&
                  n.texStorage2D(e.TEXTURE_2D, N, w, A[0].width, A[0].height);
                for (let t = 0, i = A.length; t < i; t++)
                  (M = A[t]),
                    R
                      ? P &&
                      n.texSubImage2D(
                        e.TEXTURE_2D,
                        t,
                        0,
                        0,
                        M.width,
                        M.height,
                        E,
                        T,
                        M.data
                      )
                      : n.texImage2D(
                        e.TEXTURE_2D,
                        t,
                        w,
                        M.width,
                        M.height,
                        0,
                        E,
                        T,
                        M.data
                      );
                o.generateMipmaps = !1;
              } else
                R
                  ? (C && n.texStorage2D(e.TEXTURE_2D, N, w, m.width, m.height),
                    P &&
                    n.texSubImage2D(
                      e.TEXTURE_2D,
                      0,
                      0,
                      0,
                      m.width,
                      m.height,
                      E,
                      T,
                      m.data
                    ))
                  : n.texImage2D(
                    e.TEXTURE_2D,
                    0,
                    w,
                    m.width,
                    m.height,
                    0,
                    E,
                    T,
                    m.data
                  );
            else if (o.isCompressedTexture)
              if (o.isCompressedArrayTexture) {
                R &&
                  C &&
                  n.texStorage3D(
                    e.TEXTURE_2D_ARRAY,
                    N,
                    w,
                    A[0].width,
                    A[0].height,
                    m.depth
                  );
                for (let t = 0, i = A.length; t < i; t++)
                  (M = A[t]),
                    o.format !== Ts
                      ? null !== E
                        ? R
                          ? P &&
                          n.compressedTexSubImage3D(
                            e.TEXTURE_2D_ARRAY,
                            t,
                            0,
                            0,
                            0,
                            M.width,
                            M.height,
                            m.depth,
                            E,
                            M.data,
                            0,
                            0
                          )
                          : n.compressedTexImage3D(
                            e.TEXTURE_2D_ARRAY,
                            t,
                            w,
                            M.width,
                            M.height,
                            m.depth,
                            0,
                            M.data,
                            0,
                            0
                          )
                        : console.warn(
                          "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"
                        )
                      : R
                        ? P &&
                        n.texSubImage3D(
                          e.TEXTURE_2D_ARRAY,
                          t,
                          0,
                          0,
                          0,
                          M.width,
                          M.height,
                          m.depth,
                          E,
                          T,
                          M.data
                        )
                        : n.texImage3D(
                          e.TEXTURE_2D_ARRAY,
                          t,
                          w,
                          M.width,
                          M.height,
                          m.depth,
                          0,
                          E,
                          T,
                          M.data
                        );
              } else {
                R &&
                  C &&
                  n.texStorage2D(e.TEXTURE_2D, N, w, A[0].width, A[0].height);
                for (let t = 0, i = A.length; t < i; t++)
                  (M = A[t]),
                    o.format !== Ts
                      ? null !== E
                        ? R
                          ? P &&
                          n.compressedTexSubImage2D(
                            e.TEXTURE_2D,
                            t,
                            0,
                            0,
                            M.width,
                            M.height,
                            E,
                            M.data
                          )
                          : n.compressedTexImage2D(
                            e.TEXTURE_2D,
                            t,
                            w,
                            M.width,
                            M.height,
                            0,
                            M.data
                          )
                        : console.warn(
                          "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"
                        )
                      : R
                        ? P &&
                        n.texSubImage2D(
                          e.TEXTURE_2D,
                          t,
                          0,
                          0,
                          M.width,
                          M.height,
                          E,
                          T,
                          M.data
                        )
                        : n.texImage2D(
                          e.TEXTURE_2D,
                          t,
                          w,
                          M.width,
                          M.height,
                          0,
                          E,
                          T,
                          M.data
                        );
              }
            else if (o.isDataArrayTexture)
              R
                ? (C &&
                  n.texStorage3D(
                    e.TEXTURE_2D_ARRAY,
                    N,
                    w,
                    m.width,
                    m.height,
                    m.depth
                  ),
                  P &&
                  n.texSubImage3D(
                    e.TEXTURE_2D_ARRAY,
                    0,
                    0,
                    0,
                    0,
                    m.width,
                    m.height,
                    m.depth,
                    E,
                    T,
                    m.data
                  ))
                : n.texImage3D(
                  e.TEXTURE_2D_ARRAY,
                  0,
                  w,
                  m.width,
                  m.height,
                  m.depth,
                  0,
                  E,
                  T,
                  m.data
                );
            else if (o.isData3DTexture)
              R
                ? (C &&
                  n.texStorage3D(
                    e.TEXTURE_3D,
                    N,
                    w,
                    m.width,
                    m.height,
                    m.depth
                  ),
                  P &&
                  n.texSubImage3D(
                    e.TEXTURE_3D,
                    0,
                    0,
                    0,
                    0,
                    m.width,
                    m.height,
                    m.depth,
                    E,
                    T,
                    m.data
                  ))
                : n.texImage3D(
                  e.TEXTURE_3D,
                  0,
                  w,
                  m.width,
                  m.height,
                  m.depth,
                  0,
                  E,
                  T,
                  m.data
                );
            else if (o.isFramebufferTexture) {
              if (C)
                if (R) n.texStorage2D(e.TEXTURE_2D, N, w, m.width, m.height);
                else {
                  let t = m.width,
                    i = m.height;
                  for (let r = 0; r < N; r++)
                    n.texImage2D(e.TEXTURE_2D, r, w, t, i, 0, E, T, null),
                      (t >>= 1),
                      (i >>= 1);
                }
            } else if (A.length > 0 && S) {
              if (R && C) {
                const t = B(A[0]);
                n.texStorage2D(e.TEXTURE_2D, N, w, t.width, t.height);
              }
              for (let t = 0, i = A.length; t < i; t++)
                (M = A[t]),
                  R
                    ? P && n.texSubImage2D(e.TEXTURE_2D, t, 0, 0, E, T, M)
                    : n.texImage2D(e.TEXTURE_2D, t, w, E, T, M);
              o.generateMipmaps = !1;
            } else if (R) {
              if (C) {
                const t = B(m);
                n.texStorage2D(e.TEXTURE_2D, N, w, t.width, t.height);
              }
              P && n.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, E, T, m);
            } else n.texImage2D(e.TEXTURE_2D, 0, w, E, T, m);
            _(o, S) && y(c),
              (h.__version = d.version),
              o.onUpdate && o.onUpdate(o);
          }
          t.__version = o.version;
        }
        function U(t, r, o, s, c, u) {
          const d = a.convert(o.format, o.colorSpace),
            h = a.convert(o.type),
            p = x(o.internalFormat, d, h, o.colorSpace);
          if (!i.get(r).__hasExternalTextures) {
            const t = Math.max(1, r.width >> u),
              i = Math.max(1, r.height >> u);
            c === e.TEXTURE_3D || c === e.TEXTURE_2D_ARRAY
              ? n.texImage3D(c, u, p, t, i, r.depth, 0, d, h, null)
              : n.texImage2D(c, u, p, t, i, 0, d, h, null);
          }
          n.bindFramebuffer(e.FRAMEBUFFER, t),
            F(r)
              ? l.framebufferTexture2DMultisampleEXT(
                e.FRAMEBUFFER,
                s,
                c,
                i.get(o).__webglTexture,
                0,
                k(r)
              )
              : (c === e.TEXTURE_2D ||
                (c >= e.TEXTURE_CUBE_MAP_POSITIVE_X &&
                  c <= e.TEXTURE_CUBE_MAP_NEGATIVE_Z)) &&
              e.framebufferTexture2D(
                e.FRAMEBUFFER,
                s,
                c,
                i.get(o).__webglTexture,
                u
              ),
            n.bindFramebuffer(e.FRAMEBUFFER, null);
        }
        function I(t, n, i) {
          if (
            (e.bindRenderbuffer(e.RENDERBUFFER, t),
              n.depthBuffer && !n.stencilBuffer)
          ) {
            let r = !0 === s ? e.DEPTH_COMPONENT24 : e.DEPTH_COMPONENT16;
            if (i || F(n)) {
              const t = n.depthTexture;
              t &&
                t.isDepthTexture &&
                (t.type === Ss
                  ? (r = e.DEPTH_COMPONENT32F)
                  : t.type === bs && (r = e.DEPTH_COMPONENT24));
              const i = k(n);
              F(n)
                ? l.renderbufferStorageMultisampleEXT(
                  e.RENDERBUFFER,
                  i,
                  r,
                  n.width,
                  n.height
                )
                : e.renderbufferStorageMultisample(
                  e.RENDERBUFFER,
                  i,
                  r,
                  n.width,
                  n.height
                );
            } else e.renderbufferStorage(e.RENDERBUFFER, r, n.width, n.height);
            e.framebufferRenderbuffer(
              e.FRAMEBUFFER,
              e.DEPTH_ATTACHMENT,
              e.RENDERBUFFER,
              t
            );
          } else if (n.depthBuffer && n.stencilBuffer) {
            const r = k(n);
            i && !1 === F(n)
              ? e.renderbufferStorageMultisample(
                e.RENDERBUFFER,
                r,
                e.DEPTH24_STENCIL8,
                n.width,
                n.height
              )
              : F(n)
                ? l.renderbufferStorageMultisampleEXT(
                  e.RENDERBUFFER,
                  r,
                  e.DEPTH24_STENCIL8,
                  n.width,
                  n.height
                )
                : e.renderbufferStorage(
                  e.RENDERBUFFER,
                  e.DEPTH_STENCIL,
                  n.width,
                  n.height
                ),
              e.framebufferRenderbuffer(
                e.FRAMEBUFFER,
                e.DEPTH_STENCIL_ATTACHMENT,
                e.RENDERBUFFER,
                t
              );
          } else {
            const t = n.textures;
            for (let r = 0; r < t.length; r++) {
              const o = t[r],
                s = a.convert(o.format, o.colorSpace),
                c = a.convert(o.type),
                u = x(o.internalFormat, s, c, o.colorSpace),
                d = k(n);
              i && !1 === F(n)
                ? e.renderbufferStorageMultisample(
                  e.RENDERBUFFER,
                  d,
                  u,
                  n.width,
                  n.height
                )
                : F(n)
                  ? l.renderbufferStorageMultisampleEXT(
                    e.RENDERBUFFER,
                    d,
                    u,
                    n.width,
                    n.height
                  )
                  : e.renderbufferStorage(e.RENDERBUFFER, u, n.width, n.height);
            }
          }
          e.bindRenderbuffer(e.RENDERBUFFER, null);
        }
        function O(t) {
          const r = i.get(t),
            a = !0 === t.isWebGLCubeRenderTarget;
          if (t.depthTexture && !r.__autoAllocateDepthBuffer) {
            if (a)
              throw new Error(
                "target.depthTexture not supported in Cube render targets"
              );
            !(function (t, r) {
              if (r && r.isWebGLCubeRenderTarget)
                throw new Error(
                  "Depth Texture with cube render targets is not supported"
                );
              if (
                (n.bindFramebuffer(e.FRAMEBUFFER, t),
                  !r.depthTexture || !r.depthTexture.isDepthTexture)
              )
                throw new Error(
                  "renderTarget.depthTexture must be an instance of THREE.DepthTexture"
                );
              (i.get(r.depthTexture).__webglTexture &&
                r.depthTexture.image.width === r.width &&
                r.depthTexture.image.height === r.height) ||
                ((r.depthTexture.image.width = r.width),
                  (r.depthTexture.image.height = r.height),
                  (r.depthTexture.needsUpdate = !0)),
                A(r.depthTexture, 0);
              const a = i.get(r.depthTexture).__webglTexture,
                o = k(r);
              if (r.depthTexture.format === ws)
                F(r)
                  ? l.framebufferTexture2DMultisampleEXT(
                    e.FRAMEBUFFER,
                    e.DEPTH_ATTACHMENT,
                    e.TEXTURE_2D,
                    a,
                    0,
                    o
                  )
                  : e.framebufferTexture2D(
                    e.FRAMEBUFFER,
                    e.DEPTH_ATTACHMENT,
                    e.TEXTURE_2D,
                    a,
                    0
                  );
              else {
                if (r.depthTexture.format !== As)
                  throw new Error("Unknown depthTexture format");
                F(r)
                  ? l.framebufferTexture2DMultisampleEXT(
                    e.FRAMEBUFFER,
                    e.DEPTH_STENCIL_ATTACHMENT,
                    e.TEXTURE_2D,
                    a,
                    0,
                    o
                  )
                  : e.framebufferTexture2D(
                    e.FRAMEBUFFER,
                    e.DEPTH_STENCIL_ATTACHMENT,
                    e.TEXTURE_2D,
                    a,
                    0
                  );
              }
            })(r.__webglFramebuffer, t);
          } else if (a) {
            r.__webglDepthbuffer = [];
            for (let i = 0; i < 6; i++)
              n.bindFramebuffer(e.FRAMEBUFFER, r.__webglFramebuffer[i]),
                (r.__webglDepthbuffer[i] = e.createRenderbuffer()),
                I(r.__webglDepthbuffer[i], t, !1);
          } else
            n.bindFramebuffer(e.FRAMEBUFFER, r.__webglFramebuffer),
              (r.__webglDepthbuffer = e.createRenderbuffer()),
              I(r.__webglDepthbuffer, t, !1);
          n.bindFramebuffer(e.FRAMEBUFFER, null);
        }
        function k(e) {
          return Math.min(r.maxSamples, e.samples);
        }
        function F(e) {
          const n = i.get(e);
          return (
            s &&
            e.samples > 0 &&
            !0 === t.has("WEBGL_multisampled_render_to_texture") &&
            !1 !== n.__useRenderToTexture
          );
        }
        function z(e, n) {
          const i = e.colorSpace,
            r = e.format,
            a = e.type;
          return (
            !0 === e.isCompressedTexture ||
            !0 === e.isVideoTexture ||
            e.format === Js ||
            (i !== Vs &&
              i !== zs &&
              (Ml.getTransfer(i) === js
                ? !1 === s
                  ? !0 === t.has("EXT_sRGB") && r === Ts
                    ? ((e.format = Js),
                      (e.minFilter = ms),
                      (e.generateMipmaps = !1))
                    : (n = Rl.sRGBToLinear(n))
                  : (r === Ts && a === _s) ||
                  console.warn(
                    "THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."
                  )
                : console.error(
                  "THREE.WebGLTextures: Unsupported texture color space:",
                  i
                ))),
            n
          );
        }
        function B(e) {
          return (
            "undefined" !== typeof HTMLImageElement &&
              e instanceof HTMLImageElement
              ? ((u.width = e.naturalWidth || e.width),
                (u.height = e.naturalHeight || e.height))
              : "undefined" !== typeof VideoFrame && e instanceof VideoFrame
                ? ((u.width = e.displayWidth), (u.height = e.displayHeight))
                : ((u.width = e.width), (u.height = e.height)),
            u
          );
        }
        (this.allocateTextureUnit = function () {
          const e = w;
          return (
            e >= r.maxTextures &&
            console.warn(
              "THREE.WebGLTextures: Trying to use " +
              e +
              " texture units while this GPU supports only " +
              r.maxTextures
            ),
            (w += 1),
            e
          );
        }),
          (this.resetTextureUnits = function () {
            w = 0;
          }),
          (this.setTexture2D = A),
          (this.setTexture2DArray = function (t, r) {
            const a = i.get(t);
            t.version > 0 && a.__version !== t.version
              ? D(a, t, r)
              : n.bindTexture(
                e.TEXTURE_2D_ARRAY,
                a.__webglTexture,
                e.TEXTURE0 + r
              );
          }),
          (this.setTexture3D = function (t, r) {
            const a = i.get(t);
            t.version > 0 && a.__version !== t.version
              ? D(a, t, r)
              : n.bindTexture(e.TEXTURE_3D, a.__webglTexture, e.TEXTURE0 + r);
          }),
          (this.setTextureCube = function (t, o) {
            const l = i.get(t);
            t.version > 0 && l.__version !== t.version
              ? (function (t, o, l) {
                if (6 !== o.image.length) return;
                const c = N(t, o),
                  u = o.source;
                n.bindTexture(
                  e.TEXTURE_CUBE_MAP,
                  t.__webglTexture,
                  e.TEXTURE0 + l
                );
                const d = i.get(u);
                if (u.version !== d.__version || !0 === c) {
                  n.activeTexture(e.TEXTURE0 + l);
                  const t = Ml.getPrimaries(Ml.workingColorSpace),
                    i =
                      o.colorSpace === zs
                        ? null
                        : Ml.getPrimaries(o.colorSpace),
                    h =
                      o.colorSpace === zs || t === i
                        ? e.NONE
                        : e.BROWSER_DEFAULT_WEBGL;
                  e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL, o.flipY),
                    e.pixelStorei(
                      e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                      o.premultiplyAlpha
                    ),
                    e.pixelStorei(e.UNPACK_ALIGNMENT, o.unpackAlignment),
                    e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL, h);
                  const p =
                    o.isCompressedTexture || o.image[0].isCompressedTexture,
                    f = o.image[0] && o.image[0].isDataTexture,
                    m = [];
                  for (let e = 0; e < 6; e++)
                    (m[e] =
                      p || f
                        ? f
                          ? o.image[e].image
                          : o.image[e]
                        : g(o.image[e], !1, !0, r.maxCubemapSize)),
                      (m[e] = z(o, m[e]));
                  const S = m[0],
                    E = v(S) || s,
                    M = a.convert(o.format, o.colorSpace),
                    T = a.convert(o.type),
                    w = x(o.internalFormat, M, T, o.colorSpace),
                    A = s && !0 !== o.isVideoTexture,
                    R = void 0 === d.__version || !0 === c,
                    C = u.dataReady;
                  let P,
                    N = b(o, S, E);
                  if ((L(e.TEXTURE_CUBE_MAP, o, E), p)) {
                    A &&
                      R &&
                      n.texStorage2D(
                        e.TEXTURE_CUBE_MAP,
                        N,
                        w,
                        S.width,
                        S.height
                      );
                    for (let t = 0; t < 6; t++) {
                      P = m[t].mipmaps;
                      for (let i = 0; i < P.length; i++) {
                        const r = P[i];
                        o.format !== Ts
                          ? null !== M
                            ? A
                              ? C &&
                              n.compressedTexSubImage2D(
                                e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                                i,
                                0,
                                0,
                                r.width,
                                r.height,
                                M,
                                r.data
                              )
                              : n.compressedTexImage2D(
                                e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                                i,
                                w,
                                r.width,
                                r.height,
                                0,
                                r.data
                              )
                            : console.warn(
                              "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"
                            )
                          : A
                            ? C &&
                            n.texSubImage2D(
                              e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                              i,
                              0,
                              0,
                              r.width,
                              r.height,
                              M,
                              T,
                              r.data
                            )
                            : n.texImage2D(
                              e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                              i,
                              w,
                              r.width,
                              r.height,
                              0,
                              M,
                              T,
                              r.data
                            );
                      }
                    }
                  } else {
                    if (((P = o.mipmaps), A && R)) {
                      P.length > 0 && N++;
                      const t = B(m[0]);
                      n.texStorage2D(
                        e.TEXTURE_CUBE_MAP,
                        N,
                        w,
                        t.width,
                        t.height
                      );
                    }
                    for (let t = 0; t < 6; t++)
                      if (f) {
                        A
                          ? C &&
                          n.texSubImage2D(
                            e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                            0,
                            0,
                            0,
                            m[t].width,
                            m[t].height,
                            M,
                            T,
                            m[t].data
                          )
                          : n.texImage2D(
                            e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                            0,
                            w,
                            m[t].width,
                            m[t].height,
                            0,
                            M,
                            T,
                            m[t].data
                          );
                        for (let i = 0; i < P.length; i++) {
                          const r = P[i].image[t].image;
                          A
                            ? C &&
                            n.texSubImage2D(
                              e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                              i + 1,
                              0,
                              0,
                              r.width,
                              r.height,
                              M,
                              T,
                              r.data
                            )
                            : n.texImage2D(
                              e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                              i + 1,
                              w,
                              r.width,
                              r.height,
                              0,
                              M,
                              T,
                              r.data
                            );
                        }
                      } else {
                        A
                          ? C &&
                          n.texSubImage2D(
                            e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                            0,
                            0,
                            0,
                            M,
                            T,
                            m[t]
                          )
                          : n.texImage2D(
                            e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                            0,
                            w,
                            M,
                            T,
                            m[t]
                          );
                        for (let i = 0; i < P.length; i++) {
                          const r = P[i];
                          A
                            ? C &&
                            n.texSubImage2D(
                              e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                              i + 1,
                              0,
                              0,
                              M,
                              T,
                              r.image[t]
                            )
                            : n.texImage2D(
                              e.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                              i + 1,
                              w,
                              M,
                              T,
                              r.image[t]
                            );
                        }
                      }
                  }
                  _(o, E) && y(e.TEXTURE_CUBE_MAP),
                    (d.__version = u.version),
                    o.onUpdate && o.onUpdate(o);
                }
                t.__version = o.version;
              })(l, t, o)
              : n.bindTexture(
                e.TEXTURE_CUBE_MAP,
                l.__webglTexture,
                e.TEXTURE0 + o
              );
          }),
          (this.rebindTextures = function (t, n, r) {
            const a = i.get(t);
            void 0 !== n &&
              U(
                a.__webglFramebuffer,
                t,
                t.texture,
                e.COLOR_ATTACHMENT0,
                e.TEXTURE_2D,
                0
              ),
              void 0 !== r && O(t);
          }),
          (this.setupRenderTarget = function (t) {
            const l = t.texture,
              c = i.get(t),
              u = i.get(l);
            t.addEventListener("dispose", M);
            const d = t.textures,
              h = !0 === t.isWebGLCubeRenderTarget,
              p = d.length > 1,
              f = v(t) || s;
            if (
              (p ||
                (void 0 === u.__webglTexture &&
                  (u.__webglTexture = e.createTexture()),
                  (u.__version = l.version),
                  o.memory.textures++),
                h)
            ) {
              c.__webglFramebuffer = [];
              for (let t = 0; t < 6; t++)
                if (s && l.mipmaps && l.mipmaps.length > 0) {
                  c.__webglFramebuffer[t] = [];
                  for (let n = 0; n < l.mipmaps.length; n++)
                    c.__webglFramebuffer[t][n] = e.createFramebuffer();
                } else c.__webglFramebuffer[t] = e.createFramebuffer();
            } else {
              if (s && l.mipmaps && l.mipmaps.length > 0) {
                c.__webglFramebuffer = [];
                for (let t = 0; t < l.mipmaps.length; t++)
                  c.__webglFramebuffer[t] = e.createFramebuffer();
              } else c.__webglFramebuffer = e.createFramebuffer();
              if (p)
                if (r.drawBuffers)
                  for (let t = 0, n = d.length; t < n; t++) {
                    const n = i.get(d[t]);
                    void 0 === n.__webglTexture &&
                      ((n.__webglTexture = e.createTexture()),
                        o.memory.textures++);
                  }
                else
                  console.warn(
                    "THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension."
                  );
              if (s && t.samples > 0 && !1 === F(t)) {
                (c.__webglMultisampledFramebuffer = e.createFramebuffer()),
                  (c.__webglColorRenderbuffer = []),
                  n.bindFramebuffer(
                    e.FRAMEBUFFER,
                    c.__webglMultisampledFramebuffer
                  );
                for (let n = 0; n < d.length; n++) {
                  const i = d[n];
                  (c.__webglColorRenderbuffer[n] = e.createRenderbuffer()),
                    e.bindRenderbuffer(
                      e.RENDERBUFFER,
                      c.__webglColorRenderbuffer[n]
                    );
                  const r = a.convert(i.format, i.colorSpace),
                    o = a.convert(i.type),
                    s = x(
                      i.internalFormat,
                      r,
                      o,
                      i.colorSpace,
                      !0 === t.isXRRenderTarget
                    ),
                    l = k(t);
                  e.renderbufferStorageMultisample(
                    e.RENDERBUFFER,
                    l,
                    s,
                    t.width,
                    t.height
                  ),
                    e.framebufferRenderbuffer(
                      e.FRAMEBUFFER,
                      e.COLOR_ATTACHMENT0 + n,
                      e.RENDERBUFFER,
                      c.__webglColorRenderbuffer[n]
                    );
                }
                e.bindRenderbuffer(e.RENDERBUFFER, null),
                  t.depthBuffer &&
                  ((c.__webglDepthRenderbuffer = e.createRenderbuffer()),
                    I(c.__webglDepthRenderbuffer, t, !0)),
                  n.bindFramebuffer(e.FRAMEBUFFER, null);
              }
            }
            if (h) {
              n.bindTexture(e.TEXTURE_CUBE_MAP, u.__webglTexture),
                L(e.TEXTURE_CUBE_MAP, l, f);
              for (let n = 0; n < 6; n++)
                if (s && l.mipmaps && l.mipmaps.length > 0)
                  for (let i = 0; i < l.mipmaps.length; i++)
                    U(
                      c.__webglFramebuffer[n][i],
                      t,
                      l,
                      e.COLOR_ATTACHMENT0,
                      e.TEXTURE_CUBE_MAP_POSITIVE_X + n,
                      i
                    );
                else
                  U(
                    c.__webglFramebuffer[n],
                    t,
                    l,
                    e.COLOR_ATTACHMENT0,
                    e.TEXTURE_CUBE_MAP_POSITIVE_X + n,
                    0
                  );
              _(l, f) && y(e.TEXTURE_CUBE_MAP), n.unbindTexture();
            } else if (p) {
              for (let r = 0, a = d.length; r < a; r++) {
                const a = d[r],
                  o = i.get(a);
                n.bindTexture(e.TEXTURE_2D, o.__webglTexture),
                  L(e.TEXTURE_2D, a, f),
                  U(
                    c.__webglFramebuffer,
                    t,
                    a,
                    e.COLOR_ATTACHMENT0 + r,
                    e.TEXTURE_2D,
                    0
                  ),
                  _(a, f) && y(e.TEXTURE_2D);
              }
              n.unbindTexture();
            } else {
              let i = e.TEXTURE_2D;
              if (
                ((t.isWebGL3DRenderTarget || t.isWebGLArrayRenderTarget) &&
                  (s
                    ? (i = t.isWebGL3DRenderTarget
                      ? e.TEXTURE_3D
                      : e.TEXTURE_2D_ARRAY)
                    : console.error(
                      "THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2."
                    )),
                  n.bindTexture(i, u.__webglTexture),
                  L(i, l, f),
                  s && l.mipmaps && l.mipmaps.length > 0)
              )
                for (let n = 0; n < l.mipmaps.length; n++)
                  U(c.__webglFramebuffer[n], t, l, e.COLOR_ATTACHMENT0, i, n);
              else U(c.__webglFramebuffer, t, l, e.COLOR_ATTACHMENT0, i, 0);
              _(l, f) && y(i), n.unbindTexture();
            }
            t.depthBuffer && O(t);
          }),
          (this.updateRenderTargetMipmap = function (t) {
            const r = v(t) || s,
              a = t.textures;
            for (let o = 0, s = a.length; o < s; o++) {
              const s = a[o];
              if (_(s, r)) {
                const r = t.isWebGLCubeRenderTarget
                  ? e.TEXTURE_CUBE_MAP
                  : e.TEXTURE_2D,
                  a = i.get(s).__webglTexture;
                n.bindTexture(r, a), y(r), n.unbindTexture();
              }
            }
          }),
          (this.updateMultisampleRenderTarget = function (t) {
            if (s && t.samples > 0 && !1 === F(t)) {
              const r = t.textures,
                a = t.width,
                o = t.height;
              let s = e.COLOR_BUFFER_BIT;
              const l = [],
                u = t.stencilBuffer
                  ? e.DEPTH_STENCIL_ATTACHMENT
                  : e.DEPTH_ATTACHMENT,
                d = i.get(t),
                h = r.length > 1;
              if (h)
                for (let t = 0; t < r.length; t++)
                  n.bindFramebuffer(
                    e.FRAMEBUFFER,
                    d.__webglMultisampledFramebuffer
                  ),
                    e.framebufferRenderbuffer(
                      e.FRAMEBUFFER,
                      e.COLOR_ATTACHMENT0 + t,
                      e.RENDERBUFFER,
                      null
                    ),
                    n.bindFramebuffer(e.FRAMEBUFFER, d.__webglFramebuffer),
                    e.framebufferTexture2D(
                      e.DRAW_FRAMEBUFFER,
                      e.COLOR_ATTACHMENT0 + t,
                      e.TEXTURE_2D,
                      null,
                      0
                    );
              n.bindFramebuffer(
                e.READ_FRAMEBUFFER,
                d.__webglMultisampledFramebuffer
              ),
                n.bindFramebuffer(e.DRAW_FRAMEBUFFER, d.__webglFramebuffer);
              for (let n = 0; n < r.length; n++) {
                l.push(e.COLOR_ATTACHMENT0 + n), t.depthBuffer && l.push(u);
                const p =
                  void 0 !== d.__ignoreDepthValues && d.__ignoreDepthValues;
                if (
                  (!1 === p &&
                    (t.depthBuffer && (s |= e.DEPTH_BUFFER_BIT),
                      t.stencilBuffer && (s |= e.STENCIL_BUFFER_BIT)),
                    h &&
                    e.framebufferRenderbuffer(
                      e.READ_FRAMEBUFFER,
                      e.COLOR_ATTACHMENT0,
                      e.RENDERBUFFER,
                      d.__webglColorRenderbuffer[n]
                    ),
                    !0 === p &&
                    (e.invalidateFramebuffer(e.READ_FRAMEBUFFER, [u]),
                      e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER, [u])),
                    h)
                ) {
                  const t = i.get(r[n]).__webglTexture;
                  e.framebufferTexture2D(
                    e.DRAW_FRAMEBUFFER,
                    e.COLOR_ATTACHMENT0,
                    e.TEXTURE_2D,
                    t,
                    0
                  );
                }
                e.blitFramebuffer(0, 0, a, o, 0, 0, a, o, s, e.NEAREST),
                  c && e.invalidateFramebuffer(e.READ_FRAMEBUFFER, l);
              }
              if (
                (n.bindFramebuffer(e.READ_FRAMEBUFFER, null),
                  n.bindFramebuffer(e.DRAW_FRAMEBUFFER, null),
                  h)
              )
                for (let t = 0; t < r.length; t++) {
                  n.bindFramebuffer(
                    e.FRAMEBUFFER,
                    d.__webglMultisampledFramebuffer
                  ),
                    e.framebufferRenderbuffer(
                      e.FRAMEBUFFER,
                      e.COLOR_ATTACHMENT0 + t,
                      e.RENDERBUFFER,
                      d.__webglColorRenderbuffer[t]
                    );
                  const a = i.get(r[t]).__webglTexture;
                  n.bindFramebuffer(e.FRAMEBUFFER, d.__webglFramebuffer),
                    e.framebufferTexture2D(
                      e.DRAW_FRAMEBUFFER,
                      e.COLOR_ATTACHMENT0 + t,
                      e.TEXTURE_2D,
                      a,
                      0
                    );
                }
              n.bindFramebuffer(
                e.DRAW_FRAMEBUFFER,
                d.__webglMultisampledFramebuffer
              );
            }
          }),
          (this.setupDepthRenderbuffer = O),
          (this.setupFrameBufferTexture = U),
          (this.useMultisampledRTT = F);
      }
      function Vp(e, t, n) {
        const i = n.isWebGL2;
        return {
          convert: function (n) {
            let r,
              a =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : zs;
            const o = Ml.getTransfer(a);
            if (n === _s) return e.UNSIGNED_BYTE;
            if (1017 === n) return e.UNSIGNED_SHORT_4_4_4_4;
            if (1018 === n) return e.UNSIGNED_SHORT_5_5_5_1;
            if (1010 === n) return e.BYTE;
            if (1011 === n) return e.SHORT;
            if (n === ys) return e.UNSIGNED_SHORT;
            if (n === xs) return e.INT;
            if (n === bs) return e.UNSIGNED_INT;
            if (n === Ss) return e.FLOAT;
            if (n === Es)
              return i
                ? e.HALF_FLOAT
                : ((r = t.get("OES_texture_half_float")),
                  null !== r ? r.HALF_FLOAT_OES : null);
            if (1021 === n) return e.ALPHA;
            if (n === Ts) return e.RGBA;
            if (1024 === n) return e.LUMINANCE;
            if (1025 === n) return e.LUMINANCE_ALPHA;
            if (n === ws) return e.DEPTH_COMPONENT;
            if (n === As) return e.DEPTH_STENCIL;
            if (n === Js)
              return (
                (r = t.get("EXT_sRGB")), null !== r ? r.SRGB_ALPHA_EXT : null
              );
            if (1028 === n) return e.RED;
            if (1029 === n) return e.RED_INTEGER;
            if (1030 === n) return e.RG;
            if (1031 === n) return e.RG_INTEGER;
            if (1033 === n) return e.RGBA_INTEGER;
            if (n === Rs || n === Cs || n === Ps || n === Ls)
              if (o === js) {
                if (
                  ((r = t.get("WEBGL_compressed_texture_s3tc_srgb")),
                    null === r)
                )
                  return null;
                if (n === Rs) return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;
                if (n === Cs) return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
                if (n === Ps) return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
                if (n === Ls) return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
              } else {
                if (((r = t.get("WEBGL_compressed_texture_s3tc")), null === r))
                  return null;
                if (n === Rs) return r.COMPRESSED_RGB_S3TC_DXT1_EXT;
                if (n === Cs) return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                if (n === Ps) return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                if (n === Ls) return r.COMPRESSED_RGBA_S3TC_DXT5_EXT;
              }
            if (35840 === n || 35841 === n || 35842 === n || 35843 === n) {
              if (((r = t.get("WEBGL_compressed_texture_pvrtc")), null === r))
                return null;
              if (35840 === n) return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
              if (35841 === n) return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
              if (35842 === n) return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
              if (35843 === n) return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
            }
            if (36196 === n)
              return (
                (r = t.get("WEBGL_compressed_texture_etc1")),
                null !== r ? r.COMPRESSED_RGB_ETC1_WEBGL : null
              );
            if (37492 === n || 37496 === n) {
              if (((r = t.get("WEBGL_compressed_texture_etc")), null === r))
                return null;
              if (37492 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ETC2
                  : r.COMPRESSED_RGB8_ETC2;
              if (37496 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
                  : r.COMPRESSED_RGBA8_ETC2_EAC;
            }
            if (
              37808 === n ||
              37809 === n ||
              37810 === n ||
              37811 === n ||
              37812 === n ||
              37813 === n ||
              37814 === n ||
              37815 === n ||
              37816 === n ||
              37817 === n ||
              37818 === n ||
              37819 === n ||
              37820 === n ||
              37821 === n
            ) {
              if (((r = t.get("WEBGL_compressed_texture_astc")), null === r))
                return null;
              if (37808 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
                  : r.COMPRESSED_RGBA_ASTC_4x4_KHR;
              if (37809 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
                  : r.COMPRESSED_RGBA_ASTC_5x4_KHR;
              if (37810 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
                  : r.COMPRESSED_RGBA_ASTC_5x5_KHR;
              if (37811 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
                  : r.COMPRESSED_RGBA_ASTC_6x5_KHR;
              if (37812 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
                  : r.COMPRESSED_RGBA_ASTC_6x6_KHR;
              if (37813 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
                  : r.COMPRESSED_RGBA_ASTC_8x5_KHR;
              if (37814 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
                  : r.COMPRESSED_RGBA_ASTC_8x6_KHR;
              if (37815 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
                  : r.COMPRESSED_RGBA_ASTC_8x8_KHR;
              if (37816 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
                  : r.COMPRESSED_RGBA_ASTC_10x5_KHR;
              if (37817 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
                  : r.COMPRESSED_RGBA_ASTC_10x6_KHR;
              if (37818 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
                  : r.COMPRESSED_RGBA_ASTC_10x8_KHR;
              if (37819 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
                  : r.COMPRESSED_RGBA_ASTC_10x10_KHR;
              if (37820 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
                  : r.COMPRESSED_RGBA_ASTC_12x10_KHR;
              if (37821 === n)
                return o === js
                  ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
                  : r.COMPRESSED_RGBA_ASTC_12x12_KHR;
            }
            if (n === Ns || 36494 === n || 36495 === n) {
              if (((r = t.get("EXT_texture_compression_bptc")), null === r))
                return null;
              if (n === Ns)
                return o === js
                  ? r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT
                  : r.COMPRESSED_RGBA_BPTC_UNORM_EXT;
              if (36494 === n) return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
              if (36495 === n) return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
            }
            if (36283 === n || 36284 === n || 36285 === n || 36286 === n) {
              if (((r = t.get("EXT_texture_compression_rgtc")), null === r))
                return null;
              if (n === Ns) return r.COMPRESSED_RED_RGTC1_EXT;
              if (36284 === n) return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;
              if (36285 === n) return r.COMPRESSED_RED_GREEN_RGTC2_EXT;
              if (36286 === n) return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
            }
            return n === Ms
              ? i
                ? e.UNSIGNED_INT_24_8
                : ((r = t.get("WEBGL_depth_texture")),
                  null !== r ? r.UNSIGNED_INT_24_8_WEBGL : null)
              : void 0 !== e[n]
                ? e[n]
                : null;
          },
        };
      }
      class Hp extends $u {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
          super(), (this.isArrayCamera = !0), (this.cameras = e);
        }
      }
      class Gp extends Gc {
        constructor() {
          super(), (this.isGroup = !0), (this.type = "Group");
        }
      }
      const Wp = { type: "move" };
      class jp {
        constructor() {
          (this._targetRay = null), (this._grip = null), (this._hand = null);
        }
        getHandSpace() {
          return (
            null === this._hand &&
            ((this._hand = new Gp()),
              (this._hand.matrixAutoUpdate = !1),
              (this._hand.visible = !1),
              (this._hand.joints = {}),
              (this._hand.inputState = { pinching: !1 })),
            this._hand
          );
        }
        getTargetRaySpace() {
          return (
            null === this._targetRay &&
            ((this._targetRay = new Gp()),
              (this._targetRay.matrixAutoUpdate = !1),
              (this._targetRay.visible = !1),
              (this._targetRay.hasLinearVelocity = !1),
              (this._targetRay.linearVelocity = new Bl()),
              (this._targetRay.hasAngularVelocity = !1),
              (this._targetRay.angularVelocity = new Bl())),
            this._targetRay
          );
        }
        getGripSpace() {
          return (
            null === this._grip &&
            ((this._grip = new Gp()),
              (this._grip.matrixAutoUpdate = !1),
              (this._grip.visible = !1),
              (this._grip.hasLinearVelocity = !1),
              (this._grip.linearVelocity = new Bl()),
              (this._grip.hasAngularVelocity = !1),
              (this._grip.angularVelocity = new Bl())),
            this._grip
          );
        }
        dispatchEvent(e) {
          return (
            null !== this._targetRay && this._targetRay.dispatchEvent(e),
            null !== this._grip && this._grip.dispatchEvent(e),
            null !== this._hand && this._hand.dispatchEvent(e),
            this
          );
        }
        connect(e) {
          if (e && e.hand) {
            const t = this._hand;
            if (t) for (const n of e.hand.values()) this._getHandJoint(t, n);
          }
          return this.dispatchEvent({ type: "connected", data: e }), this;
        }
        disconnect(e) {
          return (
            this.dispatchEvent({ type: "disconnected", data: e }),
            null !== this._targetRay && (this._targetRay.visible = !1),
            null !== this._grip && (this._grip.visible = !1),
            null !== this._hand && (this._hand.visible = !1),
            this
          );
        }
        update(e, t, n) {
          let i = null,
            r = null,
            a = null;
          const o = this._targetRay,
            s = this._grip,
            l = this._hand;
          if (e && "visible-blurred" !== t.session.visibilityState) {
            if (l && e.hand) {
              a = !0;
              for (const a of e.hand.values()) {
                const e = t.getJointPose(a, n),
                  i = this._getHandJoint(l, a);
                null !== e &&
                  (i.matrix.fromArray(e.transform.matrix),
                    i.matrix.decompose(i.position, i.rotation, i.scale),
                    (i.matrixWorldNeedsUpdate = !0),
                    (i.jointRadius = e.radius)),
                  (i.visible = null !== e);
              }
              const i = l.joints["index-finger-tip"],
                r = l.joints["thumb-tip"],
                o = i.position.distanceTo(r.position),
                s = 0.02,
                c = 0.005;
              l.inputState.pinching && o > s + c
                ? ((l.inputState.pinching = !1),
                  this.dispatchEvent({
                    type: "pinchend",
                    handedness: e.handedness,
                    target: this,
                  }))
                : !l.inputState.pinching &&
                o <= s - c &&
                ((l.inputState.pinching = !0),
                  this.dispatchEvent({
                    type: "pinchstart",
                    handedness: e.handedness,
                    target: this,
                  }));
            } else
              null !== s &&
                e.gripSpace &&
                ((r = t.getPose(e.gripSpace, n)),
                  null !== r &&
                  (s.matrix.fromArray(r.transform.matrix),
                    s.matrix.decompose(s.position, s.rotation, s.scale),
                    (s.matrixWorldNeedsUpdate = !0),
                    r.linearVelocity
                      ? ((s.hasLinearVelocity = !0),
                        s.linearVelocity.copy(r.linearVelocity))
                      : (s.hasLinearVelocity = !1),
                    r.angularVelocity
                      ? ((s.hasAngularVelocity = !0),
                        s.angularVelocity.copy(r.angularVelocity))
                      : (s.hasAngularVelocity = !1)));
            null !== o &&
              ((i = t.getPose(e.targetRaySpace, n)),
                null === i && null !== r && (i = r),
                null !== i &&
                (o.matrix.fromArray(i.transform.matrix),
                  o.matrix.decompose(o.position, o.rotation, o.scale),
                  (o.matrixWorldNeedsUpdate = !0),
                  i.linearVelocity
                    ? ((o.hasLinearVelocity = !0),
                      o.linearVelocity.copy(i.linearVelocity))
                    : (o.hasLinearVelocity = !1),
                  i.angularVelocity
                    ? ((o.hasAngularVelocity = !0),
                      o.angularVelocity.copy(i.angularVelocity))
                    : (o.hasAngularVelocity = !1),
                  this.dispatchEvent(Wp)));
          }
          return (
            null !== o && (o.visible = null !== i),
            null !== s && (s.visible = null !== r),
            null !== l && (l.visible = null !== a),
            this
          );
        }
        _getHandJoint(e, t) {
          if (void 0 === e.joints[t.jointName]) {
            const n = new Gp();
            (n.matrixAutoUpdate = !1),
              (n.visible = !1),
              (e.joints[t.jointName] = n),
              e.add(n);
          }
          return e.joints[t.jointName];
        }
      }
      class Xp {
        constructor() {
          (this.texture = null),
            (this.mesh = null),
            (this.depthNear = 0),
            (this.depthFar = 0);
        }
        init(e, t, n) {
          if (null === this.texture) {
            const i = new Dl();
            (e.properties.get(i).__webglTexture = t.texture),
              (t.depthNear == n.depthNear && t.depthFar == n.depthFar) ||
              ((this.depthNear = t.depthNear), (this.depthFar = t.depthFar)),
              (this.texture = i);
          }
        }
        render(e, t) {
          if (null !== this.texture) {
            if (null === this.mesh) {
              const e = t.cameras[0].viewport,
                n = new qu({
                  extensions: { fragDepth: !0 },
                  vertexShader:
                    "\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}",
                  fragmentShader:
                    "\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepthEXT = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepthEXT = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}",
                  uniforms: {
                    depthColor: { value: this.texture },
                    depthWidth: { value: e.z },
                    depthHeight: { value: e.w },
                  },
                });
              this.mesh = new Vu(new pd(20, 20), n);
            }
            e.render(this.mesh, t);
          }
        }
        reset() {
          (this.texture = null), (this.mesh = null);
        }
      }
      class Yp extends el {
        constructor(e, t) {
          super();
          const n = this;
          let i = null,
            r = 1,
            a = null,
            o = "local-floor",
            s = 1,
            l = null,
            c = null,
            u = null,
            d = null,
            h = null,
            p = null;
          const f = new Xp(),
            m = t.getContextAttributes();
          let g = null,
            v = null;
          const _ = [],
            y = [],
            x = new hl();
          let b = null;
          const S = new $u();
          S.layers.enable(1), (S.viewport = new Ul());
          const E = new $u();
          E.layers.enable(2), (E.viewport = new Ul());
          const M = [S, E],
            T = new Hp();
          T.layers.enable(1), T.layers.enable(2);
          let w = null,
            A = null;
          function R(e) {
            const t = y.indexOf(e.inputSource);
            if (-1 === t) return;
            const n = _[t];
            void 0 !== n &&
              (n.update(e.inputSource, e.frame, l || a),
                n.dispatchEvent({ type: e.type, data: e.inputSource }));
          }
          function C() {
            i.removeEventListener("select", R),
              i.removeEventListener("selectstart", R),
              i.removeEventListener("selectend", R),
              i.removeEventListener("squeeze", R),
              i.removeEventListener("squeezestart", R),
              i.removeEventListener("squeezeend", R),
              i.removeEventListener("end", C),
              i.removeEventListener("inputsourceschange", P);
            for (let e = 0; e < _.length; e++) {
              const t = y[e];
              null !== t && ((y[e] = null), _[e].disconnect(t));
            }
            (w = null),
              (A = null),
              f.reset(),
              e.setRenderTarget(g),
              (h = null),
              (d = null),
              (u = null),
              (i = null),
              (v = null),
              I.stop(),
              (n.isPresenting = !1),
              e.setPixelRatio(b),
              e.setSize(x.width, x.height, !1),
              n.dispatchEvent({ type: "sessionend" });
          }
          function P(e) {
            for (let t = 0; t < e.removed.length; t++) {
              const n = e.removed[t],
                i = y.indexOf(n);
              i >= 0 && ((y[i] = null), _[i].disconnect(n));
            }
            for (let t = 0; t < e.added.length; t++) {
              const n = e.added[t];
              let i = y.indexOf(n);
              if (-1 === i) {
                for (let e = 0; e < _.length; e++) {
                  if (e >= y.length) {
                    y.push(n), (i = e);
                    break;
                  }
                  if (null === y[e]) {
                    (y[e] = n), (i = e);
                    break;
                  }
                }
                if (-1 === i) break;
              }
              const r = _[i];
              r && r.connect(n);
            }
          }
          (this.cameraAutoUpdate = !0),
            (this.enabled = !1),
            (this.isPresenting = !1),
            (this.getController = function (e) {
              let t = _[e];
              return (
                void 0 === t && ((t = new jp()), (_[e] = t)),
                t.getTargetRaySpace()
              );
            }),
            (this.getControllerGrip = function (e) {
              let t = _[e];
              return (
                void 0 === t && ((t = new jp()), (_[e] = t)), t.getGripSpace()
              );
            }),
            (this.getHand = function (e) {
              let t = _[e];
              return (
                void 0 === t && ((t = new jp()), (_[e] = t)), t.getHandSpace()
              );
            }),
            (this.setFramebufferScaleFactor = function (e) {
              (r = e),
                !0 === n.isPresenting &&
                console.warn(
                  "THREE.WebXRManager: Cannot change framebuffer scale while presenting."
                );
            }),
            (this.setReferenceSpaceType = function (e) {
              (o = e),
                !0 === n.isPresenting &&
                console.warn(
                  "THREE.WebXRManager: Cannot change reference space type while presenting."
                );
            }),
            (this.getReferenceSpace = function () {
              return l || a;
            }),
            (this.setReferenceSpace = function (e) {
              l = e;
            }),
            (this.getBaseLayer = function () {
              return null !== d ? d : h;
            }),
            (this.getBinding = function () {
              return u;
            }),
            (this.getFrame = function () {
              return p;
            }),
            (this.getSession = function () {
              return i;
            }),
            (this.setSession = async function (c) {
              if (((i = c), null !== i)) {
                if (
                  ((g = e.getRenderTarget()),
                    i.addEventListener("select", R),
                    i.addEventListener("selectstart", R),
                    i.addEventListener("selectend", R),
                    i.addEventListener("squeeze", R),
                    i.addEventListener("squeezestart", R),
                    i.addEventListener("squeezeend", R),
                    i.addEventListener("end", C),
                    i.addEventListener("inputsourceschange", P),
                    !0 !== m.xrCompatible && (await t.makeXRCompatible()),
                    (b = e.getPixelRatio()),
                    e.getSize(x),
                    void 0 === i.renderState.layers ||
                    !1 === e.capabilities.isWebGL2)
                ) {
                  const n = {
                    antialias: void 0 !== i.renderState.layers || m.antialias,
                    alpha: !0,
                    depth: m.depth,
                    stencil: m.stencil,
                    framebufferScaleFactor: r,
                  };
                  (h = new XRWebGLLayer(i, t, n)),
                    i.updateRenderState({ baseLayer: h }),
                    e.setPixelRatio(1),
                    e.setSize(h.framebufferWidth, h.framebufferHeight, !1),
                    (v = new Ol(h.framebufferWidth, h.framebufferHeight, {
                      format: Ts,
                      type: _s,
                      colorSpace: e.outputColorSpace,
                      stencilBuffer: m.stencil,
                    }));
                } else {
                  let n = null,
                    a = null,
                    o = null;
                  m.depth &&
                    ((o = m.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24),
                      (n = m.stencil ? As : ws),
                      (a = m.stencil ? Ms : bs));
                  const s = {
                    colorFormat: t.RGBA8,
                    depthFormat: o,
                    scaleFactor: r,
                  };
                  (u = new XRWebGLBinding(i, t)),
                    (d = u.createProjectionLayer(s)),
                    i.updateRenderState({ layers: [d] }),
                    e.setPixelRatio(1),
                    e.setSize(d.textureWidth, d.textureHeight, !1),
                    (v = new Ol(d.textureWidth, d.textureHeight, {
                      format: Ts,
                      type: _s,
                      depthTexture: new Jd(
                        d.textureWidth,
                        d.textureHeight,
                        a,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        n
                      ),
                      stencilBuffer: m.stencil,
                      colorSpace: e.outputColorSpace,
                      samples: m.antialias ? 4 : 0,
                    }));
                  e.properties.get(v).__ignoreDepthValues = d.ignoreDepthValues;
                }
                (v.isXRRenderTarget = !0),
                  this.setFoveation(s),
                  (l = null),
                  (a = await i.requestReferenceSpace(o)),
                  I.setContext(i),
                  I.start(),
                  (n.isPresenting = !0),
                  n.dispatchEvent({ type: "sessionstart" });
              }
            }),
            (this.getEnvironmentBlendMode = function () {
              if (null !== i) return i.environmentBlendMode;
            });
          const L = new Bl(),
            N = new Bl();
          function D(e, t) {
            null === t
              ? e.matrixWorld.copy(e.matrix)
              : e.matrixWorld.multiplyMatrices(t.matrixWorld, e.matrix),
              e.matrixWorldInverse.copy(e.matrixWorld).invert();
          }
          (this.updateCamera = function (e) {
            if (null === i) return;
            null !== f.texture &&
              ((e.near = f.depthNear), (e.far = f.depthFar)),
              (T.near = E.near = S.near = e.near),
              (T.far = E.far = S.far = e.far),
              (w === T.near && A === T.far) ||
              (i.updateRenderState({ depthNear: T.near, depthFar: T.far }),
                (w = T.near),
                (A = T.far),
                (S.near = w),
                (S.far = A),
                (E.near = w),
                (E.far = A),
                S.updateProjectionMatrix(),
                E.updateProjectionMatrix(),
                e.updateProjectionMatrix());
            const t = e.parent,
              n = T.cameras;
            D(T, t);
            for (let i = 0; i < n.length; i++) D(n[i], t);
            2 === n.length
              ? (function (e, t, n) {
                L.setFromMatrixPosition(t.matrixWorld),
                  N.setFromMatrixPosition(n.matrixWorld);
                const i = L.distanceTo(N),
                  r = t.projectionMatrix.elements,
                  a = n.projectionMatrix.elements,
                  o = r[14] / (r[10] - 1),
                  s = r[14] / (r[10] + 1),
                  l = (r[9] + 1) / r[5],
                  c = (r[9] - 1) / r[5],
                  u = (r[8] - 1) / r[0],
                  d = (a[8] + 1) / a[0],
                  h = o * u,
                  p = o * d,
                  f = i / (-u + d),
                  m = f * -u;
                t.matrixWorld.decompose(e.position, e.quaternion, e.scale),
                  e.translateX(m),
                  e.translateZ(f),
                  e.matrixWorld.compose(e.position, e.quaternion, e.scale),
                  e.matrixWorldInverse.copy(e.matrixWorld).invert();
                const g = o + f,
                  v = s + f,
                  _ = h - m,
                  y = p + (i - m),
                  x = ((l * s) / v) * g,
                  b = ((c * s) / v) * g;
                e.projectionMatrix.makePerspective(_, y, x, b, g, v),
                  e.projectionMatrixInverse.copy(e.projectionMatrix).invert();
              })(T, S, E)
              : T.projectionMatrix.copy(S.projectionMatrix),
              (function (e, t, n) {
                null === n
                  ? e.matrix.copy(t.matrixWorld)
                  : (e.matrix.copy(n.matrixWorld),
                    e.matrix.invert(),
                    e.matrix.multiply(t.matrixWorld));
                e.matrix.decompose(e.position, e.quaternion, e.scale),
                  e.updateMatrixWorld(!0),
                  e.projectionMatrix.copy(t.projectionMatrix),
                  e.projectionMatrixInverse.copy(t.projectionMatrixInverse),
                  e.isPerspectiveCamera &&
                  ((e.fov =
                    2 * il * Math.atan(1 / e.projectionMatrix.elements[5])),
                    (e.zoom = 1));
              })(e, T, t);
          }),
            (this.getCamera = function () {
              return T;
            }),
            (this.getFoveation = function () {
              if (null !== d || null !== h) return s;
            }),
            (this.setFoveation = function (e) {
              (s = e),
                null !== d && (d.fixedFoveation = e),
                null !== h &&
                void 0 !== h.fixedFoveation &&
                (h.fixedFoveation = e);
            }),
            (this.hasDepthSensing = function () {
              return null !== f.texture;
            });
          let U = null;
          const I = new dd();
          I.setAnimationLoop(function (t, r) {
            if (((c = r.getViewerPose(l || a)), (p = r), null !== c)) {
              const t = c.views;
              null !== h &&
                (e.setRenderTargetFramebuffer(v, h.framebuffer),
                  e.setRenderTarget(v));
              let n = !1;
              t.length !== T.cameras.length &&
                ((T.cameras.length = 0), (n = !0));
              for (let i = 0; i < t.length; i++) {
                const r = t[i];
                let a = null;
                if (null !== h) a = h.getViewport(r);
                else {
                  const t = u.getViewSubImage(d, r);
                  (a = t.viewport),
                    0 === i &&
                    (e.setRenderTargetTextures(
                      v,
                      t.colorTexture,
                      d.ignoreDepthValues ? void 0 : t.depthStencilTexture
                    ),
                      e.setRenderTarget(v));
                }
                let o = M[i];
                void 0 === o &&
                  ((o = new $u()),
                    o.layers.enable(i),
                    (o.viewport = new Ul()),
                    (M[i] = o)),
                  o.matrix.fromArray(r.transform.matrix),
                  o.matrix.decompose(o.position, o.quaternion, o.scale),
                  o.projectionMatrix.fromArray(r.projectionMatrix),
                  o.projectionMatrixInverse.copy(o.projectionMatrix).invert(),
                  o.viewport.set(a.x, a.y, a.width, a.height),
                  0 === i &&
                  (T.matrix.copy(o.matrix),
                    T.matrix.decompose(T.position, T.quaternion, T.scale)),
                  !0 === n && T.cameras.push(o);
              }
              const r = i.enabledFeatures;
              if (r && r.includes("depth-sensing")) {
                const n = u.getDepthInformation(t[0]);
                n && n.isValid && n.texture && f.init(e, n, i.renderState);
              }
            }
            for (let e = 0; e < _.length; e++) {
              const t = y[e],
                n = _[e];
              null !== t && void 0 !== n && n.update(t, r, l || a);
            }
            f.render(e, T),
              U && U(t, r),
              r.detectedPlanes &&
              n.dispatchEvent({ type: "planesdetected", data: r }),
              (p = null);
          }),
            (this.setAnimationLoop = function (e) {
              U = e;
            }),
            (this.dispose = function () { });
        }
      }
      const qp = new wc(),
        Kp = new gc();
      function Zp(e, t) {
        function n(e, t) {
          !0 === e.matrixAutoUpdate && e.updateMatrix(), t.value.copy(e.matrix);
        }
        function i(i, r) {
          (i.opacity.value = r.opacity),
            r.color && i.diffuse.value.copy(r.color),
            r.emissive &&
            i.emissive.value
              .copy(r.emissive)
              .multiplyScalar(r.emissiveIntensity),
            r.map && ((i.map.value = r.map), n(r.map, i.mapTransform)),
            r.alphaMap &&
            ((i.alphaMap.value = r.alphaMap),
              n(r.alphaMap, i.alphaMapTransform)),
            r.bumpMap &&
            ((i.bumpMap.value = r.bumpMap),
              n(r.bumpMap, i.bumpMapTransform),
              (i.bumpScale.value = r.bumpScale),
              r.side === jo && (i.bumpScale.value *= -1)),
            r.normalMap &&
            ((i.normalMap.value = r.normalMap),
              n(r.normalMap, i.normalMapTransform),
              i.normalScale.value.copy(r.normalScale),
              r.side === jo && i.normalScale.value.negate()),
            r.displacementMap &&
            ((i.displacementMap.value = r.displacementMap),
              n(r.displacementMap, i.displacementMapTransform),
              (i.displacementScale.value = r.displacementScale),
              (i.displacementBias.value = r.displacementBias)),
            r.emissiveMap &&
            ((i.emissiveMap.value = r.emissiveMap),
              n(r.emissiveMap, i.emissiveMapTransform)),
            r.specularMap &&
            ((i.specularMap.value = r.specularMap),
              n(r.specularMap, i.specularMapTransform)),
            r.alphaTest > 0 && (i.alphaTest.value = r.alphaTest);
          const a = t.get(r),
            o = a.envMap,
            s = a.envMapRotation;
          if (
            (o &&
              ((i.envMap.value = o),
                qp.copy(s),
                (qp.x *= -1),
                (qp.y *= -1),
                (qp.z *= -1),
                o.isCubeTexture &&
                !1 === o.isRenderTargetTexture &&
                ((qp.y *= -1), (qp.z *= -1)),
                i.envMapRotation.value.setFromMatrix4(
                  Kp.makeRotationFromEuler(qp)
                ),
                (i.flipEnvMap.value =
                  o.isCubeTexture && !1 === o.isRenderTargetTexture ? -1 : 1),
                (i.reflectivity.value = r.reflectivity),
                (i.ior.value = r.ior),
                (i.refractionRatio.value = r.refractionRatio)),
              r.lightMap)
          ) {
            i.lightMap.value = r.lightMap;
            const t = !0 === e._useLegacyLights ? Math.PI : 1;
            (i.lightMapIntensity.value = r.lightMapIntensity * t),
              n(r.lightMap, i.lightMapTransform);
          }
          r.aoMap &&
            ((i.aoMap.value = r.aoMap),
              (i.aoMapIntensity.value = r.aoMapIntensity),
              n(r.aoMap, i.aoMapTransform));
        }
        return {
          refreshFogUniforms: function (t, n) {
            n.color.getRGB(t.fogColor.value, Xu(e)),
              n.isFog
                ? ((t.fogNear.value = n.near), (t.fogFar.value = n.far))
                : n.isFogExp2 && (t.fogDensity.value = n.density);
          },
          refreshMaterialUniforms: function (e, r, a, o, s) {
            r.isMeshBasicMaterial || r.isMeshLambertMaterial
              ? i(e, r)
              : r.isMeshToonMaterial
                ? (i(e, r),
                  (function (e, t) {
                    t.gradientMap && (e.gradientMap.value = t.gradientMap);
                  })(e, r))
                : r.isMeshPhongMaterial
                  ? (i(e, r),
                    (function (e, t) {
                      e.specular.value.copy(t.specular),
                        (e.shininess.value = Math.max(t.shininess, 1e-4));
                    })(e, r))
                  : r.isMeshStandardMaterial
                    ? (i(e, r),
                      (function (e, i) {
                        (e.metalness.value = i.metalness),
                          i.metalnessMap &&
                          ((e.metalnessMap.value = i.metalnessMap),
                            n(i.metalnessMap, e.metalnessMapTransform));
                        (e.roughness.value = i.roughness),
                          i.roughnessMap &&
                          ((e.roughnessMap.value = i.roughnessMap),
                            n(i.roughnessMap, e.roughnessMapTransform));
                        const r = t.get(i).envMap;
                        r && (e.envMapIntensity.value = i.envMapIntensity);
                      })(e, r),
                      r.isMeshPhysicalMaterial &&
                      (function (e, t, i) {
                        (e.ior.value = t.ior),
                          t.sheen > 0 &&
                          (e.sheenColor.value
                            .copy(t.sheenColor)
                            .multiplyScalar(t.sheen),
                            (e.sheenRoughness.value = t.sheenRoughness),
                            t.sheenColorMap &&
                            ((e.sheenColorMap.value = t.sheenColorMap),
                              n(t.sheenColorMap, e.sheenColorMapTransform)),
                            t.sheenRoughnessMap &&
                            ((e.sheenRoughnessMap.value = t.sheenRoughnessMap),
                              n(
                                t.sheenRoughnessMap,
                                e.sheenRoughnessMapTransform
                              )));
                        t.clearcoat > 0 &&
                          ((e.clearcoat.value = t.clearcoat),
                            (e.clearcoatRoughness.value = t.clearcoatRoughness),
                            t.clearcoatMap &&
                            ((e.clearcoatMap.value = t.clearcoatMap),
                              n(t.clearcoatMap, e.clearcoatMapTransform)),
                            t.clearcoatRoughnessMap &&
                            ((e.clearcoatRoughnessMap.value =
                              t.clearcoatRoughnessMap),
                              n(
                                t.clearcoatRoughnessMap,
                                e.clearcoatRoughnessMapTransform
                              )),
                            t.clearcoatNormalMap &&
                            ((e.clearcoatNormalMap.value = t.clearcoatNormalMap),
                              n(t.clearcoatNormalMap, e.clearcoatNormalMapTransform),
                              e.clearcoatNormalScale.value.copy(
                                t.clearcoatNormalScale
                              ),
                              t.side === jo &&
                              e.clearcoatNormalScale.value.negate()));
                        t.iridescence > 0 &&
                          ((e.iridescence.value = t.iridescence),
                            (e.iridescenceIOR.value = t.iridescenceIOR),
                            (e.iridescenceThicknessMinimum.value =
                              t.iridescenceThicknessRange[0]),
                            (e.iridescenceThicknessMaximum.value =
                              t.iridescenceThicknessRange[1]),
                            t.iridescenceMap &&
                            ((e.iridescenceMap.value = t.iridescenceMap),
                              n(t.iridescenceMap, e.iridescenceMapTransform)),
                            t.iridescenceThicknessMap &&
                            ((e.iridescenceThicknessMap.value =
                              t.iridescenceThicknessMap),
                              n(
                                t.iridescenceThicknessMap,
                                e.iridescenceThicknessMapTransform
                              )));
                        t.transmission > 0 &&
                          ((e.transmission.value = t.transmission),
                            (e.transmissionSamplerMap.value = i.texture),
                            e.transmissionSamplerSize.value.set(i.width, i.height),
                            t.transmissionMap &&
                            ((e.transmissionMap.value = t.transmissionMap),
                              n(t.transmissionMap, e.transmissionMapTransform)),
                            (e.thickness.value = t.thickness),
                            t.thicknessMap &&
                            ((e.thicknessMap.value = t.thicknessMap),
                              n(t.thicknessMap, e.thicknessMapTransform)),
                            (e.attenuationDistance.value = t.attenuationDistance),
                            e.attenuationColor.value.copy(t.attenuationColor));
                        t.anisotropy > 0 &&
                          (e.anisotropyVector.value.set(
                            t.anisotropy * Math.cos(t.anisotropyRotation),
                            t.anisotropy * Math.sin(t.anisotropyRotation)
                          ),
                            t.anisotropyMap &&
                            ((e.anisotropyMap.value = t.anisotropyMap),
                              n(t.anisotropyMap, e.anisotropyMapTransform)));
                        (e.specularIntensity.value = t.specularIntensity),
                          e.specularColor.value.copy(t.specularColor),
                          t.specularColorMap &&
                          ((e.specularColorMap.value = t.specularColorMap),
                            n(t.specularColorMap, e.specularColorMapTransform));
                        t.specularIntensityMap &&
                          ((e.specularIntensityMap.value = t.specularIntensityMap),
                            n(
                              t.specularIntensityMap,
                              e.specularIntensityMapTransform
                            ));
                      })(e, r, s))
                    : r.isMeshMatcapMaterial
                      ? (i(e, r),
                        (function (e, t) {
                          t.matcap && (e.matcap.value = t.matcap);
                        })(e, r))
                      : r.isMeshDepthMaterial
                        ? i(e, r)
                        : r.isMeshDistanceMaterial
                          ? (i(e, r),
                            (function (e, n) {
                              const i = t.get(n).light;
                              e.referencePosition.value.setFromMatrixPosition(
                                i.matrixWorld
                              ),
                                (e.nearDistance.value = i.shadow.camera.near),
                                (e.farDistance.value = i.shadow.camera.far);
                            })(e, r))
                          : r.isMeshNormalMaterial
                            ? i(e, r)
                            : r.isLineBasicMaterial
                              ? ((function (e, t) {
                                e.diffuse.value.copy(t.color),
                                  (e.opacity.value = t.opacity),
                                  t.map && ((e.map.value = t.map), n(t.map, e.mapTransform));
                              })(e, r),
                                r.isLineDashedMaterial &&
                                (function (e, t) {
                                  (e.dashSize.value = t.dashSize),
                                    (e.totalSize.value = t.dashSize + t.gapSize),
                                    (e.scale.value = t.scale);
                                })(e, r))
                              : r.isPointsMaterial
                                ? (function (e, t, i, r) {
                                  e.diffuse.value.copy(t.color),
                                    (e.opacity.value = t.opacity),
                                    (e.size.value = t.size * i),
                                    (e.scale.value = 0.5 * r),
                                    t.map && ((e.map.value = t.map), n(t.map, e.uvTransform));
                                  t.alphaMap &&
                                    ((e.alphaMap.value = t.alphaMap),
                                      n(t.alphaMap, e.alphaMapTransform));
                                  t.alphaTest > 0 && (e.alphaTest.value = t.alphaTest);
                                })(e, r, a, o)
                                : r.isSpriteMaterial
                                  ? (function (e, t) {
                                    e.diffuse.value.copy(t.color),
                                      (e.opacity.value = t.opacity),
                                      (e.rotation.value = t.rotation),
                                      t.map && ((e.map.value = t.map), n(t.map, e.mapTransform));
                                    t.alphaMap &&
                                      ((e.alphaMap.value = t.alphaMap),
                                        n(t.alphaMap, e.alphaMapTransform));
                                    t.alphaTest > 0 && (e.alphaTest.value = t.alphaTest);
                                  })(e, r)
                                  : r.isShadowMaterial
                                    ? (e.color.value.copy(r.color), (e.opacity.value = r.opacity))
                                    : r.isShaderMaterial && (r.uniformsNeedUpdate = !1);
          },
        };
      }
      function Jp(e, t, n, i) {
        let r = {},
          a = {},
          o = [];
        const s = n.isWebGL2
          ? e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS)
          : 0;
        function l(e, t, n, i) {
          const r = e.value,
            a = t + "_" + n;
          if (void 0 === i[a])
            return (
              (i[a] =
                "number" === typeof r || "boolean" === typeof r
                  ? r
                  : r.clone()),
              !0
            );
          {
            const e = i[a];
            if ("number" === typeof r || "boolean" === typeof r) {
              if (e !== r) return (i[a] = r), !0;
            } else if (!1 === e.equals(r)) return e.copy(r), !0;
          }
          return !1;
        }
        function c(e) {
          const t = { boundary: 0, storage: 0 };
          return (
            "number" === typeof e || "boolean" === typeof e
              ? ((t.boundary = 4), (t.storage = 4))
              : e.isVector2
                ? ((t.boundary = 8), (t.storage = 8))
                : e.isVector3 || e.isColor
                  ? ((t.boundary = 16), (t.storage = 12))
                  : e.isVector4
                    ? ((t.boundary = 16), (t.storage = 16))
                    : e.isMatrix3
                      ? ((t.boundary = 48), (t.storage = 48))
                      : e.isMatrix4
                        ? ((t.boundary = 64), (t.storage = 64))
                        : e.isTexture
                          ? console.warn(
                            "THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."
                          )
                          : console.warn(
                            "THREE.WebGLRenderer: Unsupported uniform value type.",
                            e
                          ),
            t
          );
        }
        function u(t) {
          const n = t.target;
          n.removeEventListener("dispose", u);
          const i = o.indexOf(n.__bindingPointIndex);
          o.splice(i, 1),
            e.deleteBuffer(r[n.id]),
            delete r[n.id],
            delete a[n.id];
        }
        return {
          bind: function (e, t) {
            const n = t.program;
            i.uniformBlockBinding(e, n);
          },
          update: function (n, d) {
            let h = r[n.id];
            void 0 === h &&
              (!(function (e) {
                const t = e.uniforms;
                let n = 0;
                const i = 16;
                for (let a = 0, o = t.length; a < o; a++) {
                  const e = Array.isArray(t[a]) ? t[a] : [t[a]];
                  for (let t = 0, r = e.length; t < r; t++) {
                    const r = e[t],
                      a = Array.isArray(r.value) ? r.value : [r.value];
                    for (let e = 0, t = a.length; e < t; e++) {
                      const t = c(a[e]),
                        o = n % i;
                      0 !== o && i - o < t.boundary && (n += i - o),
                        (r.__data = new Float32Array(
                          t.storage / Float32Array.BYTES_PER_ELEMENT
                        )),
                        (r.__offset = n),
                        (n += t.storage);
                    }
                  }
                }
                const r = n % i;
                r > 0 && (n += i - r);
                (e.__size = n), (e.__cache = {});
              })(n),
                (h = (function (t) {
                  const n = (function () {
                    for (let e = 0; e < s; e++)
                      if (-1 === o.indexOf(e)) return o.push(e), e;
                    return (
                      console.error(
                        "THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."
                      ),
                      0
                    );
                  })();
                  t.__bindingPointIndex = n;
                  const i = e.createBuffer(),
                    r = t.__size,
                    a = t.usage;
                  return (
                    e.bindBuffer(e.UNIFORM_BUFFER, i),
                    e.bufferData(e.UNIFORM_BUFFER, r, a),
                    e.bindBuffer(e.UNIFORM_BUFFER, null),
                    e.bindBufferBase(e.UNIFORM_BUFFER, n, i),
                    i
                  );
                })(n)),
                (r[n.id] = h),
                n.addEventListener("dispose", u));
            const p = d.program;
            i.updateUBOMapping(n, p);
            const f = t.render.frame;
            a[n.id] !== f &&
              (!(function (t) {
                const n = r[t.id],
                  i = t.uniforms,
                  a = t.__cache;
                e.bindBuffer(e.UNIFORM_BUFFER, n);
                for (let r = 0, o = i.length; r < o; r++) {
                  const t = Array.isArray(i[r]) ? i[r] : [i[r]];
                  for (let n = 0, i = t.length; n < i; n++) {
                    const i = t[n];
                    if (!0 === l(i, r, n, a)) {
                      const t = i.__offset,
                        n = Array.isArray(i.value) ? i.value : [i.value];
                      let r = 0;
                      for (let a = 0; a < n.length; a++) {
                        const o = n[a],
                          s = c(o);
                        "number" === typeof o || "boolean" === typeof o
                          ? ((i.__data[0] = o),
                            e.bufferSubData(e.UNIFORM_BUFFER, t + r, i.__data))
                          : o.isMatrix3
                            ? ((i.__data[0] = o.elements[0]),
                              (i.__data[1] = o.elements[1]),
                              (i.__data[2] = o.elements[2]),
                              (i.__data[3] = 0),
                              (i.__data[4] = o.elements[3]),
                              (i.__data[5] = o.elements[4]),
                              (i.__data[6] = o.elements[5]),
                              (i.__data[7] = 0),
                              (i.__data[8] = o.elements[6]),
                              (i.__data[9] = o.elements[7]),
                              (i.__data[10] = o.elements[8]),
                              (i.__data[11] = 0))
                            : (o.toArray(i.__data, r),
                              (r += s.storage / Float32Array.BYTES_PER_ELEMENT));
                      }
                      e.bufferSubData(e.UNIFORM_BUFFER, t, i.__data);
                    }
                  }
                }
                e.bindBuffer(e.UNIFORM_BUFFER, null);
              })(n),
                (a[n.id] = f));
          },
          dispose: function () {
            for (const t in r) e.deleteBuffer(r[t]);
            (o = []), (r = {}), (a = {});
          },
        };
      }
      class Qp {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          const {
            canvas: t = vl(),
            context: n = null,
            depth: i = !0,
            stencil: r = !0,
            alpha: a = !1,
            antialias: o = !1,
            premultipliedAlpha: s = !0,
            preserveDrawingBuffer: l = !1,
            powerPreference: c = "default",
            failIfMajorPerformanceCaveat: u = !1,
          } = e;
          let d;
          (this.isWebGLRenderer = !0),
            (d = null !== n ? n.getContextAttributes().alpha : a);
          const h = new Uint32Array(4),
            p = new Int32Array(4);
          let f = null,
            m = null;
          const g = [],
            v = [];
          (this.domElement = t),
            (this.debug = { checkShaderErrors: !0, onShaderError: null }),
            (this.autoClear = !0),
            (this.autoClearColor = !0),
            (this.autoClearDepth = !0),
            (this.autoClearStencil = !0),
            (this.sortObjects = !0),
            (this.clippingPlanes = []),
            (this.localClippingEnabled = !1),
            (this._outputColorSpace = Bs),
            (this._useLegacyLights = !1),
            (this.toneMapping = Zo),
            (this.toneMappingExposure = 1);
          const _ = this;
          let y = !1,
            x = 0,
            b = 0,
            S = null,
            E = -1,
            M = null;
          const T = new Ul(),
            w = new Ul();
          let A = null;
          const R = new au(0);
          let C = 0,
            P = t.width,
            L = t.height,
            N = 1,
            D = null,
            U = null;
          const I = new Ul(0, 0, P, L),
            O = new Ul(0, 0, P, L);
          let k = !1;
          const F = new ud();
          let z = !1,
            B = !1,
            V = null;
          const H = new gc(),
            G = new hl(),
            W = new Bl(),
            j = {
              background: null,
              fog: null,
              environment: null,
              overrideMaterial: null,
              isScene: !0,
            };
          function X() {
            return null === S ? N : 1;
          }
          let Y,
            q,
            K,
            Z,
            J,
            Q,
            $,
            ee,
            te,
            ne,
            ie,
            re,
            ae,
            oe,
            se,
            le,
            ce,
            ue,
            de,
            he,
            pe,
            fe,
            me,
            ge,
            ve = n;
          function _e(e, n) {
            for (let i = 0; i < e.length; i++) {
              const r = e[i],
                a = t.getContext(r, n);
              if (null !== a) return a;
            }
            return null;
          }
          try {
            const e = {
              alpha: !0,
              depth: i,
              stencil: r,
              antialias: o,
              premultipliedAlpha: s,
              preserveDrawingBuffer: l,
              powerPreference: c,
              failIfMajorPerformanceCaveat: u,
            };
            if (
              ("setAttribute" in t &&
                t.setAttribute("data-engine", "three.js r".concat(Bo)),
                t.addEventListener("webglcontextlost", be, !1),
                t.addEventListener("webglcontextrestored", Se, !1),
                t.addEventListener("webglcontextcreationerror", Ee, !1),
                null === ve)
            ) {
              const t = ["webgl2", "webgl", "experimental-webgl"];
              if (
                (!0 === _.isWebGL1Renderer && t.shift(),
                  (ve = _e(t, e)),
                  null === ve)
              )
                throw _e(t)
                  ? new Error(
                    "Error creating WebGL context with your selected attributes."
                  )
                  : new Error("Error creating WebGL context.");
            }
            "undefined" !== typeof WebGLRenderingContext &&
              ve instanceof WebGLRenderingContext &&
              console.warn(
                "THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."
              ),
              void 0 === ve.getShaderPrecisionFormat &&
              (ve.getShaderPrecisionFormat = function () {
                return { rangeMin: 1, rangeMax: 1, precision: 1 };
              });
          } catch (ke) {
            throw (console.error("THREE.WebGLRenderer: " + ke.message), ke);
          }
          function ye() {
            (Y = new Gd(ve)),
              (q = new Ed(ve, Y, e)),
              Y.init(q),
              (fe = new Vp(ve, Y, q)),
              (K = new zp(ve, Y, q)),
              (Z = new Xd(ve)),
              (J = new Tp()),
              (Q = new Bp(ve, Y, K, J, q, fe, Z)),
              ($ = new Td(_)),
              (ee = new Hd(_)),
              (te = new hd(ve, q)),
              (me = new bd(ve, Y, te, q)),
              (ne = new Wd(ve, te, Z, me)),
              (ie = new Zd(ve, ne, te, Z)),
              (de = new Kd(ve, q, Q)),
              (le = new Md(J)),
              (re = new Mp(_, $, ee, Y, q, me, le)),
              (ae = new Zp(_, J)),
              (oe = new Cp()),
              (se = new Ip(Y, q)),
              (ue = new xd(_, $, ee, K, ie, d, s)),
              (ce = new Fp(_, ie, q)),
              (ge = new Jp(ve, Z, q, K)),
              (he = new Sd(ve, Y, Z, q)),
              (pe = new jd(ve, Y, Z, q)),
              (Z.programs = re.programs),
              (_.capabilities = q),
              (_.extensions = Y),
              (_.properties = J),
              (_.renderLists = oe),
              (_.shadowMap = ce),
              (_.state = K),
              (_.info = Z);
          }
          ye();
          const xe = new Yp(_, ve);
          function be(e) {
            e.preventDefault(),
              console.log("THREE.WebGLRenderer: Context Lost."),
              (y = !0);
          }
          function Se() {
            console.log("THREE.WebGLRenderer: Context Restored."), (y = !1);
            const e = Z.autoReset,
              t = ce.enabled,
              n = ce.autoUpdate,
              i = ce.needsUpdate,
              r = ce.type;
            ye(),
              (Z.autoReset = e),
              (ce.enabled = t),
              (ce.autoUpdate = n),
              (ce.needsUpdate = i),
              (ce.type = r);
          }
          function Ee(e) {
            console.error(
              "THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",
              e.statusMessage
            );
          }
          function Me(e) {
            const t = e.target;
            t.removeEventListener("dispose", Me),
              (function (e) {
                (function (e) {
                  const t = J.get(e).programs;
                  void 0 !== t &&
                    (t.forEach(function (e) {
                      re.releaseProgram(e);
                    }),
                      e.isShaderMaterial && re.releaseShaderCache(e));
                })(e),
                  J.remove(e);
              })(t);
          }
          function Te(e, t, n) {
            !0 === e.transparent && 2 === e.side && !1 === e.forceSinglePass
              ? ((e.side = jo),
                (e.needsUpdate = !0),
                Ue(e, t, n),
                (e.side = Wo),
                (e.needsUpdate = !0),
                Ue(e, t, n),
                (e.side = 2))
              : Ue(e, t, n);
          }
          (this.xr = xe),
            (this.getContext = function () {
              return ve;
            }),
            (this.getContextAttributes = function () {
              return ve.getContextAttributes();
            }),
            (this.forceContextLoss = function () {
              const e = Y.get("WEBGL_lose_context");
              e && e.loseContext();
            }),
            (this.forceContextRestore = function () {
              const e = Y.get("WEBGL_lose_context");
              e && e.restoreContext();
            }),
            (this.getPixelRatio = function () {
              return N;
            }),
            (this.setPixelRatio = function (e) {
              void 0 !== e && ((N = e), this.setSize(P, L, !1));
            }),
            (this.getSize = function (e) {
              return e.set(P, L);
            }),
            (this.setSize = function (e, n) {
              let i =
                !(arguments.length > 2 && void 0 !== arguments[2]) ||
                arguments[2];
              xe.isPresenting
                ? console.warn(
                  "THREE.WebGLRenderer: Can't change size while VR device is presenting."
                )
                : ((P = e),
                  (L = n),
                  (t.width = Math.floor(e * N)),
                  (t.height = Math.floor(n * N)),
                  !0 === i &&
                  ((t.style.width = e + "px"), (t.style.height = n + "px")),
                  this.setViewport(0, 0, e, n));
            }),
            (this.getDrawingBufferSize = function (e) {
              return e.set(P * N, L * N).floor();
            }),
            (this.setDrawingBufferSize = function (e, n, i) {
              (P = e),
                (L = n),
                (N = i),
                (t.width = Math.floor(e * i)),
                (t.height = Math.floor(n * i)),
                this.setViewport(0, 0, e, n);
            }),
            (this.getCurrentViewport = function (e) {
              return e.copy(T);
            }),
            (this.getViewport = function (e) {
              return e.copy(I);
            }),
            (this.setViewport = function (e, t, n, i) {
              e.isVector4 ? I.set(e.x, e.y, e.z, e.w) : I.set(e, t, n, i),
                K.viewport(T.copy(I).multiplyScalar(N).round());
            }),
            (this.getScissor = function (e) {
              return e.copy(O);
            }),
            (this.setScissor = function (e, t, n, i) {
              e.isVector4 ? O.set(e.x, e.y, e.z, e.w) : O.set(e, t, n, i),
                K.scissor(w.copy(O).multiplyScalar(N).round());
            }),
            (this.getScissorTest = function () {
              return k;
            }),
            (this.setScissorTest = function (e) {
              K.setScissorTest((k = e));
            }),
            (this.setOpaqueSort = function (e) {
              D = e;
            }),
            (this.setTransparentSort = function (e) {
              U = e;
            }),
            (this.getClearColor = function (e) {
              return e.copy(ue.getClearColor());
            }),
            (this.setClearColor = function () {
              ue.setClearColor.apply(ue, arguments);
            }),
            (this.getClearAlpha = function () {
              return ue.getClearAlpha();
            }),
            (this.setClearAlpha = function () {
              ue.setClearAlpha.apply(ue, arguments);
            }),
            (this.clear = function () {
              let e =
                !(arguments.length > 1 && void 0 !== arguments[1]) ||
                arguments[1],
                t =
                  !(arguments.length > 2 && void 0 !== arguments[2]) ||
                  arguments[2],
                n = 0;
              if (
                !(arguments.length > 0 && void 0 !== arguments[0]) ||
                arguments[0]
              ) {
                let e = !1;
                if (null !== S) {
                  const t = S.texture.format;
                  e = 1033 === t || 1031 === t || 1029 === t;
                }
                if (e) {
                  const e = S.texture.type,
                    t =
                      e === _s ||
                      e === bs ||
                      e === ys ||
                      e === Ms ||
                      1017 === e ||
                      1018 === e,
                    n = ue.getClearColor(),
                    i = ue.getClearAlpha(),
                    r = n.r,
                    a = n.g,
                    o = n.b;
                  t
                    ? ((h[0] = r),
                      (h[1] = a),
                      (h[2] = o),
                      (h[3] = i),
                      ve.clearBufferuiv(ve.COLOR, 0, h))
                    : ((p[0] = r),
                      (p[1] = a),
                      (p[2] = o),
                      (p[3] = i),
                      ve.clearBufferiv(ve.COLOR, 0, p));
                } else n |= ve.COLOR_BUFFER_BIT;
              }
              e && (n |= ve.DEPTH_BUFFER_BIT),
                t &&
                ((n |= ve.STENCIL_BUFFER_BIT),
                  this.state.buffers.stencil.setMask(4294967295)),
                ve.clear(n);
            }),
            (this.clearColor = function () {
              this.clear(!0, !1, !1);
            }),
            (this.clearDepth = function () {
              this.clear(!1, !0, !1);
            }),
            (this.clearStencil = function () {
              this.clear(!1, !1, !0);
            }),
            (this.dispose = function () {
              t.removeEventListener("webglcontextlost", be, !1),
                t.removeEventListener("webglcontextrestored", Se, !1),
                t.removeEventListener("webglcontextcreationerror", Ee, !1),
                oe.dispose(),
                se.dispose(),
                J.dispose(),
                $.dispose(),
                ee.dispose(),
                ie.dispose(),
                me.dispose(),
                ge.dispose(),
                re.dispose(),
                xe.dispose(),
                xe.removeEventListener("sessionstart", Ae),
                xe.removeEventListener("sessionend", Re),
                V && (V.dispose(), (V = null)),
                Ce.stop();
            }),
            (this.renderBufferDirect = function (e, t, n, i, r, a) {
              null === t && (t = j);
              const o = r.isMesh && r.matrixWorld.determinant() < 0,
                s = (function (e, t, n, i, r) {
                  !0 !== t.isScene && (t = j);
                  Q.resetTextureUnits();
                  const a = t.fog,
                    o = i.isMeshStandardMaterial ? t.environment : null,
                    s =
                      null === S
                        ? _.outputColorSpace
                        : !0 === S.isXRRenderTarget
                          ? S.texture.colorSpace
                          : Vs,
                    l = (i.isMeshStandardMaterial ? ee : $).get(i.envMap || o),
                    c =
                      !0 === i.vertexColors &&
                      !!n.attributes.color &&
                      4 === n.attributes.color.itemSize,
                    u =
                      !!n.attributes.tangent &&
                      (!!i.normalMap || i.anisotropy > 0),
                    d = !!n.morphAttributes.position,
                    h = !!n.morphAttributes.normal,
                    p = !!n.morphAttributes.color;
                  let f = Zo;
                  i.toneMapped &&
                    ((null !== S && !0 !== S.isXRRenderTarget) ||
                      (f = _.toneMapping));
                  const g =
                    n.morphAttributes.position ||
                    n.morphAttributes.normal ||
                    n.morphAttributes.color,
                    v = void 0 !== g ? g.length : 0,
                    y = J.get(i),
                    x = m.state.lights;
                  if (!0 === z && (!0 === B || e !== M)) {
                    const t = e === M && i.id === E;
                    le.setState(i, e, t);
                  }
                  let b = !1;
                  i.version === y.__version
                    ? (y.needsLights &&
                      y.lightsStateVersion !== x.state.version) ||
                      y.outputColorSpace !== s ||
                      (r.isBatchedMesh && !1 === y.batching)
                      ? (b = !0)
                      : r.isBatchedMesh || !0 !== y.batching
                        ? r.isInstancedMesh && !1 === y.instancing
                          ? (b = !0)
                          : r.isInstancedMesh || !0 !== y.instancing
                            ? r.isSkinnedMesh && !1 === y.skinning
                              ? (b = !0)
                              : r.isSkinnedMesh || !0 !== y.skinning
                                ? (r.isInstancedMesh &&
                                  !0 === y.instancingColor &&
                                  null === r.instanceColor) ||
                                  (r.isInstancedMesh &&
                                    !1 === y.instancingColor &&
                                    null !== r.instanceColor) ||
                                  (r.isInstancedMesh &&
                                    !0 === y.instancingMorph &&
                                    null === r.morphTexture) ||
                                  (r.isInstancedMesh &&
                                    !1 === y.instancingMorph &&
                                    null !== r.morphTexture) ||
                                  y.envMap !== l ||
                                  (!0 === i.fog && y.fog !== a)
                                  ? (b = !0)
                                  : void 0 === y.numClippingPlanes ||
                                    (y.numClippingPlanes === le.numPlanes &&
                                      y.numIntersection === le.numIntersection)
                                    ? (y.vertexAlphas !== c ||
                                      y.vertexTangents !== u ||
                                      y.morphTargets !== d ||
                                      y.morphNormals !== h ||
                                      y.morphColors !== p ||
                                      y.toneMapping !== f ||
                                      (!0 === q.isWebGL2 &&
                                        y.morphTargetsCount !== v)) &&
                                    (b = !0)
                                    : (b = !0)
                                : (b = !0)
                            : (b = !0)
                        : (b = !0)
                    : ((b = !0), (y.__version = i.version));
                  let T = y.currentProgram;
                  !0 === b && (T = Ue(i, t, r));
                  let w = !1,
                    A = !1,
                    R = !1;
                  const C = T.getUniforms(),
                    P = y.uniforms;
                  K.useProgram(T.program) && ((w = !0), (A = !0), (R = !0));
                  i.id !== E && ((E = i.id), (A = !0));
                  if (w || M !== e) {
                    C.setValue(ve, "projectionMatrix", e.projectionMatrix),
                      C.setValue(ve, "viewMatrix", e.matrixWorldInverse);
                    const t = C.map.cameraPosition;
                    void 0 !== t &&
                      t.setValue(ve, W.setFromMatrixPosition(e.matrixWorld)),
                      q.logarithmicDepthBuffer &&
                      C.setValue(
                        ve,
                        "logDepthBufFC",
                        2 / (Math.log(e.far + 1) / Math.LN2)
                      ),
                      (i.isMeshPhongMaterial ||
                        i.isMeshToonMaterial ||
                        i.isMeshLambertMaterial ||
                        i.isMeshBasicMaterial ||
                        i.isMeshStandardMaterial ||
                        i.isShaderMaterial) &&
                      C.setValue(
                        ve,
                        "isOrthographic",
                        !0 === e.isOrthographicCamera
                      ),
                      M !== e && ((M = e), (A = !0), (R = !0));
                  }
                  if (r.isSkinnedMesh) {
                    C.setOptional(ve, r, "bindMatrix"),
                      C.setOptional(ve, r, "bindMatrixInverse");
                    const e = r.skeleton;
                    e &&
                      (q.floatVertexTextures
                        ? (null === e.boneTexture && e.computeBoneTexture(),
                          C.setValue(ve, "boneTexture", e.boneTexture, Q))
                        : console.warn(
                          "THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."
                        ));
                  }
                  r.isBatchedMesh &&
                    (C.setOptional(ve, r, "batchingTexture"),
                      C.setValue(ve, "batchingTexture", r._matricesTexture, Q));
                  const D = n.morphAttributes;
                  (void 0 !== D.position ||
                    void 0 !== D.normal ||
                    (void 0 !== D.color && !0 === q.isWebGL2)) &&
                    de.update(r, n, T);
                  (A || y.receiveShadow !== r.receiveShadow) &&
                    ((y.receiveShadow = r.receiveShadow),
                      C.setValue(ve, "receiveShadow", r.receiveShadow));
                  i.isMeshGouraudMaterial &&
                    null !== i.envMap &&
                    ((P.envMap.value = l),
                      (P.flipEnvMap.value =
                        l.isCubeTexture && !1 === l.isRenderTargetTexture
                          ? -1
                          : 1));
                  A &&
                    (C.setValue(
                      ve,
                      "toneMappingExposure",
                      _.toneMappingExposure
                    ),
                      y.needsLights &&
                      ((I = R),
                        ((U = P).ambientLightColor.needsUpdate = I),
                        (U.lightProbe.needsUpdate = I),
                        (U.directionalLights.needsUpdate = I),
                        (U.directionalLightShadows.needsUpdate = I),
                        (U.pointLights.needsUpdate = I),
                        (U.pointLightShadows.needsUpdate = I),
                        (U.spotLights.needsUpdate = I),
                        (U.spotLightShadows.needsUpdate = I),
                        (U.rectAreaLights.needsUpdate = I),
                        (U.hemisphereLights.needsUpdate = I)),
                      a && !0 === i.fog && ae.refreshFogUniforms(P, a),
                      ae.refreshMaterialUniforms(P, i, N, L, V),
                      np.upload(ve, Ie(y), P, Q));
                  var U, I;
                  i.isShaderMaterial &&
                    !0 === i.uniformsNeedUpdate &&
                    (np.upload(ve, Ie(y), P, Q), (i.uniformsNeedUpdate = !1));
                  i.isSpriteMaterial && C.setValue(ve, "center", r.center);
                  if (
                    (C.setValue(ve, "modelViewMatrix", r.modelViewMatrix),
                      C.setValue(ve, "normalMatrix", r.normalMatrix),
                      C.setValue(ve, "modelMatrix", r.matrixWorld),
                      i.isShaderMaterial || i.isRawShaderMaterial)
                  ) {
                    const e = i.uniformsGroups;
                    for (let t = 0, n = e.length; t < n; t++)
                      if (q.isWebGL2) {
                        const n = e[t];
                        ge.update(n, T), ge.bind(n, T);
                      } else
                        console.warn(
                          "THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2."
                        );
                  }
                  return T;
                })(e, t, n, i, r);
              K.setMaterial(i, o);
              let l = n.index,
                c = 1;
              if (!0 === i.wireframe) {
                if (((l = ne.getWireframeAttribute(n)), void 0 === l)) return;
                c = 2;
              }
              const u = n.drawRange,
                d = n.attributes.position;
              let h = u.start * c,
                p = (u.start + u.count) * c;
              null !== a &&
                ((h = Math.max(h, a.start * c)),
                  (p = Math.min(p, (a.start + a.count) * c))),
                null !== l
                  ? ((h = Math.max(h, 0)), (p = Math.min(p, l.count)))
                  : void 0 !== d &&
                  null !== d &&
                  ((h = Math.max(h, 0)), (p = Math.min(p, d.count)));
              const f = p - h;
              if (f < 0 || f === 1 / 0) return;
              let g;
              me.setup(r, i, s, n, l);
              let v = he;
              if (
                (null !== l && ((g = te.get(l)), (v = pe), v.setIndex(g)),
                  r.isMesh)
              )
                !0 === i.wireframe
                  ? (K.setLineWidth(i.wireframeLinewidth * X()),
                    v.setMode(ve.LINES))
                  : v.setMode(ve.TRIANGLES);
              else if (r.isLine) {
                let e = i.linewidth;
                void 0 === e && (e = 1),
                  K.setLineWidth(e * X()),
                  r.isLineSegments
                    ? v.setMode(ve.LINES)
                    : r.isLineLoop
                      ? v.setMode(ve.LINE_LOOP)
                      : v.setMode(ve.LINE_STRIP);
              } else
                r.isPoints
                  ? v.setMode(ve.POINTS)
                  : r.isSprite && v.setMode(ve.TRIANGLES);
              if (r.isBatchedMesh)
                v.renderMultiDraw(
                  r._multiDrawStarts,
                  r._multiDrawCounts,
                  r._multiDrawCount
                );
              else if (r.isInstancedMesh) v.renderInstances(h, f, r.count);
              else if (n.isInstancedBufferGeometry) {
                const e =
                  void 0 !== n._maxInstanceCount
                    ? n._maxInstanceCount
                    : 1 / 0,
                  t = Math.min(n.instanceCount, e);
                v.renderInstances(h, f, t);
              } else v.render(h, f);
            }),
            (this.compile = function (e, t) {
              let n =
                arguments.length > 2 && void 0 !== arguments[2]
                  ? arguments[2]
                  : null;
              null === n && (n = e),
                (m = se.get(n)),
                m.init(),
                v.push(m),
                n.traverseVisible(function (e) {
                  e.isLight &&
                    e.layers.test(t.layers) &&
                    (m.pushLight(e), e.castShadow && m.pushShadow(e));
                }),
                e !== n &&
                e.traverseVisible(function (e) {
                  e.isLight &&
                    e.layers.test(t.layers) &&
                    (m.pushLight(e), e.castShadow && m.pushShadow(e));
                }),
                m.setupLights(_._useLegacyLights);
              const i = new Set();
              return (
                e.traverse(function (e) {
                  const t = e.material;
                  if (t)
                    if (Array.isArray(t))
                      for (let r = 0; r < t.length; r++) {
                        const a = t[r];
                        Te(a, n, e), i.add(a);
                      }
                    else Te(t, n, e), i.add(t);
                }),
                v.pop(),
                (m = null),
                i
              );
            }),
            (this.compileAsync = function (e, t) {
              let n =
                arguments.length > 2 && void 0 !== arguments[2]
                  ? arguments[2]
                  : null;
              const i = this.compile(e, t, n);
              return new Promise((t) => {
                function n() {
                  i.forEach(function (e) {
                    J.get(e).currentProgram.isReady() && i.delete(e);
                  }),
                    0 !== i.size ? setTimeout(n, 10) : t(e);
                }
                null !== Y.get("KHR_parallel_shader_compile")
                  ? n()
                  : setTimeout(n, 10);
              });
            });
          let we = null;
          function Ae() {
            Ce.stop();
          }
          function Re() {
            Ce.start();
          }
          const Ce = new dd();
          function Pe(e, t, n, i) {
            if (!1 === e.visible) return;
            if (e.layers.test(t.layers))
              if (e.isGroup) n = e.renderOrder;
              else if (e.isLOD) !0 === e.autoUpdate && e.update(t);
              else if (e.isLight)
                m.pushLight(e), e.castShadow && m.pushShadow(e);
              else if (e.isSprite) {
                if (!e.frustumCulled || F.intersectsSprite(e)) {
                  i && W.setFromMatrixPosition(e.matrixWorld).applyMatrix4(H);
                  const t = ie.update(e),
                    r = e.material;
                  r.visible && f.push(e, t, r, n, W.z, null);
                }
              } else if (
                (e.isMesh || e.isLine || e.isPoints) &&
                (!e.frustumCulled || F.intersectsObject(e))
              ) {
                const t = ie.update(e),
                  r = e.material;
                if (
                  (i &&
                    (void 0 !== e.boundingSphere
                      ? (null === e.boundingSphere && e.computeBoundingSphere(),
                        W.copy(e.boundingSphere.center))
                      : (null === t.boundingSphere && t.computeBoundingSphere(),
                        W.copy(t.boundingSphere.center)),
                      W.applyMatrix4(e.matrixWorld).applyMatrix4(H)),
                    Array.isArray(r))
                ) {
                  const i = t.groups;
                  for (let a = 0, o = i.length; a < o; a++) {
                    const o = i[a],
                      s = r[o.materialIndex];
                    s && s.visible && f.push(e, t, s, n, W.z, o);
                  }
                } else r.visible && f.push(e, t, r, n, W.z, null);
              }
            const r = e.children;
            for (let a = 0, o = r.length; a < o; a++) Pe(r[a], t, n, i);
          }
          function Le(e, t, n, i) {
            const r = e.opaque,
              a = e.transmissive,
              o = e.transparent;
            m.setupLightsView(n),
              !0 === z && le.setGlobalState(_.clippingPlanes, n),
              a.length > 0 &&
              (function (e, t, n, i) {
                const r = !0 === n.isScene ? n.overrideMaterial : null;
                if (null !== r) return;
                const a = q.isWebGL2;
                null === V &&
                  (V = new Ol(1, 1, {
                    generateMipmaps: !0,
                    type: Y.has("EXT_color_buffer_half_float") ? Es : _s,
                    minFilter: vs,
                    samples: a ? 4 : 0,
                  }));
                _.getDrawingBufferSize(G),
                  a ? V.setSize(G.x, G.y) : V.setSize(cl(G.x), cl(G.y));
                const o = _.getRenderTarget();
                _.setRenderTarget(V),
                  _.getClearColor(R),
                  (C = _.getClearAlpha()),
                  C < 1 && _.setClearColor(16777215, 0.5);
                _.clear();
                const s = _.toneMapping;
                (_.toneMapping = Zo),
                  Ne(e, n, i),
                  Q.updateMultisampleRenderTarget(V),
                  Q.updateRenderTargetMipmap(V);
                let l = !1;
                for (let c = 0, u = t.length; c < u; c++) {
                  const e = t[c],
                    r = e.object,
                    a = e.geometry,
                    o = e.material,
                    s = e.group;
                  if (2 === o.side && r.layers.test(i.layers)) {
                    const e = o.side;
                    (o.side = jo),
                      (o.needsUpdate = !0),
                      De(r, n, i, a, o, s),
                      (o.side = e),
                      (o.needsUpdate = !0),
                      (l = !0);
                  }
                }
                !0 === l &&
                  (Q.updateMultisampleRenderTarget(V),
                    Q.updateRenderTargetMipmap(V));
                _.setRenderTarget(o),
                  _.setClearColor(R, C),
                  (_.toneMapping = s);
              })(r, a, t, n),
              i && K.viewport(T.copy(i)),
              r.length > 0 && Ne(r, t, n),
              a.length > 0 && Ne(a, t, n),
              o.length > 0 && Ne(o, t, n),
              K.buffers.depth.setTest(!0),
              K.buffers.depth.setMask(!0),
              K.buffers.color.setMask(!0),
              K.setPolygonOffset(!1);
          }
          function Ne(e, t, n) {
            const i = !0 === t.isScene ? t.overrideMaterial : null;
            for (let r = 0, a = e.length; r < a; r++) {
              const a = e[r],
                o = a.object,
                s = a.geometry,
                l = null === i ? a.material : i,
                c = a.group;
              o.layers.test(n.layers) && De(o, t, n, s, l, c);
            }
          }
          function De(e, t, n, i, r, a) {
            e.onBeforeRender(_, t, n, i, r, a),
              e.modelViewMatrix.multiplyMatrices(
                n.matrixWorldInverse,
                e.matrixWorld
              ),
              e.normalMatrix.getNormalMatrix(e.modelViewMatrix),
              r.onBeforeRender(_, t, n, i, e, a),
              !0 === r.transparent && 2 === r.side && !1 === r.forceSinglePass
                ? ((r.side = jo),
                  (r.needsUpdate = !0),
                  _.renderBufferDirect(n, t, i, r, e, a),
                  (r.side = Wo),
                  (r.needsUpdate = !0),
                  _.renderBufferDirect(n, t, i, r, e, a),
                  (r.side = 2))
                : _.renderBufferDirect(n, t, i, r, e, a),
              e.onAfterRender(_, t, n, i, r, a);
          }
          function Ue(e, t, n) {
            !0 !== t.isScene && (t = j);
            const i = J.get(e),
              r = m.state.lights,
              a = m.state.shadowsArray,
              o = r.state.version,
              s = re.getParameters(e, r.state, a, t, n),
              l = re.getProgramCacheKey(s);
            let c = i.programs;
            (i.environment = e.isMeshStandardMaterial ? t.environment : null),
              (i.fog = t.fog),
              (i.envMap = (e.isMeshStandardMaterial ? ee : $).get(
                e.envMap || i.environment
              )),
              (i.envMapRotation =
                null !== i.environment && null === e.envMap
                  ? t.environmentRotation
                  : e.envMapRotation),
              void 0 === c &&
              (e.addEventListener("dispose", Me),
                (c = new Map()),
                (i.programs = c));
            let u = c.get(l);
            if (void 0 !== u) {
              if (i.currentProgram === u && i.lightsStateVersion === o)
                return Oe(e, s), u;
            } else
              (s.uniforms = re.getUniforms(e)),
                e.onBuild(n, s, _),
                e.onBeforeCompile(s, _),
                (u = re.acquireProgram(s, l)),
                c.set(l, u),
                (i.uniforms = s.uniforms);
            const d = i.uniforms;
            return (
              ((e.isShaderMaterial || e.isRawShaderMaterial) &&
                !0 !== e.clipping) ||
              (d.clippingPlanes = le.uniform),
              Oe(e, s),
              (i.needsLights = (function (e) {
                return (
                  e.isMeshLambertMaterial ||
                  e.isMeshToonMaterial ||
                  e.isMeshPhongMaterial ||
                  e.isMeshStandardMaterial ||
                  e.isShadowMaterial ||
                  (e.isShaderMaterial && !0 === e.lights)
                );
              })(e)),
              (i.lightsStateVersion = o),
              i.needsLights &&
              ((d.ambientLightColor.value = r.state.ambient),
                (d.lightProbe.value = r.state.probe),
                (d.directionalLights.value = r.state.directional),
                (d.directionalLightShadows.value = r.state.directionalShadow),
                (d.spotLights.value = r.state.spot),
                (d.spotLightShadows.value = r.state.spotShadow),
                (d.rectAreaLights.value = r.state.rectArea),
                (d.ltc_1.value = r.state.rectAreaLTC1),
                (d.ltc_2.value = r.state.rectAreaLTC2),
                (d.pointLights.value = r.state.point),
                (d.pointLightShadows.value = r.state.pointShadow),
                (d.hemisphereLights.value = r.state.hemi),
                (d.directionalShadowMap.value = r.state.directionalShadowMap),
                (d.directionalShadowMatrix.value =
                  r.state.directionalShadowMatrix),
                (d.spotShadowMap.value = r.state.spotShadowMap),
                (d.spotLightMatrix.value = r.state.spotLightMatrix),
                (d.spotLightMap.value = r.state.spotLightMap),
                (d.pointShadowMap.value = r.state.pointShadowMap),
                (d.pointShadowMatrix.value = r.state.pointShadowMatrix)),
              (i.currentProgram = u),
              (i.uniformsList = null),
              u
            );
          }
          function Ie(e) {
            if (null === e.uniformsList) {
              const t = e.currentProgram.getUniforms();
              e.uniformsList = np.seqWithValue(t.seq, e.uniforms);
            }
            return e.uniformsList;
          }
          function Oe(e, t) {
            const n = J.get(e);
            (n.outputColorSpace = t.outputColorSpace),
              (n.batching = t.batching),
              (n.instancing = t.instancing),
              (n.instancingColor = t.instancingColor),
              (n.instancingMorph = t.instancingMorph),
              (n.skinning = t.skinning),
              (n.morphTargets = t.morphTargets),
              (n.morphNormals = t.morphNormals),
              (n.morphColors = t.morphColors),
              (n.morphTargetsCount = t.morphTargetsCount),
              (n.numClippingPlanes = t.numClippingPlanes),
              (n.numIntersection = t.numClipIntersection),
              (n.vertexAlphas = t.vertexAlphas),
              (n.vertexTangents = t.vertexTangents),
              (n.toneMapping = t.toneMapping);
          }
          Ce.setAnimationLoop(function (e) {
            we && we(e);
          }),
            "undefined" !== typeof self && Ce.setContext(self),
            (this.setAnimationLoop = function (e) {
              (we = e),
                xe.setAnimationLoop(e),
                null === e ? Ce.stop() : Ce.start();
            }),
            xe.addEventListener("sessionstart", Ae),
            xe.addEventListener("sessionend", Re),
            (this.render = function (e, t) {
              if (void 0 !== t && !0 !== t.isCamera)
                return void console.error(
                  "THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera."
                );
              if (!0 === y) return;
              !0 === e.matrixWorldAutoUpdate && e.updateMatrixWorld(),
                null === t.parent &&
                !0 === t.matrixWorldAutoUpdate &&
                t.updateMatrixWorld(),
                !0 === xe.enabled &&
                !0 === xe.isPresenting &&
                (!0 === xe.cameraAutoUpdate && xe.updateCamera(t),
                  (t = xe.getCamera())),
                !0 === e.isScene && e.onBeforeRender(_, e, t, S),
                (m = se.get(e, v.length)),
                m.init(),
                v.push(m),
                H.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse),
                F.setFromProjectionMatrix(H),
                (B = this.localClippingEnabled),
                (z = le.init(this.clippingPlanes, B)),
                (f = oe.get(e, g.length)),
                f.init(),
                g.push(f),
                Pe(e, t, 0, _.sortObjects),
                f.finish(),
                !0 === _.sortObjects && f.sort(D, U),
                this.info.render.frame++,
                !0 === z && le.beginShadows();
              const n = m.state.shadowsArray;
              if (
                (ce.render(n, e, t),
                  !0 === z && le.endShadows(),
                  !0 === this.info.autoReset && this.info.reset(),
                  (!1 !== xe.enabled &&
                    !1 !== xe.isPresenting &&
                    !1 !== xe.hasDepthSensing()) ||
                  ue.render(f, e),
                  m.setupLights(_._useLegacyLights),
                  t.isArrayCamera)
              ) {
                const n = t.cameras;
                for (let t = 0, i = n.length; t < i; t++) {
                  const i = n[t];
                  Le(f, e, i, i.viewport);
                }
              } else Le(f, e, t);
              null !== S &&
                (Q.updateMultisampleRenderTarget(S),
                  Q.updateRenderTargetMipmap(S)),
                !0 === e.isScene && e.onAfterRender(_, e, t),
                me.resetDefaultState(),
                (E = -1),
                (M = null),
                v.pop(),
                (m = v.length > 0 ? v[v.length - 1] : null),
                g.pop(),
                (f = g.length > 0 ? g[g.length - 1] : null);
            }),
            (this.getActiveCubeFace = function () {
              return x;
            }),
            (this.getActiveMipmapLevel = function () {
              return b;
            }),
            (this.getRenderTarget = function () {
              return S;
            }),
            (this.setRenderTargetTextures = function (e, t, n) {
              (J.get(e.texture).__webglTexture = t),
                (J.get(e.depthTexture).__webglTexture = n);
              const i = J.get(e);
              (i.__hasExternalTextures = !0),
                (i.__autoAllocateDepthBuffer = void 0 === n),
                i.__autoAllocateDepthBuffer ||
                (!0 === Y.has("WEBGL_multisampled_render_to_texture") &&
                  (console.warn(
                    "THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"
                  ),
                    (i.__useRenderToTexture = !1)));
            }),
            (this.setRenderTargetFramebuffer = function (e, t) {
              const n = J.get(e);
              (n.__webglFramebuffer = t),
                (n.__useDefaultFramebuffer = void 0 === t);
            }),
            (this.setRenderTarget = function (e) {
              let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : 0,
                n =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : 0;
              (S = e), (x = t), (b = n);
              let i = !0,
                r = null,
                a = !1,
                o = !1;
              if (e) {
                const s = J.get(e);
                void 0 !== s.__useDefaultFramebuffer
                  ? (K.bindFramebuffer(ve.FRAMEBUFFER, null), (i = !1))
                  : void 0 === s.__webglFramebuffer
                    ? Q.setupRenderTarget(e)
                    : s.__hasExternalTextures &&
                    Q.rebindTextures(
                      e,
                      J.get(e.texture).__webglTexture,
                      J.get(e.depthTexture).__webglTexture
                    );
                const l = e.texture;
                (l.isData3DTexture ||
                  l.isDataArrayTexture ||
                  l.isCompressedArrayTexture) &&
                  (o = !0);
                const c = J.get(e).__webglFramebuffer;
                e.isWebGLCubeRenderTarget
                  ? ((r = Array.isArray(c[t]) ? c[t][n] : c[t]), (a = !0))
                  : (r =
                    q.isWebGL2 &&
                      e.samples > 0 &&
                      !1 === Q.useMultisampledRTT(e)
                      ? J.get(e).__webglMultisampledFramebuffer
                      : Array.isArray(c)
                        ? c[n]
                        : c),
                  T.copy(e.viewport),
                  w.copy(e.scissor),
                  (A = e.scissorTest);
              } else
                T.copy(I).multiplyScalar(N).floor(),
                  w.copy(O).multiplyScalar(N).floor(),
                  (A = k);
              if (
                (K.bindFramebuffer(ve.FRAMEBUFFER, r) &&
                  q.drawBuffers &&
                  i &&
                  K.drawBuffers(e, r),
                  K.viewport(T),
                  K.scissor(w),
                  K.setScissorTest(A),
                  a)
              ) {
                const i = J.get(e.texture);
                ve.framebufferTexture2D(
                  ve.FRAMEBUFFER,
                  ve.COLOR_ATTACHMENT0,
                  ve.TEXTURE_CUBE_MAP_POSITIVE_X + t,
                  i.__webglTexture,
                  n
                );
              } else if (o) {
                const i = J.get(e.texture),
                  r = t || 0;
                ve.framebufferTextureLayer(
                  ve.FRAMEBUFFER,
                  ve.COLOR_ATTACHMENT0,
                  i.__webglTexture,
                  n || 0,
                  r
                );
              }
              E = -1;
            }),
            (this.readRenderTargetPixels = function (e, t, n, i, r, a, o) {
              if (!e || !e.isWebGLRenderTarget)
                return void console.error(
                  "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget."
                );
              let s = J.get(e).__webglFramebuffer;
              if (
                (e.isWebGLCubeRenderTarget && void 0 !== o && (s = s[o]), s)
              ) {
                K.bindFramebuffer(ve.FRAMEBUFFER, s);
                try {
                  const o = e.texture,
                    s = o.format,
                    l = o.type;
                  if (
                    s !== Ts &&
                    fe.convert(s) !==
                    ve.getParameter(ve.IMPLEMENTATION_COLOR_READ_FORMAT)
                  )
                    return void console.error(
                      "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."
                    );
                  const c =
                    l === Es &&
                    (Y.has("EXT_color_buffer_half_float") ||
                      (q.isWebGL2 && Y.has("EXT_color_buffer_float")));
                  if (
                    l !== _s &&
                    fe.convert(l) !==
                    ve.getParameter(ve.IMPLEMENTATION_COLOR_READ_TYPE) &&
                    (l !== Ss ||
                      !(
                        q.isWebGL2 ||
                        Y.has("OES_texture_float") ||
                        Y.has("WEBGL_color_buffer_float")
                      )) &&
                    !c
                  )
                    return void console.error(
                      "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type."
                    );
                  t >= 0 &&
                    t <= e.width - i &&
                    n >= 0 &&
                    n <= e.height - r &&
                    ve.readPixels(t, n, i, r, fe.convert(s), fe.convert(l), a);
                } finally {
                  const e = null !== S ? J.get(S).__webglFramebuffer : null;
                  K.bindFramebuffer(ve.FRAMEBUFFER, e);
                }
              }
            }),
            (this.copyFramebufferToTexture = function (e, t) {
              let n =
                arguments.length > 2 && void 0 !== arguments[2]
                  ? arguments[2]
                  : 0;
              const i = Math.pow(2, -n),
                r = Math.floor(t.image.width * i),
                a = Math.floor(t.image.height * i);
              Q.setTexture2D(t, 0),
                ve.copyTexSubImage2D(ve.TEXTURE_2D, n, 0, 0, e.x, e.y, r, a),
                K.unbindTexture();
            }),
            (this.copyTextureToTexture = function (e, t, n) {
              let i =
                arguments.length > 3 && void 0 !== arguments[3]
                  ? arguments[3]
                  : 0;
              const r = t.image.width,
                a = t.image.height,
                o = fe.convert(n.format),
                s = fe.convert(n.type);
              Q.setTexture2D(n, 0),
                ve.pixelStorei(ve.UNPACK_FLIP_Y_WEBGL, n.flipY),
                ve.pixelStorei(
                  ve.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                  n.premultiplyAlpha
                ),
                ve.pixelStorei(ve.UNPACK_ALIGNMENT, n.unpackAlignment),
                t.isDataTexture
                  ? ve.texSubImage2D(
                    ve.TEXTURE_2D,
                    i,
                    e.x,
                    e.y,
                    r,
                    a,
                    o,
                    s,
                    t.image.data
                  )
                  : t.isCompressedTexture
                    ? ve.compressedTexSubImage2D(
                      ve.TEXTURE_2D,
                      i,
                      e.x,
                      e.y,
                      t.mipmaps[0].width,
                      t.mipmaps[0].height,
                      o,
                      t.mipmaps[0].data
                    )
                    : ve.texSubImage2D(ve.TEXTURE_2D, i, e.x, e.y, o, s, t.image),
                0 === i &&
                n.generateMipmaps &&
                ve.generateMipmap(ve.TEXTURE_2D),
                K.unbindTexture();
            }),
            (this.copyTextureToTexture3D = function (e, t, n, i) {
              let r =
                arguments.length > 4 && void 0 !== arguments[4]
                  ? arguments[4]
                  : 0;
              if (_.isWebGL1Renderer)
                return void console.warn(
                  "THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2."
                );
              const a = Math.round(e.max.x - e.min.x),
                o = Math.round(e.max.y - e.min.y),
                s = e.max.z - e.min.z + 1,
                l = fe.convert(i.format),
                c = fe.convert(i.type);
              let u;
              if (i.isData3DTexture) Q.setTexture3D(i, 0), (u = ve.TEXTURE_3D);
              else {
                if (!i.isDataArrayTexture && !i.isCompressedArrayTexture)
                  return void console.warn(
                    "THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray."
                  );
                Q.setTexture2DArray(i, 0), (u = ve.TEXTURE_2D_ARRAY);
              }
              ve.pixelStorei(ve.UNPACK_FLIP_Y_WEBGL, i.flipY),
                ve.pixelStorei(
                  ve.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                  i.premultiplyAlpha
                ),
                ve.pixelStorei(ve.UNPACK_ALIGNMENT, i.unpackAlignment);
              const d = ve.getParameter(ve.UNPACK_ROW_LENGTH),
                h = ve.getParameter(ve.UNPACK_IMAGE_HEIGHT),
                p = ve.getParameter(ve.UNPACK_SKIP_PIXELS),
                f = ve.getParameter(ve.UNPACK_SKIP_ROWS),
                m = ve.getParameter(ve.UNPACK_SKIP_IMAGES),
                g = n.isCompressedTexture ? n.mipmaps[r] : n.image;
              ve.pixelStorei(ve.UNPACK_ROW_LENGTH, g.width),
                ve.pixelStorei(ve.UNPACK_IMAGE_HEIGHT, g.height),
                ve.pixelStorei(ve.UNPACK_SKIP_PIXELS, e.min.x),
                ve.pixelStorei(ve.UNPACK_SKIP_ROWS, e.min.y),
                ve.pixelStorei(ve.UNPACK_SKIP_IMAGES, e.min.z),
                n.isDataTexture || n.isData3DTexture
                  ? ve.texSubImage3D(u, r, t.x, t.y, t.z, a, o, s, l, c, g.data)
                  : i.isCompressedArrayTexture
                    ? ve.compressedTexSubImage3D(
                      u,
                      r,
                      t.x,
                      t.y,
                      t.z,
                      a,
                      o,
                      s,
                      l,
                      g.data
                    )
                    : ve.texSubImage3D(u, r, t.x, t.y, t.z, a, o, s, l, c, g),
                ve.pixelStorei(ve.UNPACK_ROW_LENGTH, d),
                ve.pixelStorei(ve.UNPACK_IMAGE_HEIGHT, h),
                ve.pixelStorei(ve.UNPACK_SKIP_PIXELS, p),
                ve.pixelStorei(ve.UNPACK_SKIP_ROWS, f),
                ve.pixelStorei(ve.UNPACK_SKIP_IMAGES, m),
                0 === r && i.generateMipmaps && ve.generateMipmap(u),
                K.unbindTexture();
            }),
            (this.initTexture = function (e) {
              e.isCubeTexture
                ? Q.setTextureCube(e, 0)
                : e.isData3DTexture
                  ? Q.setTexture3D(e, 0)
                  : e.isDataArrayTexture || e.isCompressedArrayTexture
                    ? Q.setTexture2DArray(e, 0)
                    : Q.setTexture2D(e, 0),
                K.unbindTexture();
            }),
            (this.resetState = function () {
              (x = 0), (b = 0), (S = null), K.reset(), me.reset();
            }),
            "undefined" !== typeof __THREE_DEVTOOLS__ &&
            __THREE_DEVTOOLS__.dispatchEvent(
              new CustomEvent("observe", { detail: this })
            );
        }
        get coordinateSystem() {
          return Qs;
        }
        get outputColorSpace() {
          return this._outputColorSpace;
        }
        set outputColorSpace(e) {
          this._outputColorSpace = e;
          const t = this.getContext();
          (t.drawingBufferColorSpace = e === Hs ? "display-p3" : "srgb"),
            (t.unpackColorSpace =
              Ml.workingColorSpace === Gs ? "display-p3" : "srgb");
        }
        get useLegacyLights() {
          return (
            console.warn(
              "THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."
            ),
            this._useLegacyLights
          );
        }
        set useLegacyLights(e) {
          console.warn(
            "THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."
          ),
            (this._useLegacyLights = e);
        }
      }
      (class extends Qp { }.prototype.isWebGL1Renderer = !0);
      class $p extends Gc {
        constructor() {
          super(),
            (this.isScene = !0),
            (this.type = "Scene"),
            (this.background = null),
            (this.environment = null),
            (this.fog = null),
            (this.backgroundBlurriness = 0),
            (this.backgroundIntensity = 1),
            (this.backgroundRotation = new wc()),
            (this.environmentRotation = new wc()),
            (this.overrideMaterial = null),
            "undefined" !== typeof __THREE_DEVTOOLS__ &&
            __THREE_DEVTOOLS__.dispatchEvent(
              new CustomEvent("observe", { detail: this })
            );
        }
        copy(e, t) {
          return (
            super.copy(e, t),
            null !== e.background && (this.background = e.background.clone()),
            null !== e.environment &&
            (this.environment = e.environment.clone()),
            null !== e.fog && (this.fog = e.fog.clone()),
            (this.backgroundBlurriness = e.backgroundBlurriness),
            (this.backgroundIntensity = e.backgroundIntensity),
            this.backgroundRotation.copy(e.backgroundRotation),
            this.environmentRotation.copy(e.environmentRotation),
            null !== e.overrideMaterial &&
            (this.overrideMaterial = e.overrideMaterial.clone()),
            (this.matrixAutoUpdate = e.matrixAutoUpdate),
            this
          );
        }
        toJSON(e) {
          const t = super.toJSON(e);
          return (
            null !== this.fog && (t.object.fog = this.fog.toJSON()),
            this.backgroundBlurriness > 0 &&
            (t.object.backgroundBlurriness = this.backgroundBlurriness),
            1 !== this.backgroundIntensity &&
            (t.object.backgroundIntensity = this.backgroundIntensity),
            (t.object.backgroundRotation = this.backgroundRotation.toArray()),
            (t.object.environmentRotation = this.environmentRotation.toArray()),
            t
          );
        }
      }
      class ef extends Eu {
        constructor() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 1,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 32,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 16,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : 0,
            r =
              arguments.length > 4 && void 0 !== arguments[4]
                ? arguments[4]
                : 2 * Math.PI,
            a =
              arguments.length > 5 && void 0 !== arguments[5]
                ? arguments[5]
                : 0,
            o =
              arguments.length > 6 && void 0 !== arguments[6]
                ? arguments[6]
                : Math.PI;
          super(),
            (this.type = "SphereGeometry"),
            (this.parameters = {
              radius: e,
              widthSegments: t,
              heightSegments: n,
              phiStart: i,
              phiLength: r,
              thetaStart: a,
              thetaLength: o,
            }),
            (t = Math.max(3, Math.floor(t))),
            (n = Math.max(2, Math.floor(n)));
          const s = Math.min(a + o, Math.PI);
          let l = 0;
          const c = [],
            u = new Bl(),
            d = new Bl(),
            h = [],
            p = [],
            f = [],
            m = [];
          for (let g = 0; g <= n; g++) {
            const h = [],
              v = g / n;
            let _ = 0;
            0 === g && 0 === a
              ? (_ = 0.5 / t)
              : g === n && s === Math.PI && (_ = -0.5 / t);
            for (let n = 0; n <= t; n++) {
              const s = n / t;
              (u.x = -e * Math.cos(i + s * r) * Math.sin(a + v * o)),
                (u.y = e * Math.cos(a + v * o)),
                (u.z = e * Math.sin(i + s * r) * Math.sin(a + v * o)),
                p.push(u.x, u.y, u.z),
                d.copy(u).normalize(),
                f.push(d.x, d.y, d.z),
                m.push(s + _, 1 - v),
                h.push(l++);
            }
            c.push(h);
          }
          for (let g = 0; g < n; g++)
            for (let e = 0; e < t; e++) {
              const t = c[g][e + 1],
                i = c[g][e],
                r = c[g + 1][e],
                o = c[g + 1][e + 1];
              (0 !== g || a > 0) && h.push(t, i, o),
                (g !== n - 1 || s < Math.PI) && h.push(i, r, o);
            }
          this.setIndex(h),
            this.setAttribute("position", new mu(p, 3)),
            this.setAttribute("normal", new mu(f, 3)),
            this.setAttribute("uv", new mu(m, 2));
        }
        copy(e) {
          return (
            super.copy(e),
            (this.parameters = Object.assign({}, e.parameters)),
            this
          );
        }
        static fromJSON(e) {
          return new ef(
            e.radius,
            e.widthSegments,
            e.heightSegments,
            e.phiStart,
            e.phiLength,
            e.thetaStart,
            e.thetaLength
          );
        }
      }
      function tf(e, t, n) {
        return !e || (!n && e.constructor === t)
          ? e
          : "number" === typeof t.BYTES_PER_ELEMENT
            ? new t(e)
            : Array.prototype.slice.call(e);
      }
      function nf(e) {
        return ArrayBuffer.isView(e) && !(e instanceof DataView);
      }
      class rf {
        constructor(e, t, n, i) {
          (this.parameterPositions = e),
            (this._cachedIndex = 0),
            (this.resultBuffer = void 0 !== i ? i : new t.constructor(n)),
            (this.sampleValues = t),
            (this.valueSize = n),
            (this.settings = null),
            (this.DefaultSettings_ = {});
        }
        evaluate(e) {
          const t = this.parameterPositions;
          let n = this._cachedIndex,
            i = t[n],
            r = t[n - 1];
          e: {
            t: {
              let a;
              n: {
                i: if (!(e < i)) {
                  for (let a = n + 2; ;) {
                    if (void 0 === i) {
                      if (e < r) break i;
                      return (
                        (n = t.length),
                        (this._cachedIndex = n),
                        this.copySampleValue_(n - 1)
                      );
                    }
                    if (n === a) break;
                    if (((r = i), (i = t[++n]), e < i)) break t;
                  }
                  a = t.length;
                  break n;
                }
                if (e >= r) break e;
                {
                  const o = t[1];
                  e < o && ((n = 2), (r = o));
                  for (let a = n - 2; ;) {
                    if (void 0 === r)
                      return (this._cachedIndex = 0), this.copySampleValue_(0);
                    if (n === a) break;
                    if (((i = r), (r = t[--n - 1]), e >= r)) break t;
                  }
                  (a = n), (n = 0);
                }
              }
              for (; n < a;) {
                const i = (n + a) >>> 1;
                e < t[i] ? (a = i) : (n = i + 1);
              }
              if (((i = t[n]), (r = t[n - 1]), void 0 === r))
                return (this._cachedIndex = 0), this.copySampleValue_(0);
              if (void 0 === i)
                return (
                  (n = t.length),
                  (this._cachedIndex = n),
                  this.copySampleValue_(n - 1)
                );
            }
            (this._cachedIndex = n), this.intervalChanged_(n, r, i);
          }
          return this.interpolate_(n, r, e, i);
        }
        getSettings_() {
          return this.settings || this.DefaultSettings_;
        }
        copySampleValue_(e) {
          const t = this.resultBuffer,
            n = this.sampleValues,
            i = this.valueSize,
            r = e * i;
          for (let a = 0; a !== i; ++a) t[a] = n[r + a];
          return t;
        }
        interpolate_() {
          throw new Error("call to abstract method");
        }
        intervalChanged_() { }
      }
      class af extends rf {
        constructor(e, t, n, i) {
          super(e, t, n, i),
            (this._weightPrev = -0),
            (this._offsetPrev = -0),
            (this._weightNext = -0),
            (this._offsetNext = -0),
            (this.DefaultSettings_ = { endingStart: Os, endingEnd: Os });
        }
        intervalChanged_(e, t, n) {
          const i = this.parameterPositions;
          let r = e - 2,
            a = e + 1,
            o = i[r],
            s = i[a];
          if (void 0 === o)
            switch (this.getSettings_().endingStart) {
              case ks:
                (r = e), (o = 2 * t - n);
                break;
              case Fs:
                (r = i.length - 2), (o = t + i[r] - i[r + 1]);
                break;
              default:
                (r = e), (o = n);
            }
          if (void 0 === s)
            switch (this.getSettings_().endingEnd) {
              case ks:
                (a = e), (s = 2 * n - t);
                break;
              case Fs:
                (a = 1), (s = n + i[1] - i[0]);
                break;
              default:
                (a = e - 1), (s = t);
            }
          const l = 0.5 * (n - t),
            c = this.valueSize;
          (this._weightPrev = l / (t - o)),
            (this._weightNext = l / (s - n)),
            (this._offsetPrev = r * c),
            (this._offsetNext = a * c);
        }
        interpolate_(e, t, n, i) {
          const r = this.resultBuffer,
            a = this.sampleValues,
            o = this.valueSize,
            s = e * o,
            l = s - o,
            c = this._offsetPrev,
            u = this._offsetNext,
            d = this._weightPrev,
            h = this._weightNext,
            p = (n - t) / (i - t),
            f = p * p,
            m = f * p,
            g = -d * m + 2 * d * f - d * p,
            v = (1 + d) * m + (-1.5 - 2 * d) * f + (-0.5 + d) * p + 1,
            _ = (-1 - h) * m + (1.5 + h) * f + 0.5 * p,
            y = h * m - h * f;
          for (let x = 0; x !== o; ++x)
            r[x] = g * a[c + x] + v * a[l + x] + _ * a[s + x] + y * a[u + x];
          return r;
        }
      }
      class of extends rf {
        constructor(e, t, n, i) {
          super(e, t, n, i);
        }
        interpolate_(e, t, n, i) {
          const r = this.resultBuffer,
            a = this.sampleValues,
            o = this.valueSize,
            s = e * o,
            l = s - o,
            c = (n - t) / (i - t),
            u = 1 - c;
          for (let d = 0; d !== o; ++d) r[d] = a[l + d] * u + a[s + d] * c;
          return r;
        }
      }
      class sf extends rf {
        constructor(e, t, n, i) {
          super(e, t, n, i);
        }
        interpolate_(e) {
          return this.copySampleValue_(e - 1);
        }
      }
      class lf {
        constructor(e, t, n, i) {
          if (void 0 === e)
            throw new Error("THREE.KeyframeTrack: track name is undefined");
          if (void 0 === t || 0 === t.length)
            throw new Error(
              "THREE.KeyframeTrack: no keyframes in track named " + e
            );
          (this.name = e),
            (this.times = tf(t, this.TimeBufferType)),
            (this.values = tf(n, this.ValueBufferType)),
            this.setInterpolation(i || this.DefaultInterpolation);
        }
        static toJSON(e) {
          const t = e.constructor;
          let n;
          if (t.toJSON !== this.toJSON) n = t.toJSON(e);
          else {
            n = {
              name: e.name,
              times: tf(e.times, Array),
              values: tf(e.values, Array),
            };
            const t = e.getInterpolation();
            t !== e.DefaultInterpolation && (n.interpolation = t);
          }
          return (n.type = e.ValueTypeName), n;
        }
        InterpolantFactoryMethodDiscrete(e) {
          return new sf(this.times, this.values, this.getValueSize(), e);
        }
        InterpolantFactoryMethodLinear(e) {
          return new of(this.times, this.values, this.getValueSize(), e);
        }
        InterpolantFactoryMethodSmooth(e) {
          return new af(this.times, this.values, this.getValueSize(), e);
        }
        setInterpolation(e) {
          let t;
          switch (e) {
            case Ds:
              t = this.InterpolantFactoryMethodDiscrete;
              break;
            case Us:
              t = this.InterpolantFactoryMethodLinear;
              break;
            case Is:
              t = this.InterpolantFactoryMethodSmooth;
          }
          if (void 0 === t) {
            const t =
              "unsupported interpolation for " +
              this.ValueTypeName +
              " keyframe track named " +
              this.name;
            if (void 0 === this.createInterpolant) {
              if (e === this.DefaultInterpolation) throw new Error(t);
              this.setInterpolation(this.DefaultInterpolation);
            }
            return console.warn("THREE.KeyframeTrack:", t), this;
          }
          return (this.createInterpolant = t), this;
        }
        getInterpolation() {
          switch (this.createInterpolant) {
            case this.InterpolantFactoryMethodDiscrete:
              return Ds;
            case this.InterpolantFactoryMethodLinear:
              return Us;
            case this.InterpolantFactoryMethodSmooth:
              return Is;
          }
        }
        getValueSize() {
          return this.values.length / this.times.length;
        }
        shift(e) {
          if (0 !== e) {
            const t = this.times;
            for (let n = 0, i = t.length; n !== i; ++n) t[n] += e;
          }
          return this;
        }
        scale(e) {
          if (1 !== e) {
            const t = this.times;
            for (let n = 0, i = t.length; n !== i; ++n) t[n] *= e;
          }
          return this;
        }
        trim(e, t) {
          const n = this.times,
            i = n.length;
          let r = 0,
            a = i - 1;
          for (; r !== i && n[r] < e;) ++r;
          for (; -1 !== a && n[a] > t;) --a;
          if ((++a, 0 !== r || a !== i)) {
            r >= a && ((a = Math.max(a, 1)), (r = a - 1));
            const e = this.getValueSize();
            (this.times = n.slice(r, a)),
              (this.values = this.values.slice(r * e, a * e));
          }
          return this;
        }
        validate() {
          let e = !0;
          const t = this.getValueSize();
          t - Math.floor(t) !== 0 &&
            (console.error(
              "THREE.KeyframeTrack: Invalid value size in track.",
              this
            ),
              (e = !1));
          const n = this.times,
            i = this.values,
            r = n.length;
          0 === r &&
            (console.error("THREE.KeyframeTrack: Track is empty.", this),
              (e = !1));
          let a = null;
          for (let o = 0; o !== r; o++) {
            const t = n[o];
            if ("number" === typeof t && isNaN(t)) {
              console.error(
                "THREE.KeyframeTrack: Time is not a valid number.",
                this,
                o,
                t
              ),
                (e = !1);
              break;
            }
            if (null !== a && a > t) {
              console.error(
                "THREE.KeyframeTrack: Out of order keys.",
                this,
                o,
                t,
                a
              ),
                (e = !1);
              break;
            }
            a = t;
          }
          if (void 0 !== i && nf(i))
            for (let o = 0, s = i.length; o !== s; ++o) {
              const t = i[o];
              if (isNaN(t)) {
                console.error(
                  "THREE.KeyframeTrack: Value is not a valid number.",
                  this,
                  o,
                  t
                ),
                  (e = !1);
                break;
              }
            }
          return e;
        }
        optimize() {
          const e = this.times.slice(),
            t = this.values.slice(),
            n = this.getValueSize(),
            i = this.getInterpolation() === Is,
            r = e.length - 1;
          let a = 1;
          for (let o = 1; o < r; ++o) {
            let r = !1;
            const s = e[o];
            if (s !== e[o + 1] && (1 !== o || s !== e[0]))
              if (i) r = !0;
              else {
                const e = o * n,
                  i = e - n,
                  a = e + n;
                for (let o = 0; o !== n; ++o) {
                  const n = t[e + o];
                  if (n !== t[i + o] || n !== t[a + o]) {
                    r = !0;
                    break;
                  }
                }
              }
            if (r) {
              if (o !== a) {
                e[a] = e[o];
                const i = o * n,
                  r = a * n;
                for (let e = 0; e !== n; ++e) t[r + e] = t[i + e];
              }
              ++a;
            }
          }
          if (r > 0) {
            e[a] = e[r];
            for (let e = r * n, i = a * n, o = 0; o !== n; ++o)
              t[i + o] = t[e + o];
            ++a;
          }
          return (
            a !== e.length
              ? ((this.times = e.slice(0, a)),
                (this.values = t.slice(0, a * n)))
              : ((this.times = e), (this.values = t)),
            this
          );
        }
        clone() {
          const e = this.times.slice(),
            t = this.values.slice(),
            n = new (0, this.constructor)(this.name, e, t);
          return (n.createInterpolant = this.createInterpolant), n;
        }
      }
      (lf.prototype.TimeBufferType = Float32Array),
        (lf.prototype.ValueBufferType = Float32Array),
        (lf.prototype.DefaultInterpolation = Us);
      class cf extends lf { }
      (cf.prototype.ValueTypeName = "bool"),
        (cf.prototype.ValueBufferType = Array),
        (cf.prototype.DefaultInterpolation = Ds),
        (cf.prototype.InterpolantFactoryMethodLinear = void 0),
        (cf.prototype.InterpolantFactoryMethodSmooth = void 0);
      class uf extends lf { }
      uf.prototype.ValueTypeName = "color";
      class df extends lf { }
      df.prototype.ValueTypeName = "number";
      class hf extends rf {
        constructor(e, t, n, i) {
          super(e, t, n, i);
        }
        interpolate_(e, t, n, i) {
          const r = this.resultBuffer,
            a = this.sampleValues,
            o = this.valueSize,
            s = (n - t) / (i - t);
          let l = e * o;
          for (let c = l + o; l !== c; l += 4)
            zl.slerpFlat(r, 0, a, l - o, a, l, s);
          return r;
        }
      }
      class pf extends lf {
        InterpolantFactoryMethodLinear(e) {
          return new hf(this.times, this.values, this.getValueSize(), e);
        }
      }
      (pf.prototype.ValueTypeName = "quaternion"),
        (pf.prototype.DefaultInterpolation = Us),
        (pf.prototype.InterpolantFactoryMethodSmooth = void 0);
      class ff extends lf { }
      (ff.prototype.ValueTypeName = "string"),
        (ff.prototype.ValueBufferType = Array),
        (ff.prototype.DefaultInterpolation = Ds),
        (ff.prototype.InterpolantFactoryMethodLinear = void 0),
        (ff.prototype.InterpolantFactoryMethodSmooth = void 0);
      class mf extends lf { }
      mf.prototype.ValueTypeName = "vector";
      class gf {
        constructor(e, t, n) {
          const i = this;
          let r,
            a = !1,
            o = 0,
            s = 0;
          const l = [];
          (this.onStart = void 0),
            (this.onLoad = e),
            (this.onProgress = t),
            (this.onError = n),
            (this.itemStart = function (e) {
              s++,
                !1 === a && void 0 !== i.onStart && i.onStart(e, o, s),
                (a = !0);
            }),
            (this.itemEnd = function (e) {
              o++,
                void 0 !== i.onProgress && i.onProgress(e, o, s),
                o === s && ((a = !1), void 0 !== i.onLoad && i.onLoad());
            }),
            (this.itemError = function (e) {
              void 0 !== i.onError && i.onError(e);
            }),
            (this.resolveURL = function (e) {
              return r ? r(e) : e;
            }),
            (this.setURLModifier = function (e) {
              return (r = e), this;
            }),
            (this.addHandler = function (e, t) {
              return l.push(e, t), this;
            }),
            (this.removeHandler = function (e) {
              const t = l.indexOf(e);
              return -1 !== t && l.splice(t, 2), this;
            }),
            (this.getHandler = function (e) {
              for (let t = 0, n = l.length; t < n; t += 2) {
                const n = l[t],
                  i = l[t + 1];
                if ((n.global && (n.lastIndex = 0), n.test(e))) return i;
              }
              return null;
            });
        }
      }
      const vf = new gf();
      class _f {
        constructor(e) {
          (this.manager = void 0 !== e ? e : vf),
            (this.crossOrigin = "anonymous"),
            (this.withCredentials = !1),
            (this.path = ""),
            (this.resourcePath = ""),
            (this.requestHeader = {});
        }
        load() { }
        loadAsync(e, t) {
          const n = this;
          return new Promise(function (i, r) {
            n.load(e, i, t, r);
          });
        }
        parse() { }
        setCrossOrigin(e) {
          return (this.crossOrigin = e), this;
        }
        setWithCredentials(e) {
          return (this.withCredentials = e), this;
        }
        setPath(e) {
          return (this.path = e), this;
        }
        setResourcePath(e) {
          return (this.resourcePath = e), this;
        }
        setRequestHeader(e) {
          return (this.requestHeader = e), this;
        }
      }
      _f.DEFAULT_MATERIAL_NAME = "__DEFAULT";
      Error;
      const yf = "\\[\\]\\.:\\/",
        xf = new RegExp("[" + yf + "]", "g"),
        bf = "[^" + yf + "]",
        Sf = "[^" + yf.replace("\\.", "") + "]",
        Ef = new RegExp(
          "^" +
          /((?:WC+[\/:])*)/.source.replace("WC", bf) +
          /(WCOD+)?/.source.replace("WCOD", Sf) +
          /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", bf) +
          /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", bf) +
          "$"
        ),
        Mf = ["material", "materials", "bones", "map"];
      class Tf {
        constructor(e, t, n) {
          (this.path = t),
            (this.parsedPath = n || Tf.parseTrackName(t)),
            (this.node = Tf.findNode(e, this.parsedPath.nodeName)),
            (this.rootNode = e),
            (this.getValue = this._getValue_unbound),
            (this.setValue = this._setValue_unbound);
        }
        static create(e, t, n) {
          return e && e.isAnimationObjectGroup
            ? new Tf.Composite(e, t, n)
            : new Tf(e, t, n);
        }
        static sanitizeNodeName(e) {
          return e.replace(/\s/g, "_").replace(xf, "");
        }
        static parseTrackName(e) {
          const t = Ef.exec(e);
          if (null === t)
            throw new Error("PropertyBinding: Cannot parse trackName: " + e);
          const n = {
            nodeName: t[2],
            objectName: t[3],
            objectIndex: t[4],
            propertyName: t[5],
            propertyIndex: t[6],
          },
            i = n.nodeName && n.nodeName.lastIndexOf(".");
          if (void 0 !== i && -1 !== i) {
            const e = n.nodeName.substring(i + 1);
            -1 !== Mf.indexOf(e) &&
              ((n.nodeName = n.nodeName.substring(0, i)), (n.objectName = e));
          }
          if (null === n.propertyName || 0 === n.propertyName.length)
            throw new Error(
              "PropertyBinding: can not parse propertyName from trackName: " + e
            );
          return n;
        }
        static findNode(e, t) {
          if (
            void 0 === t ||
            "" === t ||
            "." === t ||
            -1 === t ||
            t === e.name ||
            t === e.uuid
          )
            return e;
          if (e.skeleton) {
            const n = e.skeleton.getBoneByName(t);
            if (void 0 !== n) return n;
          }
          if (e.children) {
            const n = function (e) {
              for (let i = 0; i < e.length; i++) {
                const r = e[i];
                if (r.name === t || r.uuid === t) return r;
                const a = n(r.children);
                if (a) return a;
              }
              return null;
            },
              i = n(e.children);
            if (i) return i;
          }
          return null;
        }
        _getValue_unavailable() { }
        _setValue_unavailable() { }
        _getValue_direct(e, t) {
          e[t] = this.targetObject[this.propertyName];
        }
        _getValue_array(e, t) {
          const n = this.resolvedProperty;
          for (let i = 0, r = n.length; i !== r; ++i) e[t++] = n[i];
        }
        _getValue_arrayElement(e, t) {
          e[t] = this.resolvedProperty[this.propertyIndex];
        }
        _getValue_toArray(e, t) {
          this.resolvedProperty.toArray(e, t);
        }
        _setValue_direct(e, t) {
          this.targetObject[this.propertyName] = e[t];
        }
        _setValue_direct_setNeedsUpdate(e, t) {
          (this.targetObject[this.propertyName] = e[t]),
            (this.targetObject.needsUpdate = !0);
        }
        _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
          (this.targetObject[this.propertyName] = e[t]),
            (this.targetObject.matrixWorldNeedsUpdate = !0);
        }
        _setValue_array(e, t) {
          const n = this.resolvedProperty;
          for (let i = 0, r = n.length; i !== r; ++i) n[i] = e[t++];
        }
        _setValue_array_setNeedsUpdate(e, t) {
          const n = this.resolvedProperty;
          for (let i = 0, r = n.length; i !== r; ++i) n[i] = e[t++];
          this.targetObject.needsUpdate = !0;
        }
        _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
          const n = this.resolvedProperty;
          for (let i = 0, r = n.length; i !== r; ++i) n[i] = e[t++];
          this.targetObject.matrixWorldNeedsUpdate = !0;
        }
        _setValue_arrayElement(e, t) {
          this.resolvedProperty[this.propertyIndex] = e[t];
        }
        _setValue_arrayElement_setNeedsUpdate(e, t) {
          (this.resolvedProperty[this.propertyIndex] = e[t]),
            (this.targetObject.needsUpdate = !0);
        }
        _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
          (this.resolvedProperty[this.propertyIndex] = e[t]),
            (this.targetObject.matrixWorldNeedsUpdate = !0);
        }
        _setValue_fromArray(e, t) {
          this.resolvedProperty.fromArray(e, t);
        }
        _setValue_fromArray_setNeedsUpdate(e, t) {
          this.resolvedProperty.fromArray(e, t),
            (this.targetObject.needsUpdate = !0);
        }
        _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
          this.resolvedProperty.fromArray(e, t),
            (this.targetObject.matrixWorldNeedsUpdate = !0);
        }
        _getValue_unbound(e, t) {
          this.bind(), this.getValue(e, t);
        }
        _setValue_unbound(e, t) {
          this.bind(), this.setValue(e, t);
        }
        bind() {
          let e = this.node;
          const t = this.parsedPath,
            n = t.objectName,
            i = t.propertyName;
          let r = t.propertyIndex;
          if (
            (e ||
              ((e = Tf.findNode(this.rootNode, t.nodeName)), (this.node = e)),
              (this.getValue = this._getValue_unavailable),
              (this.setValue = this._setValue_unavailable),
              !e)
          )
            return void console.warn(
              "THREE.PropertyBinding: No target node found for track: " +
              this.path +
              "."
            );
          if (n) {
            let i = t.objectIndex;
            switch (n) {
              case "materials":
                if (!e.material)
                  return void console.error(
                    "THREE.PropertyBinding: Can not bind to material as node does not have a material.",
                    this
                  );
                if (!e.material.materials)
                  return void console.error(
                    "THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",
                    this
                  );
                e = e.material.materials;
                break;
              case "bones":
                if (!e.skeleton)
                  return void console.error(
                    "THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",
                    this
                  );
                e = e.skeleton.bones;
                for (let t = 0; t < e.length; t++)
                  if (e[t].name === i) {
                    i = t;
                    break;
                  }
                break;
              case "map":
                if ("map" in e) {
                  e = e.map;
                  break;
                }
                if (!e.material)
                  return void console.error(
                    "THREE.PropertyBinding: Can not bind to material as node does not have a material.",
                    this
                  );
                if (!e.material.map)
                  return void console.error(
                    "THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",
                    this
                  );
                e = e.material.map;
                break;
              default:
                if (void 0 === e[n])
                  return void console.error(
                    "THREE.PropertyBinding: Can not bind to objectName of node undefined.",
                    this
                  );
                e = e[n];
            }
            if (void 0 !== i) {
              if (void 0 === e[i])
                return void console.error(
                  "THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",
                  this,
                  e
                );
              e = e[i];
            }
          }
          const a = e[i];
          if (void 0 === a) {
            const n = t.nodeName;
            return void console.error(
              "THREE.PropertyBinding: Trying to update property for track: " +
              n +
              "." +
              i +
              " but it wasn't found.",
              e
            );
          }
          let o = this.Versioning.None;
          (this.targetObject = e),
            void 0 !== e.needsUpdate
              ? (o = this.Versioning.NeedsUpdate)
              : void 0 !== e.matrixWorldNeedsUpdate &&
              (o = this.Versioning.MatrixWorldNeedsUpdate);
          let s = this.BindingType.Direct;
          if (void 0 !== r) {
            if ("morphTargetInfluences" === i) {
              if (!e.geometry)
                return void console.error(
                  "THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",
                  this
                );
              if (!e.geometry.morphAttributes)
                return void console.error(
                  "THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",
                  this
                );
              void 0 !== e.morphTargetDictionary[r] &&
                (r = e.morphTargetDictionary[r]);
            }
            (s = this.BindingType.ArrayElement),
              (this.resolvedProperty = a),
              (this.propertyIndex = r);
          } else
            void 0 !== a.fromArray && void 0 !== a.toArray
              ? ((s = this.BindingType.HasFromToArray),
                (this.resolvedProperty = a))
              : Array.isArray(a)
                ? ((s = this.BindingType.EntireArray),
                  (this.resolvedProperty = a))
                : (this.propertyName = i);
          (this.getValue = this.GetterByBindingType[s]),
            (this.setValue = this.SetterByBindingTypeAndVersioning[s][o]);
        }
        unbind() {
          (this.node = null),
            (this.getValue = this._getValue_unbound),
            (this.setValue = this._setValue_unbound);
        }
      }
      (Tf.Composite = class {
        constructor(e, t, n) {
          const i = n || Tf.parseTrackName(t);
          (this._targetGroup = e), (this._bindings = e.subscribe_(t, i));
        }
        getValue(e, t) {
          this.bind();
          const n = this._targetGroup.nCachedObjects_,
            i = this._bindings[n];
          void 0 !== i && i.getValue(e, t);
        }
        setValue(e, t) {
          const n = this._bindings;
          for (
            let i = this._targetGroup.nCachedObjects_, r = n.length;
            i !== r;
            ++i
          )
            n[i].setValue(e, t);
        }
        bind() {
          const e = this._bindings;
          for (
            let t = this._targetGroup.nCachedObjects_, n = e.length;
            t !== n;
            ++t
          )
            e[t].bind();
        }
        unbind() {
          const e = this._bindings;
          for (
            let t = this._targetGroup.nCachedObjects_, n = e.length;
            t !== n;
            ++t
          )
            e[t].unbind();
        }
      }),
        (Tf.prototype.BindingType = {
          Direct: 0,
          EntireArray: 1,
          ArrayElement: 2,
          HasFromToArray: 3,
        }),
        (Tf.prototype.Versioning = {
          None: 0,
          NeedsUpdate: 1,
          MatrixWorldNeedsUpdate: 2,
        }),
        (Tf.prototype.GetterByBindingType = [
          Tf.prototype._getValue_direct,
          Tf.prototype._getValue_array,
          Tf.prototype._getValue_arrayElement,
          Tf.prototype._getValue_toArray,
        ]),
        (Tf.prototype.SetterByBindingTypeAndVersioning = [
          [
            Tf.prototype._setValue_direct,
            Tf.prototype._setValue_direct_setNeedsUpdate,
            Tf.prototype._setValue_direct_setMatrixWorldNeedsUpdate,
          ],
          [
            Tf.prototype._setValue_array,
            Tf.prototype._setValue_array_setNeedsUpdate,
            Tf.prototype._setValue_array_setMatrixWorldNeedsUpdate,
          ],
          [
            Tf.prototype._setValue_arrayElement,
            Tf.prototype._setValue_arrayElement_setNeedsUpdate,
            Tf.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,
          ],
          [
            Tf.prototype._setValue_fromArray,
            Tf.prototype._setValue_fromArray_setNeedsUpdate,
            Tf.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,
          ],
        ]);
      new Float32Array(1);
      "undefined" !== typeof __THREE_DEVTOOLS__ &&
        __THREE_DEVTOOLS__.dispatchEvent(
          new CustomEvent("register", { detail: { revision: Bo } })
        ),
        "undefined" !== typeof window &&
        (window.__THREE__
          ? console.warn(
            "WARNING: Multiple instances of Three.js being imported."
          )
          : (window.__THREE__ = Bo));
      const wf = (t) => {
        let {
          sizeInVW: n,
          id: i,
          shape: r,
          delay: a,
          loadingComplete: o,
        } = t;
        const {
          enablePointerCursor: s,
          disablePointerCursor: l,
          enableDrag: c,
          disableDrag: u,
        } = ko(),
          d = (0, e.useRef)(null);
        return (
          (0, e.useEffect)(() => {
            const e = new $p(),
              t = new $u(75, 1, 0.1, 1e3),
              i = new Qp({ alpha: !0 }),
              a = (n / 100) * window.innerWidth;
            i.setSize(a, a);
            let o,
              s = d.current;
            s.appendChild(i.domElement),
              "triangle" === r
                ? (o = new ef(50, 4, 1))
                : "box" === r
                  ? (o = new Gu(50, 50, 50, 1))
                  : "sphere" === r && (o = new ef(50, 15, 15));
            const l = new cu({ color: 65369, wireframe: !0 }),
              c = new Vu(o, l);
            "triangle" === r
              ? (c.rotation.x = -25)
              : "box" === r
                ? (c.rotation.x = -100)
                : "sphere" === r && (c.rotation.x = -149.9),
              e.add(c),
              (t.position.z = 100);
            let u = window.scrollY;
            const h = function () {
              requestAnimationFrame(h);
              const n = window.scrollY,
                a = 0.003 * (n - u);
              (c.rotation.y += "sphere" === r ? 0.003 + a / 2 : 0.01 + a),
                i.render(e, t),
                (u = n);
            };
            h();
            let p = !1,
              f = { x: 0, y: 0 };
            const m = (e) => {
              if (p) {
                const t = { x: e.offsetX - f.x, y: e.offsetY - f.y },
                  n = (t.y / i.domElement.clientHeight) * Math.PI * 2 * 0.2,
                  r = (t.x / i.domElement.clientWidth) * Math.PI * 2 * 0.2;
                (c.rotation.x += n),
                  (c.rotation.y += r),
                  (f = { x: e.offsetX, y: e.offsetY });
              }
            },
              g = (e) => {
                0 === e.button &&
                  ((p = !0), (f = { x: e.offsetX, y: e.offsetY }));
              },
              v = () => {
                p = !1;
              },
              _ = () => {
                p = !1;
              },
              y = i.domElement;
            return (
              y.addEventListener("mousedown", g, !1),
              y.addEventListener("mousemove", m, !1),
              y.addEventListener("mouseup", v, !1),
              y.addEventListener("mouseleave", _, !1),
              window.addEventListener("mouseup", v, !1),
              window.addEventListener("resize", () => {
                const e = (n / 100) * window.innerWidth;
                i.setSize(e, e),
                  (t.aspect = e / e),
                  t.updateProjectionMatrix();
              }),
              () => {
                y.removeEventListener("mousedown", g, !1),
                  y.removeEventListener("mousemove", m, !1),
                  y.removeEventListener("mouseup", v, !1),
                  y.removeEventListener("mouseleave", _, !1),
                  window.removeEventListener("mouseup", v, !1),
                  s &&
                  s.contains(i.domElement) &&
                  s.removeChild(i.domElement);
              }
            );
          }, [r, n]),
          (0, Do.jsx)(To.div, {
            initial: { scale: 0 },
            animate: o ? { scale: 1 } : {},
            transition: {
              duration: 0.2,
              ease: [0.075, 0.82, 0.165, 1],
              delay: a,
            },
            onMouseEnter: () => {
              s(), c();
            },
            onMouseLeave: () => {
              l(), u();
            },
            ref: d,
            id: i,
            className: "prism absolute",
          })
        );
      },
        Af = () => {
          const t = (0, e.useRef)(null);
          return (
            (0, e.useEffect)(() => {
              let e = t.current;
              if (!e) return;
              const n = new $p(),
                i = e.clientWidth,
                r = e.clientHeight,
                a = new $u(75, i / r, 0.1, 1e3);
              a.position.z = 5;
              const o = new Qp({ alpha: !0 });
              o.setSize(i, r), e.appendChild(o.domElement);
              const s = new pd(20, 5, 30, 10),
                l = new cu({ color: 65369, wireframe: !0 }),
                c = new Vu(s, l);
              n.add(c), (c.rotation.x = 150);
              const u = () => {
                const t = e.clientWidth,
                  n = e.clientHeight;
                (a.aspect = t / n), a.updateProjectionMatrix(), o.setSize(t, n);
              };
              window.addEventListener("resize", u);
              let d = 0;
              const h = () => {
                requestAnimationFrame(h), (d += 0.03);
                const e = s.attributes.position.array;
                for (let t = 0; t < e.length; t += 3) {
                  const n = e[t],
                    i = e[t + 1];
                  e[t + 2] =
                    0.2 * Math.sin(2 * n + d) + 0.2 * Math.sin(2 * i + d);
                }
                (s.attributes.position.needsUpdate = !0), o.render(n, a);
              };
              return (
                h(),
                () => {
                  window.removeEventListener("resize", u),
                    e.removeChild(o.domElement);
                }
              );
            }, []),
            (0, Do.jsx)("div", {
              ref: t,
              className: "plane-wrapper w-full h-full",
            })
          );
        },
        Rf = () => {
          const { enableGunCursor: t, disableGunCursor: n } = ko(),
            [i, r] = (0, e.useState)(0);
          return (
            (0, e.useEffect)(() => {
              const e = (e) => {
                const t = e.target,
                  n = e.currentTarget.getBoundingClientRect();
                ((e, t, n) => {
                  var i;
                  const r = document.createElement("div");
                  (r.className = "bullet"),
                    (r.style.left = "calc(".concat(
                      e - n.left,
                      "px - 0.265vw)"
                    )),
                    (r.style.top = "calc(".concat(
                      t - n.top,
                      "px - 0.265vw)"
                    )),
                    null ===
                    (i = document.getElementById("shooter-container")) ||
                    void 0 === i ||
                    i.appendChild(r),
                    setTimeout(() => {
                      r.remove();
                    }, 100);
                })(e.clientX, e.clientY, n),
                  t.classList.contains("target") &&
                  !t.classList.contains("hit") &&
                  ((e) => {
                    r((e) => e + 1), e.classList.add("hit");
                  })(t);
              },
                t = document.getElementById("target-container");
              if (t)
                return (
                  t.addEventListener("click", e),
                  () => {
                    t.removeEventListener("click", e);
                  }
                );
            }, []),
            (0, Do.jsxs)("div", {
              className: "w-full h-full select-none",
              children: [
                (0, Do.jsxs)("div", {
                  id: "shooter-nav",
                  className: "flex justify-between w-full",
                  children: [
                    (0, Do.jsx)("p", { children: "+ Skills & Technologies" }),
                    (0, Do.jsxs)("p", {
                      children: [
                        "Score: ",
                        (0, Do.jsx)("span", { children: i }),
                      ],
                    }),
                  ],
                }),
                (0, Do.jsxs)("div", {
                  onMouseEnter: t,
                  onMouseLeave: n,
                  id: "shooter-container",
                  className: "overflow-hidden relative",
                  children: [
                    (0, Do.jsx)("div", { className: "glow" }),
                    (0, Do.jsx)("div", {
                      className: "moving-grid absolute",
                      children: (0, Do.jsxs)("div", {
                        className: "grid-inner",
                        children: [
                          (0, Do.jsx)("div", { className: "grid-x absolute" }),
                          (0, Do.jsx)("div", { className: "grid-y absolute" }),
                        ],
                      }),
                    }),
                    (0, Do.jsx)("div", {
                      className: "black-top absolute w-full",
                    }),
                    (0, Do.jsxs)("div", {
                      id: "target-container",
                      className: "relative",
                      children: [
                        (0, Do.jsx)("h4", {
                          id: "netlify",
                          className: "absolute pill target",
                          children: "Netlify",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "hugo",
                          className: "absolute pill target",
                          children: "Hugo",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "ruby",
                          className: "absolute pill target",
                          children: "Ruby on Rails",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "git",
                          className: "absolute pill target",
                          children: "Git",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "cross",
                          className: "absolute pill target",
                          children: "Cross-browser",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "framer",
                          className: "absolute pill target",
                          children: "Framer",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "accessibility",
                          className: "absolute pill target",
                          children: "Accessibility",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "uiux",
                          className: "absolute pill target",
                          children: "UI/UX design",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "api",
                          className: "absolute pill target",
                          children: "API",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "bootstrap",
                          className: "absolute pill target",
                          children: "Bootstrap",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "react",
                          className: "absolute pill target",
                          children: "React.js",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "responsive",
                          className: "absolute pill target",
                          children: "Responsive design",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "jquery",
                          className: "absolute pill target",
                          children: "jQuery",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "threejs",
                          className: "absolute pill target",
                          children: "Three.js",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "photoshop",
                          className: "absolute pill target",
                          children: "Photoshop",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "tailwind",
                          className: "absolute pill target",
                          children: "Tailwind",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "ts",
                          className: "absolute pill target",
                          children: "TypeScript",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "javascript",
                          className: "absolute pill target",
                          children: "Javascript",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "css",
                          className: "absolute pill target",
                          children: "CSS + SCSS",
                        }),
                        (0, Do.jsx)("h4", {
                          id: "html",
                          className: "absolute pill target",
                          children: "HTML",
                        }),
                      ],
                    }),
                  ],
                }),
                (0, Do.jsx)("p", {
                  className: "text-center",
                  children: "Break the targets!",
                }),
              ],
            })
          );
        },
        Cf = () => {
          const t = (0, e.useRef)(null),
            n = (0, e.useRef)(null),
            [i, r] = (0, e.useState)(!1),
            [a, o] = (0, e.useState)(0),
            [s, l] = (0, e.useState)(0),
            {
              enablePointerCursor: c,
              disablePointerCursor: u,
              enableJump: d,
              disableJump: h,
            } = ko();
          return (
            (0, e.useEffect)(() => {
              let e = t.current;
              const n = () => {
                if (i) return;
                const t = window.innerHeight,
                  n = document.documentElement.scrollHeight,
                  r = document.documentElement.scrollTop,
                  a = n - t,
                  o = Math.min(r / a, 1),
                  s = e ? e.offsetHeight : 0,
                  l = (document.getElementById("track").clientHeight - s) * o;
                e && (e.style.transform = "translateY(".concat(l, "px)"));
              },
                c = (e) => {
                  r(!0), o(e.clientY), l(document.documentElement.scrollTop);
                },
                u = (t) => {
                  if (!i) return;
                  const n = t.clientY - a,
                    r =
                      document.getElementById("track").clientHeight -
                      (e ? e.offsetHeight : 0),
                    o = n / r,
                    l =
                      document.documentElement.scrollHeight -
                      window.innerHeight,
                    c = s + o * l,
                    u = n + (s / l) * r;
                  e &&
                    (e.style.transform = "translateY(".concat(
                      Math.min(Math.max(u, 0), r),
                      "px)"
                    )),
                    window.scrollTo(0, c);
                },
                d = () => {
                  r(!1);
                };
              return (
                window.addEventListener("scroll", n),
                document.addEventListener("mousemove", u),
                document.addEventListener("mouseup", d),
                null === e ||
                void 0 === e ||
                e.addEventListener("mousedown", c),
                () => {
                  window.removeEventListener("scroll", n),
                    document.removeEventListener("mousemove", u),
                    document.removeEventListener("mouseup", d),
                    null === e ||
                    void 0 === e ||
                    e.removeEventListener("mousedown", c);
                }
              );
            }, [i, a, s]),
            (0, Do.jsxs)("div", {
              id: "scrollbar",
              children: [
                (0, Do.jsx)("div", {
                  id: "track",
                  ref: n,
                  className: "relative h-full",
                  onClick: (e) => {
                    const t = n.current;
                    if (!t) return;
                    const i = t.getBoundingClientRect(),
                      r =
                        ((e.clientY - i.top) / t.clientHeight) *
                        (document.documentElement.scrollHeight -
                          window.innerHeight);
                    window.scrollTo(0, r);
                  },
                  onMouseEnter: () => {
                    d(), c();
                  },
                  onMouseLeave: () => {
                    h(), u();
                  },
                }),
                (0, Do.jsx)("div", {
                  id: "bar",
                  ref: t,
                  style: {
                    position: "absolute",
                    top: "0",
                    right: "0",
                    cursor: "grab",
                  },
                  onMouseEnter: () => {
                    h(), u();
                  },
                }),
              ],
            })
          );
        },
        Pf = () => {
          const {
            isGunCursor: t,
            isPointerCursor: n,
            showCursor: i,
            showDrag: r,
            showGo: a,
            showEmail: o,
            showJump: s,
          } = ko(),
            [l, c] = (0, e.useState)({ x: 0, y: 0 });
          return (
            (0, e.useEffect)(() => {
              const e = (e) => {
                c({ x: e.clientX, y: e.clientY });
              };
              return (
                document.addEventListener("mousemove", e),
                () => document.removeEventListener("mousemove", e)
              );
            }, []),
            (0, Do.jsxs)("div", {
              className: "custom-cursor "
                .concat(t ? "gun" : "", " ")
                .concat(n ? "pointer" : "", " ")
                .concat(i ? "" : "hide"),
              style: {
                left: "calc(".concat(l.x, "px + 0.11vw)"),
                top: "calc(".concat(l.y, "px + 0.11vw)"),
              },
              children: [
                (0, Do.jsxs)("div", {
                  className: "crosshair relative",
                  children: [
                    (0, Do.jsx)("div", { className: "vertical absolute" }),
                    (0, Do.jsx)("div", { className: "horizontal absolute" }),
                  ],
                }),
                (0, Do.jsx)("div", {
                  className: "drag uppercase absolute ".concat(
                    r ? "show" : "hide"
                  ),
                  children: (0, Do.jsx)("p", { children: "Drag" }),
                }),
                (0, Do.jsx)("div", {
                  className: "go uppercase absolute ".concat(
                    a ? "show" : "hide"
                  ),
                  children: (0, Do.jsx)("p", { children: "Open in new tab" }),
                }),
                (0, Do.jsx)("div", {
                  className: "email uppercase absolute ".concat(
                    o ? "show" : "hide"
                  ),
                  children: (0, Do.jsx)("p", { children: "Send an email" }),
                }),
                (0, Do.jsx)("div", {
                  className: "jump uppercase absolute ".concat(
                    s ? "show" : "hide"
                  ),
                  children: (0, Do.jsx)("p", { children: "Jump here" }),
                }),
              ],
            })
          );
        },
        Lf = (e) => {
          let { children: t } = e;
          const { enableCursor: n, disableCursor: i } = ko();
          return (0, Do.jsx)("div", {
            className: "App relative",
            onMouseEnter: n,
            onMouseLeave: i,
            children: t,
          });
        };
      var Nf =
        "undefined" != typeof window &&
        new (class {
          constructor() {
            (this.raf = (e) => {
              requestAnimationFrame(this.raf);
              const t = e - this.now;
              this.now = e;
              for (let n = 0; n < this.callbacks.length; n++)
                this.callbacks[n].callback(e, t);
            }),
              (this.callbacks = []),
              (this.now = performance.now()),
              requestAnimationFrame(this.raf);
          }
          add(e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
            return (
              this.callbacks.push({ callback: e, priority: t }),
              this.callbacks.sort((e, t) => e.priority - t.priority),
              () => this.remove(e)
            );
          }
          remove(e) {
            this.callbacks = this.callbacks.filter((t) => {
              let { callback: n } = t;
              return e !== n;
            });
          }
        })(),
        Df = function (e, t, n) {
          var i = null,
            r = null,
            a = function () {
              i && (clearTimeout(i), (r = null), (i = null));
            },
            o = function () {
              if (!t) return e.apply(this, arguments);
              var o = this,
                s = arguments,
                l = n && !i;
              return (
                a(),
                (r = function () {
                  e.apply(o, s);
                }),
                (i = setTimeout(function () {
                  if (((i = null), !l)) {
                    var e = r;
                    return (r = null), e();
                  }
                }, t)),
                l ? r() : void 0
              );
            };
          return (
            (o.cancel = a),
            (o.flush = function () {
              var e = r;
              a(), e && e();
            }),
            o
          );
        };
      const Uf = (e) => {
        let t;
        const n = new Set(),
          i = (e, i) => {
            const r = "function" === typeof e ? e(t) : e;
            if (!Object.is(r, t)) {
              const e = t;
              (t = (null != i ? i : "object" !== typeof r || null === r)
                ? r
                : Object.assign({}, t, r)),
                n.forEach((n) => n(t, e));
            }
          },
          r = () => t,
          a = {
            setState: i,
            getState: r,
            getInitialState: () => o,
            subscribe: (e) => (n.add(e), () => n.delete(e)),
            destroy: () => {
              console.warn(
                "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
              ),
                n.clear();
            },
          },
          o = (t = e(i, r, a));
        return a;
      },
        If = (e) => (e ? Uf(e) : Uf);
      var Of = n(443);
      const { useDebugValue: kf } = e,
        { useSyncExternalStoreWithSelector: Ff } = Of;
      let zf = !1;
      const Bf = (e) => e;
      const Vf = (e) => {
        "function" !== typeof e &&
          console.warn(
            "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
          );
        const t = "function" === typeof e ? If(e) : e,
          n = (e, n) =>
            (function (e) {
              let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : Bf,
                n = arguments.length > 2 ? arguments[2] : void 0;
              n &&
                !zf &&
                (console.warn(
                  "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
                ),
                  (zf = !0));
              const i = Ff(
                e.subscribe,
                e.getState,
                e.getServerState || e.getInitialState,
                t,
                n
              );
              return kf(i), i;
            })(t, e, n);
        return Object.assign(n, t), n;
      },
        Hf = (e) => (e ? Vf(e) : Vf);
      function Gf(t) {
        let n =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
        (0, e.useEffect)(() => {
          if (t) return Nf.add(t, n), () => Nf.remove(t);
        }, [t, n]);
      }
      function Wf() {
        return (
          (Wf = Object.assign
            ? Object.assign.bind()
            : function (e) {
              for (var t = 1; t < arguments.length; t++) {
                var n = arguments[t];
                for (var i in n)
                  Object.prototype.hasOwnProperty.call(n, i) && (e[i] = n[i]);
              }
              return e;
            }),
          Wf.apply(this, arguments)
        );
      }
      function jf(e) {
        "sticky" === getComputedStyle(e).position &&
          (e.style.setProperty("position", "static"),
            (e.dataset.sticky = "true")),
          e.offsetParent && jf(e.offsetParent);
      }
      function Xf(e) {
        var t;
        "true" === (null == e || null == (t = e.dataset) ? void 0 : t.sticky) &&
          (e.style.removeProperty("position"),
            (e.dataset.sticky = "true"),
            delete e.dataset.sticky),
          e.parentNode && Xf(e.parentNode);
      }
      function Yf(e) {
        const t =
          (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0) +
          e.offsetTop;
        return e.offsetParent ? Yf(e.offsetParent, t) : t;
      }
      function qf(e) {
        const t =
          (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0) +
          e.offsetLeft;
        return e.offsetParent ? qf(e.offsetParent, t) : t;
      }
      function Kf(e) {
        const t =
          (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0) +
          e.scrollTop;
        return e.offsetParent ? Kf(e.offsetParent, t) : t + window.scrollY;
      }
      function Zf(e) {
        const t =
          (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0) +
          e.scrollLeft;
        return e.offsetParent ? Zf(e.offsetParent, t) : t + window.scrollX;
      }
      const Jf = Hf((e) => ({
        elements: [],
        addElement: (t) => {
          e((e) => ({ elements: [...e.elements, t] }));
        },
        removeElement: (t) => {
          e((e) => ({ elements: e.elements.filter((e) => e !== t) }));
        },
      })),
        Qf = {
          emit(e) {
            for (
              var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), i = 1;
              i < t;
              i++
            )
              n[i - 1] = arguments[i];
            for (let r = 0, a = this.events[e] || [], o = a.length; r < o; r++)
              a[r](...n);
          },
          events: {},
          on(e, t) {
            var n;
            return (
              ((n = this.events)[e] || (n[e] = [])).push(t),
              () => {
                var n;
                this.events[e] =
                  null === (n = this.events[e]) || void 0 === n
                    ? void 0
                    : n.filter((e) => t !== e);
              }
            );
          },
        };
      function $f() {
        let {
          ignoreTransform: t = !1,
          ignoreSticky: n = !0,
          lazy: i = !1,
          debounce: r = 500,
          callback: a = () => { },
        } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        const [o, s] = (0, e.useState)(),
          [l, c] = (0, e.useState)({}),
          u = (0, e.useRef)({}),
          d = (0, e.useCallback)(
            (e) => {
              const t = e.borderBoxSize[0].blockSize;
              (u.current.width = e.borderBoxSize[0].inlineSize),
                (u.current.height = t),
                a(u.current),
                i || c(Wf({}, u.current));
            },
            [i]
          ),
          [h] = (function () {
            let {
              lazy: t = !1,
              debounce: n = 500,
              box: i = "border-box",
              callback: r = () => { },
            } = arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {},
              a =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : [];
            const o = (0, e.useRef)({}),
              [s, l] = (0, e.useState)({}),
              [c, u] = (0, e.useState)();
            (0, e.useEffect)(() => {
              if (!c) return;
              const e = Df(
                (e) => {
                  let [n] = e;
                  (o.current = n), r(n), t || l(n);
                },
                n,
                !0
              ),
                a = new ResizeObserver(e);
              return (
                a.observe(c, { box: i }),
                () => {
                  a.disconnect(), e.cancel();
                }
              );
            }, [c, t, n, i, ...a]);
            const d = (0, e.useCallback)(() => o.current, []);
            return [u, t ? d : s];
          })({ lazy: !0, debounce: r, callback: d }, [r, d]),
          p = Jf((e) => {
            let { elements: t } = e;
            return t;
          }),
          f = (0, e.useCallback)(() => {
            if (!o) return;
            let e, r;
            if ((n && jf(o), t)) (e = Yf(o)), (r = qf(o));
            else {
              const t = o.getBoundingClientRect();
              (e = t.top + Kf(o)), (r = t.left + Zf(o));
            }
            n && Xf(o),
              (u.current.top = e),
              (u.current.left = r),
              a(u.current),
              i || c(Wf({}, u.current));
          }, [t, n, i, o]);
        (0, e.useEffect)(() => {
          const e = Df(f, r, !0),
            t = new ResizeObserver(e);
          return (
            t.observe(document.body),
            p.forEach((e) => {
              t.observe(e);
            }),
            () => {
              t.disconnect(), e.cancel();
            }
          );
        }, [p, r, f]);
        const m = (0, e.useCallback)(() => u.current, []);
        return (
          (0, e.useEffect)(
            () =>
              Qf.on("resize", function () {
                if (!o) return;
                const e = o.getBoundingClientRect();
                (u.current.width = e.width), (u.current.height = e.height), f();
              }),
            [o, f]
          ),
          [
            (e) => {
              s(e), h(e);
            },
            i ? m : l,
          ]
        );
      }
      function em(e) {
        return (
          (em =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (e) {
                return typeof e;
              }
              : function (e) {
                return e &&
                  "function" == typeof Symbol &&
                  e.constructor === Symbol &&
                  e !== Symbol.prototype
                  ? "symbol"
                  : typeof e;
              }),
          em(e)
        );
      }
      function tm(e) {
        var t = (function (e, t) {
          if ("object" != em(e) || !e) return e;
          var n = e[Symbol.toPrimitive];
          if (void 0 !== n) {
            var i = n.call(e, t || "default");
            if ("object" != em(i)) return i;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === t ? String : Number)(e);
        })(e, "string");
        return "symbol" == em(t) ? t : String(t);
      }
      function nm(e, t, n) {
        return (
          (t = tm(t)) in e
            ? Object.defineProperty(e, t, {
              value: n,
              enumerable: !0,
              configurable: !0,
              writable: !0,
            })
            : (e[t] = n),
          e
        );
      }
      function im(e, t, n) {
        return Math.max(e, Math.min(t, n));
      }
      ($f.observe = function (e) {
        Jf.getState().addElement(e);
      }),
        ($f.unobserve = function (e) {
          Jf.getState().removeElement(e);
        }),
        ($f.resize = function () {
          Qf.emit("resize");
        });
      class rm {
        advance(e) {
          var t;
          if (!this.isRunning) return;
          let n = !1;
          if (this.lerp)
            (this.value =
              ((i = this.value),
                (r = this.to),
                (a = 60 * this.lerp),
                (o = e),
                (function (e, t, n) {
                  return (1 - n) * e + n * t;
                })(i, r, 1 - Math.exp(-a * o)))),
              Math.round(this.value) === this.to &&
              ((this.value = this.to), (n = !0));
          else {
            this.currentTime += e;
            const t = im(0, this.currentTime / this.duration, 1);
            n = t >= 1;
            const i = n ? 1 : this.easing(t);
            this.value = this.from + (this.to - this.from) * i;
          }
          var i, r, a, o;
          null !== (t = this.onUpdate) &&
            void 0 !== t &&
            t.call(this, this.value, n),
            n && this.stop();
        }
        stop() {
          this.isRunning = !1;
        }
        fromTo(e, t, n) {
          let {
            lerp: i = 0.1,
            duration: r = 1,
            easing: a = (e) => e,
            onStart: o,
            onUpdate: s,
          } = n;
          (this.from = this.value = e),
            (this.to = t),
            (this.lerp = i),
            (this.duration = r),
            (this.easing = a),
            (this.currentTime = 0),
            (this.isRunning = !0),
            null !== o && void 0 !== o && o(),
            (this.onUpdate = s);
        }
      }
      class am {
        constructor() {
          let {
            wrapper: e,
            content: t,
            autoResize: n = !0,
            debounce: i = 250,
          } = arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : {};
          nm(this, "resize", () => {
            this.onWrapperResize(), this.onContentResize();
          }),
            nm(this, "onWrapperResize", () => {
              this.wrapper === window
                ? ((this.width = window.innerWidth),
                  (this.height = window.innerHeight))
                : ((this.width = this.wrapper.clientWidth),
                  (this.height = this.wrapper.clientHeight));
            }),
            nm(this, "onContentResize", () => {
              this.wrapper === window
                ? ((this.scrollHeight = this.content.scrollHeight),
                  (this.scrollWidth = this.content.scrollWidth))
                : ((this.scrollHeight = this.wrapper.scrollHeight),
                  (this.scrollWidth = this.wrapper.scrollWidth));
            }),
            (this.wrapper = e),
            (this.content = t),
            n &&
            ((this.debouncedResize = (function (e, t) {
              let n;
              return function () {
                let i = arguments,
                  r = this;
                clearTimeout(n),
                  (n = setTimeout(function () {
                    e.apply(r, i);
                  }, t));
              };
            })(this.resize, i)),
              this.wrapper === window
                ? window.addEventListener("resize", this.debouncedResize, !1)
                : ((this.wrapperResizeObserver = new ResizeObserver(
                  this.debouncedResize
                )),
                  this.wrapperResizeObserver.observe(this.wrapper)),
              (this.contentResizeObserver = new ResizeObserver(
                this.debouncedResize
              )),
              this.contentResizeObserver.observe(this.content)),
            this.resize();
        }
        destroy() {
          var e, t;
          null !== (e = this.wrapperResizeObserver) &&
            void 0 !== e &&
            e.disconnect(),
            null !== (t = this.contentResizeObserver) &&
            void 0 !== t &&
            t.disconnect(),
            window.removeEventListener("resize", this.debouncedResize, !1);
        }
        get limit() {
          return {
            x: this.scrollWidth - this.width,
            y: this.scrollHeight - this.height,
          };
        }
      }
      class om {
        constructor() {
          this.events = {};
        }
        emit(e) {
          let t = this.events[e] || [];
          for (
            var n = arguments.length, i = new Array(n > 1 ? n - 1 : 0), r = 1;
            r < n;
            r++
          )
            i[r - 1] = arguments[r];
          for (let a = 0, o = t.length; a < o; a++) t[a](...i);
        }
        on(e, t) {
          var n;
          return (
            (null !== (n = this.events[e]) && void 0 !== n && n.push(t)) ||
            (this.events[e] = [t]),
            () => {
              var n;
              this.events[e] =
                null === (n = this.events[e]) || void 0 === n
                  ? void 0
                  : n.filter((e) => t !== e);
            }
          );
        }
        off(e, t) {
          var n;
          this.events[e] =
            null === (n = this.events[e]) || void 0 === n
              ? void 0
              : n.filter((e) => t !== e);
        }
        destroy() {
          this.events = {};
        }
      }
      class sm {
        constructor(e, t) {
          let {
            wheelMultiplier: n = 1,
            touchMultiplier: i = 2,
            normalizeWheel: r = !1,
          } = t;
          nm(this, "onTouchStart", (e) => {
            const { clientX: t, clientY: n } = e.targetTouches
              ? e.targetTouches[0]
              : e;
            (this.touchStart.x = t),
              (this.touchStart.y = n),
              (this.lastDelta = { x: 0, y: 0 }),
              this.emitter.emit("scroll", { deltaX: 0, deltaY: 0, event: e });
          }),
            nm(this, "onTouchMove", (e) => {
              const { clientX: t, clientY: n } = e.targetTouches
                ? e.targetTouches[0]
                : e,
                i = -(t - this.touchStart.x) * this.touchMultiplier,
                r = -(n - this.touchStart.y) * this.touchMultiplier;
              (this.touchStart.x = t),
                (this.touchStart.y = n),
                (this.lastDelta = { x: i, y: r }),
                this.emitter.emit("scroll", { deltaX: i, deltaY: r, event: e });
            }),
            nm(this, "onTouchEnd", (e) => {
              this.emitter.emit("scroll", {
                deltaX: this.lastDelta.x,
                deltaY: this.lastDelta.y,
                event: e,
              });
            }),
            nm(this, "onWheel", (e) => {
              let { deltaX: t, deltaY: n } = e;
              this.normalizeWheel &&
                ((t = im(-100, t, 100)), (n = im(-100, n, 100))),
                (t *= this.wheelMultiplier),
                (n *= this.wheelMultiplier),
                this.emitter.emit("scroll", { deltaX: t, deltaY: n, event: e });
            }),
            (this.element = e),
            (this.wheelMultiplier = n),
            (this.touchMultiplier = i),
            (this.normalizeWheel = r),
            (this.touchStart = { x: null, y: null }),
            (this.emitter = new om()),
            this.element.addEventListener("wheel", this.onWheel, {
              passive: !1,
            }),
            this.element.addEventListener("touchstart", this.onTouchStart, {
              passive: !1,
            }),
            this.element.addEventListener("touchmove", this.onTouchMove, {
              passive: !1,
            }),
            this.element.addEventListener("touchend", this.onTouchEnd, {
              passive: !1,
            });
        }
        on(e, t) {
          return this.emitter.on(e, t);
        }
        destroy() {
          this.emitter.destroy(),
            this.element.removeEventListener("wheel", this.onWheel, {
              passive: !1,
            }),
            this.element.removeEventListener("touchstart", this.onTouchStart, {
              passive: !1,
            }),
            this.element.removeEventListener("touchmove", this.onTouchMove, {
              passive: !1,
            }),
            this.element.removeEventListener("touchend", this.onTouchEnd, {
              passive: !1,
            });
        }
      }
      class lm {
        constructor() {
          let {
            wrapper: e = window,
            content: t = document.documentElement,
            wheelEventsTarget: n = e,
            eventsTarget: i = n,
            smoothWheel: r = !0,
            syncTouch: a = !1,
            syncTouchLerp: o = 0.075,
            touchInertiaMultiplier: s = 35,
            duration: l,
            easing: c = (e) => Math.min(1, 1.001 - Math.pow(2, -10 * e)),
            lerp: u = !l && 0.1,
            infinite: d = !1,
            orientation: h = "vertical",
            gestureOrientation: p = "vertical",
            touchMultiplier: f = 1,
            wheelMultiplier: m = 1,
            normalizeWheel: g = !1,
            autoResize: v = !0,
            __experimental__naiveDimensions: _ = !1,
          } = arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : {};
          (this.__isSmooth = !1),
            (this.__isScrolling = !1),
            (this.__isStopped = !1),
            (this.__isLocked = !1),
            (this.onVirtualScroll = (e) => {
              let { deltaX: t, deltaY: n, event: i } = e;
              if (i.ctrlKey) return;
              const r = i.type.includes("touch"),
                a = i.type.includes("wheel");
              if (this.options.syncTouch && r && "touchstart" === i.type)
                return void this.reset();
              const o = 0 === t && 0 === n,
                s =
                  ("vertical" === this.options.gestureOrientation && 0 === n) ||
                  ("horizontal" === this.options.gestureOrientation && 0 === t);
              if (o || s) return;
              let l = i.composedPath();
              if (
                ((l = l.slice(0, l.indexOf(this.rootElement))),
                  l.find((e) => {
                    var t, n, i, o, s;
                    return (
                      (null === (t = e.hasAttribute) || void 0 === t
                        ? void 0
                        : t.call(e, "data-lenis-prevent")) ||
                      (r &&
                        (null === (n = e.hasAttribute) || void 0 === n
                          ? void 0
                          : n.call(e, "data-lenis-prevent-touch"))) ||
                      (a &&
                        (null === (i = e.hasAttribute) || void 0 === i
                          ? void 0
                          : i.call(e, "data-lenis-prevent-wheel"))) ||
                      ((null === (o = e.classList) || void 0 === o
                        ? void 0
                        : o.contains("lenis")) &&
                        !(null === (s = e.classList) || void 0 === s
                          ? void 0
                          : s.contains("lenis-stopped")))
                    );
                  }))
              )
                return;
              if (this.isStopped || this.isLocked)
                return void i.preventDefault();
              if (
                ((this.isSmooth =
                  (this.options.syncTouch && r) ||
                  (this.options.smoothWheel && a)),
                  !this.isSmooth)
              )
                return (this.isScrolling = !1), void this.animate.stop();
              i.preventDefault();
              let c = n;
              "both" === this.options.gestureOrientation
                ? (c = Math.abs(n) > Math.abs(t) ? n : t)
                : "horizontal" === this.options.gestureOrientation && (c = t);
              const u = r && this.options.syncTouch,
                d = r && "touchend" === i.type && Math.abs(c) > 5;
              d && (c = this.velocity * this.options.touchInertiaMultiplier),
                this.scrollTo(
                  this.targetScroll + c,
                  Object.assign(
                    { programmatic: !1 },
                    u
                      ? { lerp: d ? this.options.syncTouchLerp : 1 }
                      : {
                        lerp: this.options.lerp,
                        duration: this.options.duration,
                        easing: this.options.easing,
                      }
                  )
                );
            }),
            (this.onNativeScroll = () => {
              if (!this.__preventNextScrollEvent && !this.isScrolling) {
                const e = this.animatedScroll;
                (this.animatedScroll = this.targetScroll = this.actualScroll),
                  (this.velocity = 0),
                  (this.direction = Math.sign(this.animatedScroll - e)),
                  this.emit();
              }
            }),
            (window.lenisVersion = "1.0.39"),
            (e !== document.documentElement && e !== document.body) ||
            (e = window),
            (this.options = {
              wrapper: e,
              content: t,
              wheelEventsTarget: n,
              eventsTarget: i,
              smoothWheel: r,
              syncTouch: a,
              syncTouchLerp: o,
              touchInertiaMultiplier: s,
              duration: l,
              easing: c,
              lerp: u,
              infinite: d,
              gestureOrientation: p,
              orientation: h,
              touchMultiplier: f,
              wheelMultiplier: m,
              normalizeWheel: g,
              autoResize: v,
              __experimental__naiveDimensions: _,
            }),
            (this.animate = new rm()),
            (this.emitter = new om()),
            (this.dimensions = new am({
              wrapper: e,
              content: t,
              autoResize: v,
            })),
            this.toggleClassName("lenis", !0),
            (this.velocity = 0),
            (this.isLocked = !1),
            (this.isStopped = !1),
            (this.isSmooth = a || r),
            (this.isScrolling = !1),
            (this.targetScroll = this.animatedScroll = this.actualScroll),
            this.options.wrapper.addEventListener(
              "scroll",
              this.onNativeScroll,
              { passive: !1 }
            ),
            (this.virtualScroll = new sm(i, {
              touchMultiplier: f,
              wheelMultiplier: m,
              normalizeWheel: g,
            })),
            this.virtualScroll.on("scroll", this.onVirtualScroll);
        }
        destroy() {
          this.emitter.destroy(),
            this.options.wrapper.removeEventListener(
              "scroll",
              this.onNativeScroll,
              { passive: !1 }
            ),
            this.virtualScroll.destroy(),
            this.dimensions.destroy(),
            this.toggleClassName("lenis", !1),
            this.toggleClassName("lenis-smooth", !1),
            this.toggleClassName("lenis-scrolling", !1),
            this.toggleClassName("lenis-stopped", !1),
            this.toggleClassName("lenis-locked", !1);
        }
        on(e, t) {
          return this.emitter.on(e, t);
        }
        off(e, t) {
          return this.emitter.off(e, t);
        }
        setScroll(e) {
          this.isHorizontal
            ? (this.rootElement.scrollLeft = e)
            : (this.rootElement.scrollTop = e);
        }
        resize() {
          this.dimensions.resize();
        }
        emit() {
          this.emitter.emit("scroll", this);
        }
        reset() {
          (this.isLocked = !1),
            (this.isScrolling = !1),
            (this.animatedScroll = this.targetScroll = this.actualScroll),
            (this.velocity = 0),
            this.animate.stop();
        }
        start() {
          this.isStopped && ((this.isStopped = !1), this.reset());
        }
        stop() {
          this.isStopped ||
            ((this.isStopped = !0), this.animate.stop(), this.reset());
        }
        raf(e) {
          const t = e - (this.time || e);
          (this.time = e), this.animate.advance(0.001 * t);
        }
        scrollTo(e) {
          let {
            offset: t = 0,
            immediate: n = !1,
            lock: i = !1,
            duration: r = this.options.duration,
            easing: a = this.options.easing,
            lerp: o = !r && this.options.lerp,
            onComplete: s,
            force: l = !1,
            programmatic: c = !0,
          } = arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : {};
          if ((!this.isStopped && !this.isLocked) || l) {
            if (["top", "left", "start"].includes(e)) e = 0;
            else if (["bottom", "right", "end"].includes(e)) e = this.limit;
            else {
              let n;
              if (
                ("string" == typeof e
                  ? (n = document.querySelector(e))
                  : (null == e ? void 0 : e.nodeType) && (n = e),
                  n)
              ) {
                if (this.options.wrapper !== window) {
                  const e = this.options.wrapper.getBoundingClientRect();
                  t -= this.isHorizontal ? e.left : e.top;
                }
                const i = n.getBoundingClientRect();
                e = (this.isHorizontal ? i.left : i.top) + this.animatedScroll;
              }
            }
            if ("number" == typeof e) {
              if (
                ((e += t),
                  (e = Math.round(e)),
                  this.options.infinite
                    ? c && (this.targetScroll = this.animatedScroll = this.scroll)
                    : (e = im(0, e, this.limit)),
                  n)
              )
                return (
                  (this.animatedScroll = this.targetScroll = e),
                  this.setScroll(this.scroll),
                  this.reset(),
                  void (null == s || s(this))
                );
              if (!c) {
                if (e === this.targetScroll) return;
                this.targetScroll = e;
              }
              this.animate.fromTo(this.animatedScroll, e, {
                duration: r,
                easing: a,
                lerp: o,
                onStart: () => {
                  i && (this.isLocked = !0), (this.isScrolling = !0);
                },
                onUpdate: (e, t) => {
                  (this.isScrolling = !0),
                    (this.velocity = e - this.animatedScroll),
                    (this.direction = Math.sign(this.velocity)),
                    (this.animatedScroll = e),
                    this.setScroll(this.scroll),
                    c && (this.targetScroll = e),
                    t || this.emit(),
                    t &&
                    (this.reset(),
                      this.emit(),
                      null == s || s(this),
                      (this.__preventNextScrollEvent = !0),
                      requestAnimationFrame(() => {
                        delete this.__preventNextScrollEvent;
                      }));
                },
              });
            }
          }
        }
        get rootElement() {
          return this.options.wrapper === window
            ? document.documentElement
            : this.options.wrapper;
        }
        get limit() {
          return this.options.__experimental__naiveDimensions
            ? this.isHorizontal
              ? this.rootElement.scrollWidth - this.rootElement.clientWidth
              : this.rootElement.scrollHeight - this.rootElement.clientHeight
            : this.dimensions.limit[this.isHorizontal ? "x" : "y"];
        }
        get isHorizontal() {
          return "horizontal" === this.options.orientation;
        }
        get actualScroll() {
          return this.isHorizontal
            ? this.rootElement.scrollLeft
            : this.rootElement.scrollTop;
        }
        get scroll() {
          return this.options.infinite
            ? ((this.animatedScroll % (e = this.limit)) + e) % e
            : this.animatedScroll;
          var e;
        }
        get progress() {
          return 0 === this.limit ? 1 : this.scroll / this.limit;
        }
        get isSmooth() {
          return this.__isSmooth;
        }
        set isSmooth(e) {
          this.__isSmooth !== e &&
            ((this.__isSmooth = e), this.toggleClassName("lenis-smooth", e));
        }
        get isScrolling() {
          return this.__isScrolling;
        }
        set isScrolling(e) {
          this.__isScrolling !== e &&
            ((this.__isScrolling = e),
              this.toggleClassName("lenis-scrolling", e));
        }
        get isStopped() {
          return this.__isStopped;
        }
        set isStopped(e) {
          this.__isStopped !== e &&
            ((this.__isStopped = e), this.toggleClassName("lenis-stopped", e));
        }
        get isLocked() {
          return this.__isLocked;
        }
        set isLocked(e) {
          this.__isLocked !== e &&
            ((this.__isLocked = e), this.toggleClassName("lenis-locked", e));
        }
        get className() {
          let e = "lenis";
          return (
            this.isStopped && (e += " lenis-stopped"),
            this.isLocked && (e += " lenis-locked"),
            this.isScrolling && (e += " lenis-scrolling"),
            this.isSmooth && (e += " lenis-smooth"),
            e
          );
        }
        toggleClassName(e, t) {
          this.rootElement.classList.toggle(e, t),
            this.emitter.emit("className change", this);
        }
      }
      function cm(e) {
        var t,
          n,
          i = "";
        if ("string" == typeof e || "number" == typeof e) i += e;
        else if ("object" == typeof e)
          if (Array.isArray(e)) {
            var r = e.length;
            for (t = 0; t < r; t++)
              e[t] && (n = cm(e[t])) && (i && (i += " "), (i += n));
          } else for (n in e) e[n] && (i && (i += " "), (i += n));
        return i;
      }
      const um = function () {
        for (var e, t, n = 0, i = "", r = arguments.length; n < r; n++)
          (e = arguments[n]) && (t = cm(e)) && (i && (i += " "), (i += t));
        return i;
      };
      "function" == typeof SuppressedError && SuppressedError;
      const dm = (0, e.createContext)(),
        hm = Hf(() => ({}));
      const pm = (0, e.forwardRef)((t, n) => {
        var {
          children: i,
          root: r = !1,
          options: a = {},
          autoRaf: o = !0,
          rafPriority: s = 0,
          className: l,
        } = t,
          c = (function (e, t) {
            var n = {};
            for (var i in e)
              Object.prototype.hasOwnProperty.call(e, i) &&
                t.indexOf(i) < 0 &&
                (n[i] = e[i]);
            if (
              null != e &&
              "function" == typeof Object.getOwnPropertySymbols
            ) {
              var r = 0;
              for (i = Object.getOwnPropertySymbols(e); r < i.length; r++)
                t.indexOf(i[r]) < 0 &&
                  Object.prototype.propertyIsEnumerable.call(e, i[r]) &&
                  (n[i[r]] = e[i[r]]);
            }
            return n;
          })(t, [
            "children",
            "root",
            "options",
            "autoRaf",
            "rafPriority",
            "className",
          ]);
        const u = (0, e.useRef)(),
          d = (0, e.useRef)(),
          [h, p] = (0, e.useState)(),
          f = (0, e.useRef)([]),
          m = (0, e.useCallback)((e, t) => {
            f.current.push({ callback: e, priority: t }),
              f.current.sort((e, t) => e.priority - t.priority);
          }, []),
          g = (0, e.useCallback)((e) => {
            f.current = f.current.filter((t) => t.callback !== e);
          }, []);
        (0, e.useImperativeHandle)(
          n,
          () => ({ wrapper: u.current, content: d.current, lenis: h }),
          [h]
        ),
          (0, e.useEffect)(() => {
            const e = new lm(
              Object.assign(
                Object.assign({}, a),
                !r && { wrapper: u.current, content: d.current }
              )
            );
            return (
              p(e),
              () => {
                e.destroy(), p(void 0);
              }
            );
          }, [r, JSON.stringify(a)]),
          Gf((e) => {
            o && (null == h || h.raf(e));
          }, s),
          (0, e.useEffect)(() => {
            r &&
              h &&
              hm.setState({ lenis: h, addCallback: m, removeCallback: g });
          }, [r, h, m, g]);
        const v = (0, e.useCallback)((e) => {
          for (let t = 0; t < f.current.length; t++) f.current[t].callback(e);
        }, []);
        (0, e.useEffect)(
          () => (
            null == h || h.on("scroll", v),
            () => {
              null == h || h.off("scroll", v);
            }
          ),
          [h, v]
        );
        const _ = (0, e.useCallback)(() => {
          u.current &&
            (u.current.className = um(null == h ? void 0 : h.className, l));
        }, [h, l]);
        return (
          (0, e.useEffect)(
            () => (
              _(),
              null == h || h.on("className change", _),
              () => {
                null == h || h.off("className change", _);
              }
            ),
            [h, _]
          ),
          e.createElement(
            dm.Provider,
            { value: { lenis: h, addCallback: m, removeCallback: g } },
            r
              ? i
              : e.createElement(
                "div",
                Object.assign(
                  {
                    ref: u,
                    className: um(null == h ? void 0 : h.className, l),
                  },
                  c
                ),
                e.createElement("div", { ref: d }, i)
              )
          )
        );
      }),
        fm = (t) => {
          let { onComplete: n } = t;
          const [i, r] = (0, e.useState)(0);
          return (
            (0, e.useEffect)(() => {
              window.scrollTo(0, 0);
              (() => {
                if (i < 101) {
                  const e = 30,
                    t = Math.random() < 0.1 ? 100 + 200 * Math.random() : e;
                  setTimeout(() => {
                    r(i + 1);
                  }, t);
                } else setTimeout(n, 500);
              })();
            }, [i, n]),
            (0, Do.jsx)(No, {
              children:
                i < 101 &&
                (0, Do.jsx)(To.div, {
                  id: "loading-screen",
                  initial: { opacity: 1 },
                  exit: { opacity: 0, transition: { duration: 0.5 } },
                  className:
                    "fixed top-0 left-0 w-full h-full grid place-items-center",
                  children: (0, Do.jsxs)("h1", {
                    className: "relative",
                    children: [i, "%"],
                  }),
                }),
            })
          );
        };
      const mm = function () {
        const t = (0, e.useRef)(null),
          n = l(t, { once: !0 }),
          i = (0, e.useRef)(null),
          r = l(i),
          [a, o] = (0, e.useState)(!1);
        return (
          (0, e.useEffect)(() => {
            a
              ? document.body.removeAttribute("data-lenis-prevent")
              : document.body.setAttribute("data-lenis-prevent", "true"),
              (document.body.style.overflow = a ? "visible" : "hidden");
          }, [a]),
          (0, Do.jsx)(Oo, {
            children: (0, Do.jsx)(pm, {
              root: !0,
              children: (0, Do.jsxs)(Lf, {
                children: [
                  !a &&
                  (0, Do.jsx)(fm, {
                    onComplete: () => {
                      o(!0);
                    },
                  }),
                  (0, Do.jsxs)("div", {
                    id: "hero",
                    className: "container relative uppercase",
                    children: [
                      (0, Do.jsx)(To.h1, {
                        transition: {
                          duration: 1,
                          ease: [0.075, 0.82, 0.165, 1],
                        },
                        initial: { x: -200, opacity: 0 },
                        animate: a ? { x: 0, opacity: 1 } : {},
                        className: "absolute z-10",
                        children: "Frontend developer",
                      }),
                      (0, Do.jsxs)("h1", {
                        className: "absolute z-10",
                        children: [
                          (0, Do.jsx)(To.span, {
                            className: "block",
                            transition: {
                              duration: 1,
                              ease: [0.075, 0.82, 0.165, 1],
                              delay: 0.2,
                            },
                            initial: { x: -100, opacity: 0 },
                            animate: a ? { x: 0, opacity: 1 } : {},
                            children: "specializing in",
                          }),
                          (0, Do.jsx)(To.span, {
                            className: "block",
                            transition: {
                              duration: 1,
                              ease: [0.075, 0.82, 0.165, 1],
                              delay: 0.3,
                            },
                            initial: { x: -100, opacity: 0 },
                            animate: a ? { x: 0, opacity: 1 } : {},
                            children: "interactive web",
                          }),
                          (0, Do.jsx)(To.span, {
                            transition: {
                              duration: 1,
                              ease: [0.075, 0.82, 0.165, 1],
                              delay: 0.4,
                            },
                            initial: { x: -100, opacity: 0 },
                            animate: a ? { x: 0, opacity: 1 } : {},
                            className: "block",
                            children: "experiences",
                          }),
                        ],
                      }),
                      (0, Do.jsx)(To.h1, {
                        transition: {
                          duration: 1,
                          ease: [0.075, 0.82, 0.165, 1],
                          delay: 0.6,
                        },
                        initial: { y: 100, opacity: 0 },
                        animate: a ? { y: 0, opacity: 1 } : {},
                        className: "absolute z-10",
                        children: "for tech and",
                      }),
                      (0, Do.jsx)(To.h1, {
                        transition: {
                          duration: 1,
                          ease: [0.075, 0.82, 0.165, 1],
                          delay: 0.7,
                        },
                        initial: { y: 100, opacity: 0 },
                        animate: a ? { y: 0, opacity: 1 } : {},
                        className: "absolute z-10",
                        children: "creative teams",
                      }),
                      (0, Do.jsx)(Uo, {
                        text: "Currently seeking new opportunities",
                        typingAnimation: !0,
                        delayOffset: 1,
                        loadingComplete: a,
                      }),
                      (0, Do.jsx)(wf, {
                        sizeInVW: 45,
                        shape: "box",
                        delay: 0.5,
                        id: "prism-1",
                        loadingComplete: a,
                      }),
                      (0, Do.jsx)(wf, {
                        sizeInVW: 21,
                        shape: "triangle",
                        delay: 1.25,
                        id: "prism-2",
                        loadingComplete: a,
                      }),
                    ],
                  }),
                  (0, Do.jsxs)("div", {
                    id: "experience",
                    className: "uppercase w-full relative",
                    children: [
                      (0, Do.jsxs)("div", {
                        className:
                          "container text relative border-top-accent",
                        children: [
                          (0, Do.jsx)(To.h2, {
                            transition: {
                              duration: 1,
                              ease: [0.075, 0.82, 0.165, 1],
                              delay: 0.2,
                            },
                            initial: { x: -100, opacity: 0 },
                            animate: a && n ? { x: 0, opacity: 1 } : {},
                            children: "Professional experience",
                          }),
                          (0, Do.jsx)(To.h1, {
                            transition: {
                              duration: 2,
                              ease: [0.075, 0.82, 0.165, 1],
                              delay: 0.3,
                            },
                            initial: { y: 10, opacity: 0 },
                            animate: a && n ? { y: 0, opacity: 1 } : {},
                            children: "Web Design 1+ Year",
                          }),
                          (0, Do.jsx)(To.h1, {
                            ref: t,
                            transition: {
                              duration: 2,
                              ease: [0.075, 0.82, 0.165, 1],
                              delay: 0.4,
                            },
                            initial: { y: 10, opacity: 0 },
                            animate: a && n ? { y: 0, opacity: 1 } : {},
                            children: "Website Dev 2+ Years",
                          }),
                          (0, Do.jsx)(Uo, {
                            text: "In Web Design and Web developer, i was 2+ Years experience. Have creative thinking , fast learner , and easy adapt in team work",
                            typingAnimation: !1,
                            delayOffset: 0.5,
                            loadingComplete: a,
                          }),
                        ],
                      }),
                      (0, Do.jsx)(Af, {}),
                    ],
                  }),
                  (0, Do.jsx)(zo, {}),
                  (0, Do.jsx)("div", {
                    id: "skills",
                    className: "uppercase",
                    children: (0, Do.jsx)("div", {
                      className: "container",
                      children: (0, Do.jsx)(Rf, {}),
                    }),
                  }),
                  (0, Do.jsx)("div", {
                    id: "contact",
                    className: "uppercase",
                    children: (0, Do.jsxs)("div", {
                      className:
                        "container flex justify-end relative border-top-accent",
                      children: [
                        (0, Do.jsx)(wf, {
                          sizeInVW: 70,
                          shape: "sphere",
                          delay: 0,
                          id: "prism-3",
                          loadingComplete: a,
                        }),
                        (0, Do.jsx)("div", {
                          className: "black-block absolute",
                        }),
                        (0, Do.jsx)(To.div, {
                          transition: {
                            duration: 0.5,
                            ease: [0.075, 0.82, 0.165, 1],
                            delay: 0.5,
                          },
                          initial: { scaleY: 0 },
                          animate: r ? { scaleY: 1 } : {},
                          className: "green-block-1 absolute",
                        }),
                        (0, Do.jsx)(To.div, {
                          transition: {
                            duration: 0.5,
                            ease: [0.075, 0.82, 0.165, 1],
                            delay: 0.65,
                          },
                          initial: { scaleY: 0 },
                          animate: r ? { scaleY: 1 } : {},
                          className: "green-block-2 absolute",
                        }),
                        (0, Do.jsx)(To.h1, {
                          transition: {
                            duration: 0.5,
                            ease: [0.075, 0.82, 0.165, 1],
                            delay: r ? 0.5 : 0,
                          },
                          initial: { scaleY: 0 },
                          animate: r ? { scaleY: 1 } : {},
                          className: "absolute part-1 z-10",
                          children: "+ Let's work",
                        }),
                        (0, Do.jsx)(To.h1, {
                          transition: {
                            duration: 0.5,
                            ease: [0.075, 0.82, 0.165, 1],
                            delay: r ? 0.65 : 0,
                          },
                          initial: { scaleY: 0 },
                          animate: r ? { scaleY: 1 } : {},
                          className: "absolute part-2 z-10",
                          children: "together",
                        }),
                        (0, Do.jsx)(To.div, {
                          transition: {
                            duration: 0.5,
                            ease: [0.075, 0.82, 0.165, 1],
                            delay: r ? 0.8 : 0,
                          },
                          initial: { scaleY: 0 },
                          animate: r ? { scaleY: 1 } : {},
                          className: "linkedin absolute z-10 select-none",
                          children: (0, Do.jsx)(Fo, {
                            url: "https://wa.me/6289501128383",
                            text: "Contact me on WhatsApp",
                            isCTA: !1,
                          }),
                        }),
                        (0, Do.jsx)(To.div, {
                          transition: {
                            duration: 0.5,
                            ease: [0.075, 0.82, 0.165, 1],
                            delay: r ? 1.1 : 0,
                          },
                          initial: { x: 100, opacity: 0 },
                          animate: r ? { x: 0, opacity: 1 } : {},
                          className: "cta absolute right-0",
                          children: (0, Do.jsx)(Fo, {
                            url: "",
                            text: "",
                            isCTA: !0,
                          }),
                        }),
                        (0, Do.jsxs)("div", {
                          ref: i,
                          className:
                            "img-container z-10 relative overflow-hidden",
                          children: [
                            (0, Do.jsx)("img", {
                              className: "",
                              src: "https://raw.githubusercontent.com/VoyagerXyroo/aryaportfolio/main/Untitled%20design.png",
                              alt: "",
                            }),
                            (0, Do.jsx)(To.img, { 
                              ref: i,
                              transition: {
                                duration: 0.5,
                                ease: [0.075, 0.82, 0.165, 1], 
                                delay: r ? 1 : 0,
                              },
                              initial: { opacity: 1 },
                              animate: r ? { opacity: 0 } : {},
                              className: "absolute top-0 left-0",
                              src: "https://raw.githubusercontent.com/VoyagerXyroo/aryaportfolio/main/Untitled%20design%20(1).png",
                              alt: "",
                            }),
                          ],
                        }),
                      ],
                    }),
                  }),
                  (0, Do.jsx)(Cf, {}),
                  (0, Do.jsx)(Pf, {}),
                ],
              }),
            }),
          })
        );
      },
        gm = (e) => {
          e &&
            e instanceof Function &&
            n
              .e(453)
              .then(n.bind(n, 453))
              .then((t) => {
                let {
                  getCLS: n,
                  getFID: i,
                  getFCP: r,
                  getLCP: a,
                  getTTFB: o,
                } = t;
                n(e), i(e), r(e), a(e), o(e);
              });
        };
      t
        .createRoot(document.getElementById("root"))
        .render((0, Do.jsx)(e.StrictMode, { children: (0, Do.jsx)(mm, {}) })),
        gm();
    })();
})();

//# sourceMappingURL=main.37df7aa4.js.map
